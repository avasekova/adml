package gui;

import analysis.AnalysisUtils;
import analysis.Transformations;
import gui.dialogs.*;
import gui.filefilters.*;
import gui.files.OverwriteFileChooser;
import gui.files.PlotExtensionFileChooser;
import gui.renderers.ErrorTableCellRenderer;
import gui.settingspanels.*;
import gui.subpanels.AnalysisBatchSubPanel;
import gui.subpanels.BayesianSubPanel;
import gui.subpanels.CTSSubPanel;
import gui.subpanels.ForecastValuesSubPanel;
import gui.subpanels.ModelDescriptionsSubPanel;
import gui.subpanels.PlotSubPanel;
import gui.subpanels.ResidualsSubPanel;
import gui.subpanels.TestsSubPanel;
import gui.tablemodels.*;
import models.*;
import models.avg.*;
import models.params.*;
import org.rosuda.javaGD.JGDBufferedPanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import rmi.AdmlProviderImpl;
import rmi.OnJobFinishedListener;
import rmi.Task;
import utils.*;
import utils.imlp.IntervalNamesCentreRadius;
import utils.imlp.IntervalNamesLowerUpper;
import utils.ugliez.CallParamsDrawPlotGeneral;
import utils.ugliez.CallParamsDrawPlots;
import utils.ugliez.CallParamsDrawPlotsITS;
import utils.ugliez.PlotStateKeeper;

import javax.swing.*;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

import static java.util.concurrent.TimeUnit.DAYS;


public class MainFrame extends javax.swing.JFrame implements OnJobFinishedListener<TrainAndTestReport> {
    private static final Logger logger = LoggerFactory.getLogger(MainFrame.class);

    private static MainFrame INSTANCE = null; //created in main()

    private AdmlProviderImpl<TrainAndTestReport> server;
    private final Queue<TrainAndTestReport> taskResults = new ConcurrentLinkedQueue<>();
    private final AtomicInteger taskToProcess = new AtomicInteger(0);
    private final AtomicInteger taskProcessed = new AtomicInteger(0);

    private MainFrame() {
        initComponents();
        addComponentsToGroups();
    }
    
    public static synchronized MainFrame getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new MainFrame();
        }
        
        return INSTANCE;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_runFakeIntCRLBUB = new javax.swing.ButtonGroup();
        panelEverything = new javax.swing.JTabbedPane();
        panelCTS = new CTSSubPanel();
        panelTransform = new javax.swing.JPanel();
        buttonLogTransformSeries = new javax.swing.JButton();
        buttonDiffSeries = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        listColnamesTransform = new javax.swing.JList();
        buttonRemoveTrend = new javax.swing.JButton();
        buttonAggregateToITS = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        textFieldAggregateToITSevery = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        buttonConvertITSLBUBCR1 = new javax.swing.JButton();
        buttonNormalize = new javax.swing.JButton();
        panelIntTS = new javax.swing.JPanel();
        buttonPlotAddITS = new javax.swing.JButton();
        buttonPlotRemoveITS = new javax.swing.JButton();
        buttonPlotSelectedITS = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listPlotITSspecs = new javax.swing.JList();
        buttonPlotAllITSScatterplot = new javax.swing.JButton();
        buttonPlotAllITSScatterplotMatrix = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jSeparator14 = new javax.swing.JSeparator();
        buttonConvertITSLBUBCR = new javax.swing.JButton();
        buttonITSclearSelection = new javax.swing.JButton();
        panelPlotImage = new PlotSubPanel();
        panelTestsOutside = new TestsSubPanel();
        panelData = new javax.swing.JPanel();
        scrollPaneData = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        panelAnalysisSettings = new javax.swing.JPanel();
        paneSettingsMethods = new javax.swing.JTabbedPane();
        paneSettingsMethodsMLP = new javax.swing.JPanel();
        jLabelRPkg = new javax.swing.JLabel();
        comboBoxRPackage = new javax.swing.JComboBox();
        panelSettingsMLPPackage = new javax.swing.JPanel();
        scrollPane_panelSettingsMLPPackage_nnet = new javax.swing.JScrollPane();
        panelSettingsMLPPackage_nnet = new MLPNnetSettingsPanel();
        panelSettingsMLPPackage_nnetar = new MLPNnetarSettingsPanel();
        panelSettingsMLPPackage_neuralnet = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        panelMLPPercentTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_MLP = new javax.swing.JButton();
        paneSettingsMethodsMLPint = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        panelSettingsMLPintPackage = new javax.swing.JPanel();
        panelSettingsMLPintPackage_nnet = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        scrollPane_panelSettingsMLPintPackage_nnet_center = new javax.swing.JScrollPane();
        panelSettingsMLPintPackage_nnet_center = new MLPNnetSettingsPanel();
        scrollPane_panelSettingsMLPintPackage_nnet_radius = new javax.swing.JScrollPane();
        panelSettingsMLPintPackage_nnet_radius = new MLPNnetSettingsPanel();
        panelSettingsMLPintPackage_nnetar = new javax.swing.JPanel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        panelSettingsMLPintPackage_nnetar_center = new MLPNnetarSettingsPanel();
        panelSettingsMLPintPackage_nnetar_radius = new MLPNnetarSettingsPanel();
        jLabelRPkg1 = new javax.swing.JLabel();
        comboBoxRPackageMLPint = new javax.swing.JComboBox();
        panelMLPintSettingsDistance = new DistanceSettingsPanel();
        panelMLPintPercentTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_MLPint = new javax.swing.JButton();
        panelBestModelCriterionMLPint = new gui.settingspanels.BestModelCriterionIntervalSettingsPanel();
        jLabel12 = new javax.swing.JLabel();
        textFieldNumNetsToTrainMLPint = new javax.swing.JTextField();
        panelCRCombinationsStrategyMLPint = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelSettingsMLPintPackage_nnet_radius, (SettingsPanel) panelSettingsMLPintPackage_nnetar_radius);
        paneSettingsMethodsIntervalMLP = new javax.swing.JPanel();
        panelSettingsIntervalMLPMode = new javax.swing.JPanel();
        panelSettingsIntervalMLPModeCcode = new IntMLPCcodeSettingsPanel();
        panelSettingsIntervalMLPModeNeuralnet = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        comboBoxIntervalMLPMode = new javax.swing.JComboBox();
        panelIntMLPPercentTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_intMLP = new javax.swing.JButton();
        paneSettingsMethodsRBF = new javax.swing.JPanel();
        panelSettingsRBFMain = new RBFSettingsPanel();
        panelRBFPercentTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_RBF = new javax.swing.JButton();
        paneSettingsMethodsRBFint = new javax.swing.JPanel();
        jLabel143 = new javax.swing.JLabel();
        jLabel150 = new javax.swing.JLabel();
        jLabel151 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel156 = new javax.swing.JLabel();
        jLabel157 = new javax.swing.JLabel();
        jLabel138 = new javax.swing.JLabel();
        textFieldNumNetworksToTrainRBFint = new javax.swing.JTextField();
        panelRBFintSettingsDistance = new DistanceSettingsPanel();
        panelSettingsRBFint_center = new RBFSettingsPanel();
        panelSettingsRBFint_radius = new RBFSettingsPanel();
        panelRBFintPercentTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_RBFint = new javax.swing.JButton();
        panelBestModelCriterionRBFint = new gui.settingspanels.BestModelCriterionIntervalSettingsPanel();
        panelCRCombinationStrategyRBFint = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelSettingsRBFint_radius);
        paneSettingsMethodsARIMA = new javax.swing.JPanel();
        panelSettingsARIMAMain = new ARIMASettingsPanel();
        panelARIMAPercTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_ARIMA = new javax.swing.JButton();
        paneSettingsMethodsKNN = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        panelSettingsKNNoptions = new javax.swing.JPanel();
        panelSettingsKNNoptions_FNN = new KNNFNNSettingsPanel();
        panelSettingsKNNoptions_custom = new KNNCustomSettingsPanel();
        panelSettingsKNNoptions_kknn = new KNNkknnSettingsPanel();
        panelSettingsKNNoptions_myown = new KNNmyownSettingsPanel();
        comboBoxKNNoptions = new javax.swing.JComboBox();
        panelKNNPercTrain = new PercentTrainSettingsPanel();
        buttonSettingsAddToBatch_KNN = new javax.swing.JButton();
        panelSettingsMethodsVARint = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        panelVARintInside = new javax.swing.JPanel();
        panelVARintInsideBecause = new VARintSettingsPanel();
        panelVARintPercentTrain = new PercentTrainSettingsPanel();
        panelVARintDistance = new DistanceSettingsPanel();
        buttonSettingsAddToBatch_VARint = new javax.swing.JButton();
        panelSettingsMethodsSES = new javax.swing.JPanel();
        panelSESpercentTrain = new PercentTrainSettingsPanel();
        panelSESmain = new SESSettingsPanel();
        buttonSettingsAddToBatch_SES = new javax.swing.JButton();
        panelSettingsMethodsSESint = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        panelSESintPercentTrain = new PercentTrainSettingsPanel();
        panelSESint_center = new SESSettingsPanel();
        jLabel154 = new javax.swing.JLabel();
        jLabel155 = new javax.swing.JLabel();
        panelSESint_radius = new SESSettingsPanel();
        jSeparator7 = new javax.swing.JSeparator();
        panelSESintDistance = new DistanceSettingsPanel();
        buttonSettingsAddToBatch_SESint = new javax.swing.JButton();
        panelCRCombinationStrategySESint = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelSESint_radius);
        panelSettingsMethodsMAvg = new javax.swing.JPanel();
        buttonSettingsAddToBatch_MAvg = new javax.swing.JButton();
        panelMAvgMain = new MAvgSettingsPanel();
        panelSettingsMethodsHolt = new javax.swing.JPanel();
        panelHoltPercentTrain = new PercentTrainSettingsPanel();
        panelHoltInside = new HoltSettingsPanel();
        buttonSettingsAddToBatch_Holt = new javax.swing.JButton();
        panelSettingsMethodsHoltInt = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        panelHoltIntPercentTrain = new PercentTrainSettingsPanel();
        panelHoltIntDistance = new DistanceSettingsPanel();
        panelHoltInt_center = new HoltSettingsPanel();
        jLabel152 = new javax.swing.JLabel();
        jLabel153 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        panelHoltInt_radius = new HoltSettingsPanel();
        buttonSettingsAddToBatch_Holtint = new javax.swing.JButton();
        panelCRCombinationsStrategyHoltInt = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelHoltInt_radius);
        panelSettingsMethodsIntervalHolt = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        panelIntervalHoltPercentTrain = new PercentTrainSettingsPanel();
        panelIntervalHoltDistance = new DistanceSettingsPanel();
        panelIntervalHoltMain = new IntHoltSettingsPanel();
        buttonSettingsAddToBatch_IntervalHolt = new javax.swing.JButton();
        panelSettingsMethodsHoltWinters = new javax.swing.JPanel();
        panelHoltWintersPercentTrain = new PercentTrainSettingsPanel();
        panelHoltWintersInside = new HoltWintersSettingsPanel();
        buttonSettingsAddToBatch_HoltWinters = new javax.swing.JButton();
        panelSettingsMethodsHoltWintersInt = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        panelHoltWintersIntPercentTrain = new PercentTrainSettingsPanel();
        panelHoltWintersIntDistance = new DistanceSettingsPanel();
        jLabel158 = new javax.swing.JLabel();
        panelHoltWintersInt_center = new HoltWintersSettingsPanel();
        jSeparator8 = new javax.swing.JSeparator();
        panelHoltWintersInt_radius = new HoltWintersSettingsPanel();
        jLabel159 = new javax.swing.JLabel();
        buttonSettingsAddToBatch_HoltWintersInt = new javax.swing.JButton();
        panelCRCombinationStrategyHoltWintersInt = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelHoltWintersInt_radius);
        paneSettingsMethodsHybrid = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxSettingsHybridMethod_center = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comboBoxSettingsHybridMethod_radius = new javax.swing.JComboBox();
        panelSettingsHybrid_centerMain = new javax.swing.JPanel();
        scrollPane_panelSettingsHybrid_centerMain_MLPnnet = new javax.swing.JScrollPane();
        panelSettingsHybrid_centerMain_MLPnnet = new MLPNnetSettingsPanel();
        panelSettingsHybrid_centerMain_MLPnnetar = new MLPNnetarSettingsPanel();
        panelSettingsHybrid_centerMain_RBF = new RBFSettingsPanel();
        panelSettingsHybrid_centerMain_ARIMA = new ARIMASettingsPanel();
        panelSettingsHybrid_centerMain_KNNFNN = new KNNFNNSettingsPanel();
        panelSettingsHybrid_centerMain_KNNkknn = new KNNkknnSettingsPanel();
        panelSettingsHybrid_centerMain_SES = new SESSettingsPanel();
        panelSettingsHybrid_centerMain_Holt = new HoltSettingsPanel();
        panelSettingsHybrid_centerMain_BNN = new BNNSettingsPanel();
        jSeparator3 = new javax.swing.JSeparator();
        panelSettingsHybrid_radiusMain = new javax.swing.JPanel();
        scrollPane_panelSettingsHybrid_radiusMain_MLPnnet = new javax.swing.JScrollPane();
        panelSettingsHybrid_radiusMain_MLPnnet = new MLPNnetSettingsPanel();
        panelSettingsHybrid_radiusMain_MLPnnetar = new MLPNnetarSettingsPanel();
        panelSettingsHybrid_radiusMain_RBF = new RBFSettingsPanel();
        panelSettingsHybrid_radiusMain_ARIMA = new ARIMASettingsPanel();
        panelSettingsHybrid_radiusMain_KNNFNN = new KNNFNNSettingsPanel();
        panelSettingsHybrid_radiusMain_KNNkknn = new KNNkknnSettingsPanel();
        panelSettingsHybrid_radiusMain_SES = new SESSettingsPanel();
        panelSettingsHybrid_radiusMain_Holt = new HoltSettingsPanel();
        panelSettingsHybrid_radiusMain_BNN = new BNNSettingsPanel();
        panelSettingsHybridPercentTrain = new PercentTrainSettingsPanel();
        panelSettingsHybridDistance = new DistanceSettingsPanel();
        buttonSettingsAddToBatch_Hybrid = new javax.swing.JButton();
        paneSettingsMethodsBNN = new javax.swing.JPanel();
        buttonSettingsAddToBatch_BNN = new javax.swing.JButton();
        panelBNNPercentTrain = new PercentTrainSettingsPanel();
        panelSettingsBNNinside = new gui.settingspanels.BNNSettingsPanel();
        paneSettingsMethodsBNNint = new javax.swing.JPanel();
        buttonSettingsAddToBatch_BNNint = new javax.swing.JButton();
        panelBNNintPercentTrain = new PercentTrainSettingsPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel160 = new javax.swing.JLabel();
        panelBNNintSettingsDistance = new DistanceSettingsPanel();
        jLabel139 = new javax.swing.JLabel();
        textFieldNumNetworksToTrainBNNint = new javax.swing.JTextField();
        panelBestModelCriterionBNNint = new gui.settingspanels.BestModelCriterionIntervalSettingsPanel();
        panelSettingsBNNint_center = new BNNSettingsPanel();
        panelSettingsBNNint_radius = new BNNSettingsPanel();
        jSeparator13 = new javax.swing.JSeparator();
        panelCRCombinationStrategyBNNint = new CRCombinationsStrategySettingsPanel((SettingsPanel) panelSettingsBNNint_radius);
        panelRunOutside = new javax.swing.JPanel();
        comboBoxColnamesRun = new javax.swing.JComboBox();
        jLabelTrainingInfo = new javax.swing.JLabel();
        checkBoxRunMLPnnetar = new javax.swing.JCheckBox();
        checkBoxRunARIMA = new javax.swing.JCheckBox();
        checkBoxRunMLPnnet = new javax.swing.JCheckBox();
        checkBoxRunMLPneuralnet = new javax.swing.JCheckBox();
        checkBoxRunIntervalMLPCcode = new javax.swing.JCheckBox();
        checkBoxRunIntervalMLPneuralnet = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        buttonTrainAndTest = new javax.swing.JButton();
        checkBoxRunKNNfnn = new javax.swing.JCheckBox();
        jLabel49 = new javax.swing.JLabel();
        labelRunFakeIntLower = new javax.swing.JLabel();
        comboBoxRunFakeIntCenter = new javax.swing.JComboBox();
        comboBoxRunFakeIntRadius = new javax.swing.JComboBox();
        labelRunFakeIntUpper = new javax.swing.JLabel();
        checkBoxRunMLPintNnetar = new javax.swing.JCheckBox();
        checkBoxRunKNNinterval = new javax.swing.JCheckBox();
        checkBoxRunKNNcustom = new javax.swing.JCheckBox();
        jLabel71 = new javax.swing.JLabel();
        textFieldRunNumForecasts = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        checkBoxRunKNNkknn = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textFieldRunDataRangeFrom = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        textFieldRunDataRangeTo = new javax.swing.JTextField();
        labelRunFakeIntCenter = new javax.swing.JLabel();
        labelRunFakeIntRadius = new javax.swing.JLabel();
        comboBoxRunFakeIntLower = new javax.swing.JComboBox();
        comboBoxRunFakeIntUpper = new javax.swing.JComboBox();
        radioButtonRunFakeIntLowerUpper = new javax.swing.JRadioButton();
        radioButtonRunFakeIntCenterRadius = new javax.swing.JRadioButton();
        checkBoxRunMLPintNnet = new javax.swing.JCheckBox();
        buttonRunRestoreRangeAll = new javax.swing.JButton();
        checkBoxAvgSimpleCTSperM = new javax.swing.JCheckBox();
        checkBoxAvgSimpleIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgONLY = new javax.swing.JCheckBox();
        checkBoxAvgSimpleCTS = new javax.swing.JCheckBox();
        checkBoxAvgSimpleIntTS = new javax.swing.JCheckBox();
        checkBoxRunIntervalRandomWalk = new javax.swing.JCheckBox();
        jLabel133 = new javax.swing.JLabel();
        checkBoxRunVAR = new javax.swing.JCheckBox();
        checkBoxRunRBF = new javax.swing.JCheckBox();
        checkBoxRunRBFint = new javax.swing.JCheckBox();
        checkBoxRunHybrid = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        checkBoxRunVARint = new javax.swing.JCheckBox();
        checkBoxRunHolt = new javax.swing.JCheckBox();
        checkBoxRunHoltInt = new javax.swing.JCheckBox();
        checkBoxRunIntervalHolt = new javax.swing.JCheckBox();
        checkBoxRunIncludeRMSSE = new javax.swing.JCheckBox();
        textFieldRunRMSSESeasonality = new javax.swing.JTextField();
        checkBoxRunSES = new javax.swing.JCheckBox();
        checkBoxRunSESint = new javax.swing.JCheckBox();
        checkBoxRunHoltWinters = new javax.swing.JCheckBox();
        checkBoxRunHoltWintersInt = new javax.swing.JCheckBox();
        checkBoxRunRandomWalkCTS = new javax.swing.JCheckBox();
        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        checkBoxAvgMDeCTSperM = new javax.swing.JCheckBox();
        checkBoxAvgMDeCTS = new javax.swing.JCheckBox();
        checkBoxAvgMDeIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgMDeIntTS = new javax.swing.JCheckBox();
        jLabel45 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        checkBoxAvgTheilsuCTSperM = new javax.swing.JCheckBox();
        checkBoxAvgTheilsuCTS = new javax.swing.JCheckBox();
        checkBoxAvgTheilsuIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgTheilsuIntTS = new javax.swing.JCheckBox();
        checkBoxAvgCvgEffIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgCvgEffIntTS = new javax.swing.JCheckBox();
        checkBoxAvgCenterLogRadiusIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgCenterLogRadiusIntTS = new javax.swing.JCheckBox();
        checkBoxAvgMedianCTSperM = new javax.swing.JCheckBox();
        checkBoxAvgMedianCTS = new javax.swing.JCheckBox();
        checkBoxAvgMedianIntTSperM = new javax.swing.JCheckBox();
        checkBoxAvgMedianIntTS = new javax.swing.JCheckBox();
        checkBoxRunBNN = new javax.swing.JCheckBox();
        checkBoxRunBNNInt = new javax.swing.JCheckBox();
        checkBoxRunKNNmyown = new javax.swing.JCheckBox();
        checkBoxRunMAvg = new javax.swing.JCheckBox();
        checkBoxAvgEigenvalsPCAIntTS = new javax.swing.JCheckBox();
        panelErrorMeasuresAll = new javax.swing.JPanel();
        panelErrorMeasures = new javax.swing.JPanel();
        buttonRunShowHiddenErrorMeasures = new javax.swing.JButton();
        buttonHideAllErrorsExceptAvg = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        buttonRunExportErrorMeasures = new javax.swing.JButton();
        panelResidualsAll = new ResidualsSubPanel();
        panelForecastValsAll = new ForecastValuesSubPanel();
        panelDiagramsNNs = new javax.swing.JPanel();
        panelDiagramsNNsInside = new javax.swing.JPanel();
        buttonExportDiagramsNN = new javax.swing.JButton();
        tabbedPaneDiagramsNNs = new javax.swing.JTabbedPane();
        panelPredictionIntervalsAll = new javax.swing.JPanel();
        buttonExportPredictionIntervals = new javax.swing.JButton();
        panelPredictionIntervals = new javax.swing.JPanel();
        scrollPanePredictionIntervals = new javax.swing.JScrollPane();
        panelAnalysisBatch = new AnalysisBatchSubPanel();
        panelCombinationWeightsAll = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        panelCombinationWeights = new javax.swing.JPanel();
        panelModelDescriptionsAll = new ModelDescriptionsSubPanel();
        panelBayesianAll = new BayesianSubPanel();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileLoad = new javax.swing.JMenuItem();
        menuFileExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        buttonGroup_runFakeIntCRLBUB.add(radioButtonRunFakeIntLowerUpper);
        buttonGroup_runFakeIntCRLBUB.add(radioButtonRunFakeIntCenterRadius);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelEverything.setPreferredSize(new java.awt.Dimension(1361, 687));

        panelCTS.setPreferredSize(new java.awt.Dimension(1356, 659));
        panelEverything.addTab("CTS", panelCTS);

        buttonLogTransformSeries.setText("Log-transform selected");
        buttonLogTransformSeries.setEnabled(false);
        buttonLogTransformSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLogTransformSeriesActionPerformed(evt);
            }
        });

        buttonDiffSeries.setText("Difference selected");
        buttonDiffSeries.setEnabled(false);
        buttonDiffSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDiffSeriesActionPerformed(evt);
            }
        });

        listColnamesTransform.setModel(new DefaultListModel());
        jScrollPane7.setViewportView(listColnamesTransform);

        buttonRemoveTrend.setText("Remove trend");
        buttonRemoveTrend.setEnabled(false);
        buttonRemoveTrend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveTrendActionPerformed(evt);
            }
        });

        buttonAggregateToITS.setText("Aggregate to ITS");
        buttonAggregateToITS.setEnabled(false);
        buttonAggregateToITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAggregateToITSActionPerformed(evt);
            }
        });

        jLabel24.setText("every");

        textFieldAggregateToITSevery.setText("24");

        jLabel25.setText("observations");

        buttonConvertITSLBUBCR1.setText("Convert LB/UB <-> C/R");
        buttonConvertITSLBUBCR1.setEnabled(false);
        buttonConvertITSLBUBCR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConvertITSLBUBCRActionPerformed(evt);
            }
        });

        buttonNormalize.setText("Normalize");
        buttonNormalize.setEnabled(false);
        buttonNormalize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNormalizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTransformLayout = new javax.swing.GroupLayout(panelTransform);
        panelTransform.setLayout(panelTransformLayout);
        panelTransformLayout.setHorizontalGroup(
            panelTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransformLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonLogTransformSeries)
                    .addComponent(buttonDiffSeries)
                    .addComponent(buttonRemoveTrend)
                    .addGroup(panelTransformLayout.createSequentialGroup()
                        .addComponent(buttonAggregateToITS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldAggregateToITSevery, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25))
                    .addComponent(buttonNormalize))
                .addContainerGap(827, Short.MAX_VALUE))
        );
        panelTransformLayout.setVerticalGroup(
            panelTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransformLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTransformLayout.createSequentialGroup()
                        .addComponent(buttonDiffSeries)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonLogTransformSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonNormalize)
                        .addGap(18, 18, 18)
                        .addComponent(buttonRemoveTrend)
                        .addGap(18, 18, 18)
                        .addGroup(panelTransformLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAggregateToITS)
                            .addComponent(jLabel24)
                            .addComponent(textFieldAggregateToITSevery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25)))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(390, Short.MAX_VALUE))
        );

        panelEverything.addTab("CTS transformation", panelTransform);

        panelIntTS.setName(""); // NOI18N

        buttonPlotAddITS.setText("Specify new ITS");
        buttonPlotAddITS.setEnabled(false);
        buttonPlotAddITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotAddITSActionPerformed(evt);
            }
        });

        buttonPlotRemoveITS.setText("Remove selected ITS");
        buttonPlotRemoveITS.setEnabled(false);
        buttonPlotRemoveITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRemoveITSActionPerformed(evt);
            }
        });

        buttonPlotSelectedITS.setText("Plot all selected ITS");
        buttonPlotSelectedITS.setEnabled(false);
        buttonPlotSelectedITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotSelectedITSActionPerformed(evt);
            }
        });

        jScrollPane4.setPreferredSize(new java.awt.Dimension(247, 130));

        listPlotITSspecs.setModel(new DefaultListModel());
        jScrollPane4.setViewportView(listPlotITSspecs);

        buttonPlotAllITSScatterplot.setText("Scatterplots all in one");
        buttonPlotAllITSScatterplot.setEnabled(false);
        buttonPlotAllITSScatterplot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotAllITSScatterplotActionPerformed(evt);
            }
        });

        buttonPlotAllITSScatterplotMatrix.setText("Scatterplot matrix");
        buttonPlotAllITSScatterplotMatrix.setEnabled(false);
        buttonPlotAllITSScatterplotMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotAllITSScatterplotMatrixActionPerformed(evt);
            }
        });

        jLabel18.setText("Note: for now ignores ITS specified as [LB, UB]");

        jSeparator14.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonConvertITSLBUBCR.setText("Convert LB/UB <-> C/R");
        buttonConvertITSLBUBCR.setEnabled(false);
        buttonConvertITSLBUBCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConvertITSLBUBCRActionPerformed(evt);
            }
        });

        buttonITSclearSelection.setText("(Clear selection)");
        buttonITSclearSelection.setEnabled(false);
        buttonITSclearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonITSclearSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelIntTSLayout = new javax.swing.GroupLayout(panelIntTS);
        panelIntTS.setLayout(panelIntTSLayout);
        panelIntTSLayout.setHorizontalGroup(
            panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIntTSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelIntTSLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPlotSelectedITS)
                            .addComponent(buttonPlotRemoveITS)
                            .addComponent(buttonPlotAddITS)
                            .addComponent(buttonITSclearSelection)))
                    .addComponent(buttonPlotAllITSScatterplot)
                    .addGroup(panelIntTSLayout.createSequentialGroup()
                        .addComponent(buttonPlotAllITSScatterplotMatrix)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator14, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonConvertITSLBUBCR)
                .addContainerGap(657, Short.MAX_VALUE))
        );
        panelIntTSLayout.setVerticalGroup(
            panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIntTSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator14)
                    .addGroup(panelIntTSLayout.createSequentialGroup()
                        .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonConvertITSLBUBCR)
                            .addGroup(panelIntTSLayout.createSequentialGroup()
                                .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelIntTSLayout.createSequentialGroup()
                                        .addComponent(buttonPlotAddITS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonPlotRemoveITS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonPlotSelectedITS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonITSclearSelection))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPlotAllITSScatterplot)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelIntTSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(buttonPlotAllITSScatterplotMatrix)
                                    .addComponent(jLabel18))))
                        .addGap(0, 327, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelEverything.addTab("ITS", panelIntTS);
        panelIntTS.getAccessibleContext().setAccessibleName("");

        panelEverything.addTab("Plot", panelPlotImage);
        panelEverything.addTab("Tests", panelTestsOutside);

        jTableData.setModel(DataTableModel.getInstance());
        scrollPaneData.setViewportView(jTableData);

        javax.swing.GroupLayout panelDataLayout = new javax.swing.GroupLayout(panelData);
        panelData.setLayout(panelDataLayout);
        panelDataLayout.setHorizontalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 1356, Short.MAX_VALUE)
        );
        panelDataLayout.setVerticalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        panelEverything.addTab("Data", panelData);

        panelAnalysisSettings.setPreferredSize(new java.awt.Dimension(1361, 615));

        paneSettingsMethods.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        paneSettingsMethods.setPreferredSize(new java.awt.Dimension(1361, 615));

        jLabelRPkg.setText("R package:");

        comboBoxRPackage.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.NNET, Model.NNETAR, Model.NEURALNET }));
        comboBoxRPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRPackageActionPerformed(evt);
            }
        });

        panelSettingsMLPPackage.setLayout(new java.awt.CardLayout());

        scrollPane_panelSettingsMLPPackage_nnet.setViewportView(panelSettingsMLPPackage_nnet);

        panelSettingsMLPPackage.add(scrollPane_panelSettingsMLPPackage_nnet, "panelSettingsMLPPackage_nnet");
        panelSettingsMLPPackage.add(panelSettingsMLPPackage_nnetar, "panelSettingsMLPPackage_nnetar");

        jLabel6.setText("(TODO)");

        javax.swing.GroupLayout panelSettingsMLPPackage_neuralnetLayout = new javax.swing.GroupLayout(panelSettingsMLPPackage_neuralnet);
        panelSettingsMLPPackage_neuralnet.setLayout(panelSettingsMLPPackage_neuralnetLayout);
        panelSettingsMLPPackage_neuralnetLayout.setHorizontalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6)
        );
        panelSettingsMLPPackage_neuralnetLayout.setVerticalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6)
        );

        panelSettingsMLPPackage.add(panelSettingsMLPPackage_neuralnet, "panelSettingsMLPPackage_neuralnet");

        buttonSettingsAddToBatch_MLP.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_MLP.setEnabled(false);
        buttonSettingsAddToBatch_MLP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_MLPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsMLPLayout = new javax.swing.GroupLayout(paneSettingsMethodsMLP);
        paneSettingsMethodsMLP.setLayout(paneSettingsMethodsMLPLayout);
        paneSettingsMethodsMLPLayout.setHorizontalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRPkg))
                        .addGap(18, 18, 18)
                        .addComponent(panelMLPPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_MLP)
                        .addGap(0, 1108, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsMLPLayout.setVerticalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSettingsAddToBatch_MLP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addComponent(jLabelRPkg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelMLPPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("MLP", paneSettingsMethodsMLP);

        jLabel47.setText("Imitates iMLP by constructing an interval out of two separate forecasts for Center and Radius.");

        jLabel48.setText("Distance to use for computing the error measures:");

        panelSettingsMLPintPackage.setLayout(new java.awt.CardLayout());

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel100.setText("Center:");

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel101.setText("Radius:");

        scrollPane_panelSettingsMLPintPackage_nnet_center.setViewportView(panelSettingsMLPintPackage_nnet_center);

        scrollPane_panelSettingsMLPintPackage_nnet_radius.setViewportView(panelSettingsMLPintPackage_nnet_radius);

        javax.swing.GroupLayout panelSettingsMLPintPackage_nnetLayout = new javax.swing.GroupLayout(panelSettingsMLPintPackage_nnet);
        panelSettingsMLPintPackage_nnet.setLayout(panelSettingsMLPintPackage_nnetLayout);
        panelSettingsMLPintPackage_nnetLayout.setHorizontalGroup(
            panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel100)
                    .addComponent(scrollPane_panelSettingsMLPintPackage_nnet_center, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addComponent(jLabel101)
                        .addGap(547, 602, Short.MAX_VALUE))
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addComponent(scrollPane_panelSettingsMLPintPackage_nnet_radius)
                        .addContainerGap())))
        );
        panelSettingsMLPintPackage_nnetLayout.setVerticalGroup(
            panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel101)
                            .addComponent(jLabel100))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane_panelSettingsMLPintPackage_nnet_center, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                            .addComponent(scrollPane_panelSettingsMLPintPackage_nnet_radius))))
                .addContainerGap())
        );

        panelSettingsMLPintPackage.add(panelSettingsMLPintPackage_nnet, "panelSettingsMLPintPackage_nnet");

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel87.setText("Center:");

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel88.setText("Radius:");

        javax.swing.GroupLayout panelSettingsMLPintPackage_nnetarLayout = new javax.swing.GroupLayout(panelSettingsMLPintPackage_nnetar);
        panelSettingsMLPintPackage_nnetar.setLayout(panelSettingsMLPintPackage_nnetarLayout);
        panelSettingsMLPintPackage_nnetarLayout.setHorizontalGroup(
            panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel87)
                    .addComponent(panelSettingsMLPintPackage_nnetar_center, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                        .addComponent(jLabel88)
                        .addGap(0, 617, Short.MAX_VALUE))
                    .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                        .addComponent(panelSettingsMLPintPackage_nnetar_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelSettingsMLPintPackage_nnetarLayout.setVerticalGroup(
            panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel87)
                    .addComponent(jLabel88))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsMLPintPackage_nnetar_center, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addComponent(panelSettingsMLPintPackage_nnetar_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelSettingsMLPintPackage.add(panelSettingsMLPintPackage_nnetar, "panelSettingsMLPintPackage_nnetar");

        jLabelRPkg1.setText("R package:");

        comboBoxRPackageMLPint.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.NNET, Model.NNETAR }));
        comboBoxRPackageMLPint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRPackageMLPintActionPerformed(evt);
            }
        });

        buttonSettingsAddToBatch_MLPint.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_MLPint.setEnabled(false);
        buttonSettingsAddToBatch_MLPint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_MLPintActionPerformed(evt);
            }
        });

        jLabel12.setText("Number of networks to train:");

        textFieldNumNetsToTrainMLPint.setText("1");

        javax.swing.GroupLayout paneSettingsMethodsMLPintLayout = new javax.swing.GroupLayout(paneSettingsMethodsMLPint);
        paneSettingsMethodsMLPint.setLayout(paneSettingsMethodsMLPintLayout);
        paneSettingsMethodsMLPintLayout.setHorizontalGroup(
            paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSettingsAddToBatch_MLPint)
                            .addComponent(jLabel47))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsMLPintPackage, javax.swing.GroupLayout.DEFAULT_SIZE, 1245, Short.MAX_VALUE)
                            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(comboBoxRPackageMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(panelMLPintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel48)
                                    .addComponent(jLabelRPkg1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                .addComponent(panelMLPintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFieldNumNetsToTrainMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelBestModelCriterionMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelCRCombinationsStrategyMLPint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 1265, Short.MAX_VALUE))
        );
        paneSettingsMethodsMLPintLayout.setVerticalGroup(
            paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSettingsAddToBatch_MLPint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addGap(18, 18, 18)
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addComponent(jLabelRPkg1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxRPackageMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelMLPintPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettingsMLPintPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelCRCombinationsStrategyMLPint, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(panelBestModelCriterionMLPint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelMLPintSettingsDistance, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(textFieldNumNetsToTrainMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 655, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("MLP(i)", paneSettingsMethodsMLPint);

        panelSettingsIntervalMLPMode.setLayout(new java.awt.CardLayout());
        panelSettingsIntervalMLPMode.add(panelSettingsIntervalMLPModeCcode, "panelSettingsIntervalMLPModeCcode");

        jLabel32.setText("neuralnet - to be finished");

        javax.swing.GroupLayout panelSettingsIntervalMLPModeNeuralnetLayout = new javax.swing.GroupLayout(panelSettingsIntervalMLPModeNeuralnet);
        panelSettingsIntervalMLPModeNeuralnet.setLayout(panelSettingsIntervalMLPModeNeuralnetLayout);
        panelSettingsIntervalMLPModeNeuralnetLayout.setHorizontalGroup(
            panelSettingsIntervalMLPModeNeuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel32)
        );
        panelSettingsIntervalMLPModeNeuralnetLayout.setVerticalGroup(
            panelSettingsIntervalMLPModeNeuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel32)
        );

        panelSettingsIntervalMLPMode.add(panelSettingsIntervalMLPModeNeuralnet, "panelSettingsIntervalMLPModeNeuralnet");

        jLabel31.setText("(Mode)");

        comboBoxIntervalMLPMode.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.INTERVAL_MLP_C_CODE, Model.NEURALNET }));
        comboBoxIntervalMLPMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxIntervalMLPModeActionPerformed(evt);
            }
        });

        buttonSettingsAddToBatch_intMLP.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_intMLP.setEnabled(false);
        buttonSettingsAddToBatch_intMLP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_intMLPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsIntervalMLPLayout = new javax.swing.GroupLayout(paneSettingsMethodsIntervalMLP);
        paneSettingsMethodsIntervalMLP.setLayout(paneSettingsMethodsIntervalMLPLayout);
        paneSettingsMethodsIntervalMLPLayout.setHorizontalGroup(
            paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(panelIntMLPPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelSettingsIntervalMLPMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_intMLP)
                        .addGap(0, 1108, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsIntervalMLPLayout.setVerticalGroup(
            paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSettingsAddToBatch_intMLP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelIntMLPPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(comboBoxIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelSettingsIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("iMLP", paneSettingsMethodsIntervalMLP);

        buttonSettingsAddToBatch_RBF.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_RBF.setEnabled(false);
        buttonSettingsAddToBatch_RBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_RBFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsRBFLayout = new javax.swing.GroupLayout(paneSettingsMethodsRBF);
        paneSettingsMethodsRBF.setLayout(paneSettingsMethodsRBFLayout);
        paneSettingsMethodsRBFLayout.setHorizontalGroup(
            paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelRBFPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_RBF)
                        .addGap(0, 1108, Short.MAX_VALUE))
                    .addComponent(panelSettingsRBFMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneSettingsMethodsRBFLayout.setVerticalGroup(
            paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSettingsAddToBatch_RBF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRBFPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelSettingsRBFMain, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("RBF", paneSettingsMethodsRBF);

        jLabel143.setText("Imitates iRBF by constructing an interval out of two separate forecasts for Center and Radius.");

        jLabel150.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel150.setText("Center:");

        jLabel151.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel151.setText("Radius:");

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel156.setForeground(new java.awt.Color(255, 0, 0));
        jLabel156.setText("(Only center and radius.)");

        jLabel157.setText("Distance to use for computing the error measures:");

        jLabel138.setText("Num of networks to train:");

        textFieldNumNetworksToTrainRBFint.setText("1");

        buttonSettingsAddToBatch_RBFint.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_RBFint.setEnabled(false);
        buttonSettingsAddToBatch_RBFint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_RBFintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsRBFintLayout = new javax.swing.GroupLayout(paneSettingsMethodsRBFint);
        paneSettingsMethodsRBFint.setLayout(paneSettingsMethodsRBFintLayout);
        paneSettingsMethodsRBFintLayout.setHorizontalGroup(
            paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addComponent(panelCRCombinationStrategyRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel157)
                            .addComponent(panelRBFintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel150)
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                        .addComponent(jLabel138)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldNumNetworksToTrainRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(panelBestModelCriterionRBFint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(panelSettingsRBFint_center, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(jLabel151)
                                .addGap(0, 675, Short.MAX_VALUE))
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(panelSettingsRBFint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(jLabel143)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel156)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_RBFint)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelRBFintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        paneSettingsMethodsRBFintLayout.setVerticalGroup(
            paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel143)
                    .addComponent(jLabel156))
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(panelRBFintPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSettingsAddToBatch_RBFint)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addComponent(jLabel151)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSettingsRBFint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel150)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator5)
                            .addComponent(panelSettingsRBFint_center, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel157)
                .addGap(4, 4, 4)
                .addComponent(panelRBFintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel138)
                        .addComponent(textFieldNumNetworksToTrainRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelBestModelCriterionRBFint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCRCombinationStrategyRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        paneSettingsMethods.addTab("RBF(i)", paneSettingsMethodsRBFint);

        buttonSettingsAddToBatch_ARIMA.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_ARIMA.setEnabled(false);
        buttonSettingsAddToBatch_ARIMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_ARIMAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsARIMALayout = new javax.swing.GroupLayout(paneSettingsMethodsARIMA);
        paneSettingsMethodsARIMA.setLayout(paneSettingsMethodsARIMALayout);
        paneSettingsMethodsARIMALayout.setHorizontalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsARIMAMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_ARIMA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelARIMAPercTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 1098, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsARIMALayout.setVerticalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelARIMAPercTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_ARIMA))
                .addGap(18, 18, 18)
                .addComponent(panelSettingsARIMAMain, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("ARIMA", paneSettingsMethodsARIMA);

        jLabel64.setText("Select method:");

        panelSettingsKNNoptions.setLayout(new java.awt.CardLayout());
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_FNN, "panelSettingsKNNoptions_FNN");
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_custom, "panelSettingsKNNoptions_custom");
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_kknn, "panelSettingsKNNoptions_kknn");
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_myown, "card5");

        comboBoxKNNoptions.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.KNN_FNN, Model.KNN_KKNN/*, Model.KNN_CUSTOM*/, Model.KNN_MYOWN }));
        comboBoxKNNoptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxKNNoptionsActionPerformed(evt);
            }
        });

        buttonSettingsAddToBatch_KNN.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_KNN.setEnabled(false);
        buttonSettingsAddToBatch_KNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_KNNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsKNNLayout = new javax.swing.GroupLayout(paneSettingsMethodsKNN);
        paneSettingsMethodsKNN.setLayout(paneSettingsMethodsKNNLayout);
        paneSettingsMethodsKNNLayout.setHorizontalGroup(
            paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsKNNoptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                        .addComponent(jLabel64)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxKNNoptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1135, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneSettingsMethodsKNNLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_KNN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelKNNPercTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsKNNLayout.setVerticalGroup(
            paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelKNNPercTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_KNN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(comboBoxKNNoptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(panelSettingsKNNoptions, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("kNN", paneSettingsMethodsKNN);

        jLabel5.setText("Uses VAR with only two variables - center and radius - and produces interval results.");

        panelVARintInside.setLayout(new java.awt.BorderLayout());
        panelVARintInside.add(panelVARintInsideBecause, java.awt.BorderLayout.CENTER);

        buttonSettingsAddToBatch_VARint.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_VARint.setEnabled(false);
        buttonSettingsAddToBatch_VARint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_VARintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsVARintLayout = new javax.swing.GroupLayout(panelSettingsMethodsVARint);
        panelSettingsMethodsVARint.setLayout(panelSettingsMethodsVARintLayout);
        panelSettingsMethodsVARintLayout.setHorizontalGroup(
            panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsVARintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelVARintInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsVARintLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(panelSettingsMethodsVARintLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_VARint)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelVARintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addComponent(panelVARintDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelSettingsMethodsVARintLayout.setVerticalGroup(
            panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsVARintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMethodsVARintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelVARintDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelVARintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(buttonSettingsAddToBatch_VARint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelVARintInside, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("VAR(i)", panelSettingsMethodsVARint);

        buttonSettingsAddToBatch_SES.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_SES.setEnabled(false);
        buttonSettingsAddToBatch_SES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_SESActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsSESLayout = new javax.swing.GroupLayout(panelSettingsMethodsSES);
        panelSettingsMethodsSES.setLayout(panelSettingsMethodsSESLayout);
        panelSettingsMethodsSESLayout.setHorizontalGroup(
            panelSettingsMethodsSESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsSESLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsSESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSESmain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsSESLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_SES)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSESpercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSettingsMethodsSESLayout.setVerticalGroup(
            panelSettingsMethodsSESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsSESLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsSESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSESpercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_SES))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelSESmain, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("SES", panelSettingsMethodsSES);

        jLabel51.setText("Constructs an interval out of two separate forecasts for Center and Radius.");

        jLabel154.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel154.setText("Center:");

        jLabel155.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel155.setText("Radius:");

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonSettingsAddToBatch_SESint.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_SESint.setEnabled(false);
        buttonSettingsAddToBatch_SESint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_SESintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsSESintLayout = new javax.swing.GroupLayout(panelSettingsMethodsSESint);
        panelSettingsMethodsSESint.setLayout(panelSettingsMethodsSESintLayout);
        panelSettingsMethodsSESintLayout.setHorizontalGroup(
            panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsMethodsSESintLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                                .addComponent(jLabel154)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(panelSESint_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel155)
                            .addComponent(panelSESint_radius, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panelCRCombinationStrategySESint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                        .addComponent(jLabel51)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_SESint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelSESintPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelSESintDistance, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSettingsMethodsSESintLayout.setVerticalGroup(
            panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelSESintDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSESintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(buttonSettingsAddToBatch_SESint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCRCombinationStrategySESint, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelSettingsMethodsSESintLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel154)
                            .addComponent(jLabel155))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelSettingsMethodsSESintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelSESint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                            .addComponent(panelSESint_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator7))
                .addContainerGap())
        );

        paneSettingsMethods.addTab("SES(i)", panelSettingsMethodsSESint);

        buttonSettingsAddToBatch_MAvg.setText("Add to Analysis Batch");
        buttonSettingsAddToBatch_MAvg.setEnabled(false);
        buttonSettingsAddToBatch_MAvg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_MAvgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsMAvgLayout = new javax.swing.GroupLayout(panelSettingsMethodsMAvg);
        panelSettingsMethodsMAvg.setLayout(panelSettingsMethodsMAvgLayout);
        panelSettingsMethodsMAvgLayout.setHorizontalGroup(
            panelSettingsMethodsMAvgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsMAvgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsMAvgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMethodsMAvgLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_MAvg)
                        .addGap(0, 1108, Short.MAX_VALUE))
                    .addComponent(panelMAvgMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSettingsMethodsMAvgLayout.setVerticalGroup(
            panelSettingsMethodsMAvgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsMAvgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonSettingsAddToBatch_MAvg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMAvgMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("MA", panelSettingsMethodsMAvg);

        buttonSettingsAddToBatch_Holt.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_Holt.setEnabled(false);
        buttonSettingsAddToBatch_Holt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_HoltActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsHoltLayout = new javax.swing.GroupLayout(panelSettingsMethodsHolt);
        panelSettingsMethodsHolt.setLayout(panelSettingsMethodsHoltLayout);
        panelSettingsMethodsHoltLayout.setHorizontalGroup(
            panelSettingsMethodsHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoltInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsHoltLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_Holt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoltPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSettingsMethodsHoltLayout.setVerticalGroup(
            panelSettingsMethodsHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoltPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_Holt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelHoltInside, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Holt", panelSettingsMethodsHolt);

        jLabel50.setText("Constructs an interval out of two separate forecasts for Center and Radius.");

        jLabel152.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel152.setText("Center:");

        jLabel153.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel153.setText("Radius:");

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonSettingsAddToBatch_Holtint.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_Holtint.setEnabled(false);
        buttonSettingsAddToBatch_Holtint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_HoltintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsHoltIntLayout = new javax.swing.GroupLayout(panelSettingsMethodsHoltInt);
        panelSettingsMethodsHoltInt.setLayout(panelSettingsMethodsHoltIntLayout);
        panelSettingsMethodsHoltIntLayout.setHorizontalGroup(
            panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCRCombinationsStrategyHoltInt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                                .addComponent(jLabel152)
                                .addGap(0, 555, Short.MAX_VALUE))
                            .addComponent(panelHoltInt_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel153)
                            .addComponent(panelHoltInt_radius, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel50)
                            .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_Holtint)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelHoltIntPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addComponent(panelHoltIntDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelSettingsMethodsHoltIntLayout.setVerticalGroup(
            panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelHoltIntDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelHoltIntPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(buttonSettingsAddToBatch_Holtint))
                .addGap(9, 9, 9)
                .addComponent(panelCRCombinationsStrategyHoltInt, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsHoltIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                        .addComponent(jLabel152)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelHoltInt_center, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSettingsMethodsHoltIntLayout.createSequentialGroup()
                        .addComponent(jLabel153)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelHoltInt_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Holt(i)", panelSettingsMethodsHoltInt);

        jLabel10.setText("Holt's method for interval data as in Maia and De Carvalho (2011).");

        buttonSettingsAddToBatch_IntervalHolt.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_IntervalHolt.setEnabled(false);
        buttonSettingsAddToBatch_IntervalHolt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_IntervalHoltActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsIntervalHoltLayout = new javax.swing.GroupLayout(panelSettingsMethodsIntervalHolt);
        panelSettingsMethodsIntervalHolt.setLayout(panelSettingsMethodsIntervalHoltLayout);
        panelSettingsMethodsIntervalHoltLayout.setHorizontalGroup(
            panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsIntervalHoltLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelIntervalHoltMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsIntervalHoltLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsMethodsIntervalHoltLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_IntervalHolt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelIntervalHoltPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE))
                            .addGroup(panelSettingsMethodsIntervalHoltLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addComponent(panelIntervalHoltDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelSettingsMethodsIntervalHoltLayout.setVerticalGroup(
            panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsIntervalHoltLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMethodsIntervalHoltLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelIntervalHoltDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelIntervalHoltPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(buttonSettingsAddToBatch_IntervalHolt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelIntervalHoltMain, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("iHolt", panelSettingsMethodsIntervalHolt);

        panelSettingsMethodsHoltWinters.setPreferredSize(new java.awt.Dimension(20, 610));

        buttonSettingsAddToBatch_HoltWinters.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_HoltWinters.setEnabled(false);
        buttonSettingsAddToBatch_HoltWinters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_HoltWintersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsHoltWintersLayout = new javax.swing.GroupLayout(panelSettingsMethodsHoltWinters);
        panelSettingsMethodsHoltWinters.setLayout(panelSettingsMethodsHoltWintersLayout);
        panelSettingsMethodsHoltWintersLayout.setHorizontalGroup(
            panelSettingsMethodsHoltWintersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltWintersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltWintersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoltWintersInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSettingsMethodsHoltWintersLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_HoltWinters)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoltWintersPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSettingsMethodsHoltWintersLayout.setVerticalGroup(
            panelSettingsMethodsHoltWintersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltWintersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltWintersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelHoltWintersPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_HoltWinters))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelHoltWintersInside, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Holt-Winters", panelSettingsMethodsHoltWinters);

        jLabel52.setText("Constructs an interval out of two separate forecasts for Center and Radius.");

        jLabel158.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel158.setText("Center:");

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel159.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel159.setText("Radius:");

        buttonSettingsAddToBatch_HoltWintersInt.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_HoltWintersInt.setEnabled(false);
        buttonSettingsAddToBatch_HoltWintersInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_HoltWintersIntActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSettingsMethodsHoltWintersIntLayout = new javax.swing.GroupLayout(panelSettingsMethodsHoltWintersInt);
        panelSettingsMethodsHoltWintersInt.setLayout(panelSettingsMethodsHoltWintersIntLayout);
        panelSettingsMethodsHoltWintersIntLayout.setHorizontalGroup(
            panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCRCombinationStrategyHoltWintersInt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                                .addComponent(jLabel158)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(panelHoltWintersInt_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                                .addComponent(jLabel159)
                                .addGap(594, 594, 594))
                            .addComponent(panelHoltWintersInt_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                        .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel52)
                            .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_HoltWintersInt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelHoltWintersIntPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoltWintersIntDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelSettingsMethodsHoltWintersIntLayout.setVerticalGroup(
            panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelHoltWintersIntDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelHoltWintersIntPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(buttonSettingsAddToBatch_HoltWintersInt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCRCombinationStrategyHoltWintersInt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(panelSettingsMethodsHoltWintersIntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                        .addComponent(jLabel158)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoltWintersInt_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelSettingsMethodsHoltWintersIntLayout.createSequentialGroup()
                        .addComponent(jLabel159)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoltWintersInt_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Holt-Winters(i)", panelSettingsMethodsHoltWintersInt);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Center:");

        comboBoxSettingsHybridMethod_center.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.NNET, Model.NNETAR, Model.RBF, Model.ARIMA, Model.KNN_FNN, Model.KNN_KKNN, Model.SES, Model.HOLT, Model.BNN }));
        comboBoxSettingsHybridMethod_center.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSettingsHybridMethod_centerActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Radius:");

        comboBoxSettingsHybridMethod_radius.setModel(new javax.swing.DefaultComboBoxModel(new Model[] { Model.NNET, Model.NNETAR, Model.RBF, Model.ARIMA, Model.KNN_FNN, Model.KNN_KKNN, Model.SES, Model.HOLT, Model.BNN }));
        comboBoxSettingsHybridMethod_radius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSettingsHybridMethod_radiusActionPerformed(evt);
            }
        });

        panelSettingsHybrid_centerMain.setLayout(new java.awt.CardLayout());

        scrollPane_panelSettingsHybrid_centerMain_MLPnnet.setViewportView(panelSettingsHybrid_centerMain_MLPnnet);

        panelSettingsHybrid_centerMain.add(scrollPane_panelSettingsHybrid_centerMain_MLPnnet, "panelSettingsHybrid_centerMain_MLPnnet");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_MLPnnetar, "panelSettingsHybrid_centerMain_MLPnnetar");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_RBF, "panelSettingsHybrid_centerMain_RBF");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_ARIMA, "panelSettingsHybrid_centerMain_ARIMA");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_KNNFNN, "panelSettingsHybrid_centerMain_KNNFNN");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_KNNkknn, "panelSettingsHybrid_centerMain_KNNkknn");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_SES, "panelSettingsHybrid_centerMain_SES");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_Holt, "panelSettingsHybrid_centerMain_Holt");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_BNN, "panelSettingsHybrid_centerMain_BNN");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        panelSettingsHybrid_radiusMain.setLayout(new java.awt.CardLayout());

        scrollPane_panelSettingsHybrid_radiusMain_MLPnnet.setViewportView(panelSettingsHybrid_radiusMain_MLPnnet);

        panelSettingsHybrid_radiusMain.add(scrollPane_panelSettingsHybrid_radiusMain_MLPnnet, "panelSettingsHybrid_radiusMain_MLPnnet");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_MLPnnetar, "panelSettingsHybrid_radiusMain_MLPnnetar");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_RBF, "panelSettingsHybrid_radiusMain_RBF");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_ARIMA, "panelSettingsHybrid_radiusMain_ARIMA");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_KNNFNN, "panelSettingsHybrid_radiusMain_KNNFNN");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_KNNkknn, "panelSettingsHybrid_radiusMain_KNNkknn");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_SES, "panelSettingsHybrid_radiusMain_SES");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_Holt, "panelSettingsHybrid_radiusMain_Holt");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_BNN, "panelSettingsHybrid_radiusMain_BNN");

        buttonSettingsAddToBatch_Hybrid.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_Hybrid.setEnabled(false);
        buttonSettingsAddToBatch_Hybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_HybridActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsHybridLayout = new javax.swing.GroupLayout(paneSettingsMethodsHybrid);
        paneSettingsMethodsHybrid.setLayout(paneSettingsMethodsHybridLayout);
        paneSettingsMethodsHybridLayout.setHorizontalGroup(
            paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxSettingsHybridMethod_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                                .addComponent(buttonSettingsAddToBatch_Hybrid)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelSettingsHybridPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSettingsHybridDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                        .addComponent(panelSettingsHybrid_centerMain, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxSettingsHybridMethod_radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 572, Short.MAX_VALUE))
                            .addComponent(panelSettingsHybrid_radiusMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        paneSettingsMethodsHybridLayout.setVerticalGroup(
            paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelSettingsHybridDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelSettingsHybridPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                    .addComponent(buttonSettingsAddToBatch_Hybrid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxSettingsHybridMethod_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxSettingsHybridMethod_radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelSettingsHybrid_radiusMain, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addComponent(panelSettingsHybrid_centerMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        paneSettingsMethods.addTab("[Hybrid]", paneSettingsMethodsHybrid);

        buttonSettingsAddToBatch_BNN.setText("Add to Analysis batch");
        buttonSettingsAddToBatch_BNN.setEnabled(false);
        buttonSettingsAddToBatch_BNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_BNNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsBNNLayout = new javax.swing.GroupLayout(paneSettingsMethodsBNN);
        paneSettingsMethodsBNN.setLayout(paneSettingsMethodsBNNLayout);
        paneSettingsMethodsBNNLayout.setHorizontalGroup(
            paneSettingsMethodsBNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsBNNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsBNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsBNNinside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsBNNLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_BNN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBNNPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsBNNLayout.setVerticalGroup(
            paneSettingsMethodsBNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsBNNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsBNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSettingsAddToBatch_BNN)
                    .addComponent(panelBNNPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettingsBNNinside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Bayesian NN", paneSettingsMethodsBNN);

        buttonSettingsAddToBatch_BNNint.setText("Add to Analysis Batch");
        buttonSettingsAddToBatch_BNNint.setEnabled(false);
        buttonSettingsAddToBatch_BNNint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSettingsAddToBatch_BNNintActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Center:");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel33.setText("Radius:");

        jLabel160.setText("Distance to use for computing the error measures:");

        jLabel139.setText("Num of networks to train:");

        textFieldNumNetworksToTrainBNNint.setText("1");

        jSeparator13.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout paneSettingsMethodsBNNintLayout = new javax.swing.GroupLayout(paneSettingsMethodsBNNint);
        paneSettingsMethodsBNNint.setLayout(paneSettingsMethodsBNNintLayout);
        paneSettingsMethodsBNNintLayout.setHorizontalGroup(
            paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCRCombinationStrategyBNNint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                        .addComponent(buttonSettingsAddToBatch_BNNint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBNNintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneSettingsMethodsBNNintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(panelSettingsBNNint_center, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator13, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(626, 626, 626))
                            .addComponent(panelSettingsBNNint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                        .addComponent(jLabel139)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldNumNetworksToTrainBNNint, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBestModelCriterionBNNint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel160)
                            .addComponent(panelBNNintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsBNNintLayout.setVerticalGroup(
            paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsBNNintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBNNintPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSettingsAddToBatch_BNNint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel33)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelSettingsBNNint_center, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(jSeparator13, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsBNNint_radius, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel160)
                .addGap(4, 4, 4)
                .addComponent(panelBNNintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsBNNintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel139)
                        .addComponent(textFieldNumNetworksToTrainBNNint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelBestModelCriterionBNNint, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCRCombinationStrategyBNNint, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Bayesian NN(i)", paneSettingsMethodsBNNint);

        javax.swing.GroupLayout panelAnalysisSettingsLayout = new javax.swing.GroupLayout(panelAnalysisSettings);
        panelAnalysisSettings.setLayout(panelAnalysisSettingsLayout);
        panelAnalysisSettingsLayout.setHorizontalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods, javax.swing.GroupLayout.DEFAULT_SIZE, 1356, Short.MAX_VALUE)
        );
        panelAnalysisSettingsLayout.setVerticalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panelEverything.addTab("Analysis settings", panelAnalysisSettings);

        panelRunOutside.setPreferredSize(new java.awt.Dimension(1361, 615));

        comboBoxColnamesRun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        checkBoxRunMLPnnetar.setSelected(true);
        checkBoxRunMLPnnetar.setText("MLP (nnetar)");

        checkBoxRunARIMA.setText("ARIMA");

        checkBoxRunMLPnnet.setText("MLP (nnet)");

        checkBoxRunMLPneuralnet.setText("MLP (neuralnet)");
        checkBoxRunMLPneuralnet.setEnabled(false);

        checkBoxRunIntervalMLPCcode.setText("iMLP (C code)");

        checkBoxRunIntervalMLPneuralnet.setText("iMLP (neuralnet)");
        checkBoxRunIntervalMLPneuralnet.setEnabled(false);

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel41.setText("CTS:");

        jLabel42.setText("Data:");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel43.setText("ITS:");

        jSeparator1.setForeground(new java.awt.Color(200, 200, 200));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonTrainAndTest.setText("Run");
        buttonTrainAndTest.setEnabled(false);
        buttonTrainAndTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrainAndTestActionPerformed(evt);
            }
        });

        checkBoxRunKNNfnn.setText("kNN (FNN)");

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel49.setText("(i)TS:");

        labelRunFakeIntLower.setText("Lower bound");
        labelRunFakeIntLower.setEnabled(false);

        comboBoxRunFakeIntCenter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        comboBoxRunFakeIntRadius.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        labelRunFakeIntUpper.setText("Upper bound");
        labelRunFakeIntUpper.setEnabled(false);

        checkBoxRunMLPintNnetar.setText("MLP(i) (nnetar)");

        checkBoxRunKNNinterval.setText("kNN");
        checkBoxRunKNNinterval.setEnabled(false);

        checkBoxRunKNNcustom.setText("kNN (custom)");
        checkBoxRunKNNcustom.setEnabled(false);

        jLabel71.setText("Number of forecasts to produce:");

        textFieldRunNumForecasts.setText("0");

        jLabel72.setForeground(new java.awt.Color(255, 102, 51));
        jLabel72.setText("TODO check errors for FNN");

        checkBoxRunKNNkknn.setText("kNN (kknn)");

        jLabel8.setForeground(new java.awt.Color(255, 102, 0));
        jLabel8.setText("Please note: not all models support forecasting at the moment.");

        jLabel9.setText("with data at positions");

        textFieldRunDataRangeFrom.setText("1");

        jLabel44.setText("to");

        labelRunFakeIntCenter.setText("Center");

        labelRunFakeIntRadius.setText("Radius");

        comboBoxRunFakeIntLower.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        comboBoxRunFakeIntLower.setEnabled(false);

        comboBoxRunFakeIntUpper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        comboBoxRunFakeIntUpper.setEnabled(false);

        radioButtonRunFakeIntLowerUpper.setEnabled(false);
        radioButtonRunFakeIntLowerUpper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRunFakeIntLowerUpperActionPerformed(evt);
            }
        });

        radioButtonRunFakeIntCenterRadius.setSelected(true);
        radioButtonRunFakeIntCenterRadius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRunFakeIntCenterRadiusActionPerformed(evt);
            }
        });

        checkBoxRunMLPintNnet.setText("MLP(i) (nnet)");

        buttonRunRestoreRangeAll.setText("<-restore all data");
        buttonRunRestoreRangeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunRestoreRangeAllActionPerformed(evt);
            }
        });

        checkBoxAvgSimpleCTSperM.setText("simple avg per method");
        checkBoxAvgSimpleCTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgSimpleCTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgSimpleIntTSperM.setText("simple avg per method");
        checkBoxAvgSimpleIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgSimpleIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgONLY.setText("do not show all plots, just the average");
        checkBoxAvgONLY.setEnabled(false);

        checkBoxAvgSimpleCTS.setText("simple avg");
        checkBoxAvgSimpleCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgSimpleCTSActionPerformed(evt);
            }
        });

        checkBoxAvgSimpleIntTS.setText("simple avg");
        checkBoxAvgSimpleIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgSimpleIntTSActionPerformed(evt);
            }
        });

        checkBoxRunIntervalRandomWalk.setText("random walk for ITS");

        jLabel133.setForeground(new java.awt.Color(255, 0, 0));
        jLabel133.setText("(takes values from (i)TS lower upper! and distance from MLP(i)nnet)");

        checkBoxRunVAR.setText("VAR");
        checkBoxRunVAR.setEnabled(false);

        checkBoxRunRBF.setText("RBF");

        checkBoxRunRBFint.setText("RBF(i)");

        checkBoxRunHybrid.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxRunHybrid.setText("Hybrid(i)");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("TODO allow to specify Lower and Upper bound (but still compute with Center and Radius)");

        checkBoxRunVARint.setText("VAR(i)");

        checkBoxRunHolt.setText("Holt");

        checkBoxRunHoltInt.setText("Holt(i)");

        checkBoxRunIntervalHolt.setText("iHolt");

        checkBoxRunIncludeRMSSE.setText("include RMSSE with length of seasonality:");
        checkBoxRunIncludeRMSSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunIncludeRMSSEActionPerformed(evt);
            }
        });

        textFieldRunRMSSESeasonality.setText("0");
        textFieldRunRMSSESeasonality.setEnabled(false);

        checkBoxRunSES.setText("SES");

        checkBoxRunSESint.setText("SES(i)");

        checkBoxRunHoltWinters.setForeground(new java.awt.Color(0, 204, 51));
        checkBoxRunHoltWinters.setText("Holt-Winters (under construction)");

        checkBoxRunHoltWintersInt.setText("Holt-Winters(i)");

        checkBoxRunRandomWalkCTS.setText("random walk for CTS");

        checkBoxAvgMDeCTSperM.setText("WIP MDE avg per method");
        checkBoxAvgMDeCTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMDeCTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgMDeCTS.setText("WIP MDE avg");
        checkBoxAvgMDeCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMDeCTSActionPerformed(evt);
            }
        });

        checkBoxAvgMDeIntTSperM.setText("WIP MDE avg per method");
        checkBoxAvgMDeIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMDeIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgMDeIntTS.setText("WIP MDE avg");
        checkBoxAvgMDeIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMDeIntTSActionPerformed(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel45.setText("Forecasts combination:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("CTS:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("ITS:");

        checkBoxAvgTheilsuCTSperM.setText("WIP TheilsU avg per method");
        checkBoxAvgTheilsuCTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgTheilsuCTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgTheilsuCTS.setText("WIP TheilsU avg");
        checkBoxAvgTheilsuCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgTheilsuCTSActionPerformed(evt);
            }
        });

        checkBoxAvgTheilsuIntTSperM.setText("WIP TheilsU avg per method");
        checkBoxAvgTheilsuIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgTheilsuIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgTheilsuIntTS.setText("WIP TheilsU avg");
        checkBoxAvgTheilsuIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgTheilsuIntTSActionPerformed(evt);
            }
        });

        checkBoxAvgCvgEffIntTSperM.setText("WDP cvg+eff per method");
        checkBoxAvgCvgEffIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgCvgEffIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgCvgEffIntTS.setText("WDP cvg+eff");
        checkBoxAvgCvgEffIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgCvgEffIntTSActionPerformed(evt);
            }
        });

        checkBoxAvgCenterLogRadiusIntTSperM.setText("avg center logradius per method");
        checkBoxAvgCenterLogRadiusIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgCenterLogRadiusIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgCenterLogRadiusIntTS.setText("avg center logradius");
        checkBoxAvgCenterLogRadiusIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgCenterLogRadiusIntTSActionPerformed(evt);
            }
        });

        checkBoxAvgMedianCTSperM.setText("median per method");
        checkBoxAvgMedianCTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMedianCTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgMedianCTS.setText("median");
        checkBoxAvgMedianCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMedianCTSActionPerformed(evt);
            }
        });

        checkBoxAvgMedianIntTSperM.setText("median per method");
        checkBoxAvgMedianIntTSperM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMedianIntTSperMActionPerformed(evt);
            }
        });

        checkBoxAvgMedianIntTS.setText("median");
        checkBoxAvgMedianIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgMedianIntTSActionPerformed(evt);
            }
        });

        checkBoxRunBNN.setText("Bayesian NN");

        checkBoxRunBNNInt.setText("BNN(i)");

        checkBoxRunKNNmyown.setText("kNN (my own)");
        checkBoxRunKNNmyown.setEnabled(false);

        checkBoxRunMAvg.setText("MA");

        checkBoxAvgEigenvalsPCAIntTS.setText("WDP eigenvals of PCA");
        checkBoxAvgEigenvalsPCAIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAvgEigenvalsPCAIntTSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRunOutsideLayout = new javax.swing.GroupLayout(panelRunOutside);
        panelRunOutside.setLayout(panelRunOutsideLayout);
        panelRunOutsideLayout.setHorizontalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(jLabel41)
                                        .addGap(42, 42, 42))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(jLabel42)
                                        .addGap(26, 26, 26)))
                                .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel49)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(radioButtonRunFakeIntLowerUpper))
                                    .addComponent(radioButtonRunFakeIntCenterRadius, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(labelRunFakeIntLower)
                                            .addComponent(labelRunFakeIntUpper))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboBoxRunFakeIntLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboBoxRunFakeIntUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addComponent(labelRunFakeIntRadius)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBoxRunFakeIntRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addComponent(labelRunFakeIntCenter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBoxRunFakeIntCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addComponent(jLabel43)
                            .addComponent(jLabel45)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(jLabel71)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldRunNumForecasts, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(jLabelTrainingInfo)
                                .addGap(10, 10, 10))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxRunHybrid)
                    .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxRunMLPnnetar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunMLPneuralnet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunMLPnnet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunRBF))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxRunRandomWalkCTS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunBNN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunMAvg)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(jLabel72))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxRunARIMA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunKNNfnn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunKNNcustom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunKNNkknn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunKNNmyown)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunVAR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunSES)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunHolt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxRunHoltWinters))))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(checkBoxRunIntervalMLPCcode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunIntervalMLPneuralnet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunKNNinterval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunIntervalHolt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunIntervalRandomWalk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel133))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGap(622, 622, 622)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxAvgTheilsuCTSperM)
                            .addComponent(checkBoxAvgMedianCTSperM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxAvgMedianCTS)
                            .addComponent(checkBoxAvgTheilsuCTS)))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxAvgSimpleCTSperM)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxAvgSimpleCTS)
                        .addGap(32, 32, 32)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxAvgMDeCTSperM)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(checkBoxAvgMDeCTS))))
                    .addComponent(checkBoxAvgONLY)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxAvgSimpleIntTSperM)
                                .addGap(18, 18, 18)
                                .addComponent(checkBoxAvgSimpleIntTS)
                                .addGap(32, 32, 32)
                                .addComponent(checkBoxAvgMDeIntTSperM)
                                .addGap(32, 32, 32)
                                .addComponent(checkBoxAvgMDeIntTS)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(211, 211, 211)
                                        .addComponent(checkBoxAvgMedianIntTS))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(checkBoxAvgTheilsuIntTSperM)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxAvgTheilsuIntTS))))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxAvgCvgEffIntTSperM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxAvgCvgEffIntTS)
                                .addGap(16, 16, 16)
                                .addComponent(checkBoxAvgCenterLogRadiusIntTSperM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxAvgCenterLogRadiusIntTS)
                                .addGap(18, 18, 18)
                                .addComponent(checkBoxAvgMedianIntTSperM))
                            .addComponent(checkBoxAvgEigenvalsPCAIntTS)))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(checkBoxRunMLPintNnetar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunMLPintNnet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunRBFint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunVARint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunSESint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunHoltInt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunHoltWintersInt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunBNNInt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(buttonTrainAndTest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldRunDataRangeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldRunDataRangeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRunRestoreRangeAll)
                        .addGap(81, 81, 81)
                        .addComponent(checkBoxRunIncludeRMSSE, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldRunRMSSESeasonality, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelRunOutsideLayout.setVerticalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(jLabelTrainingInfo)
                                .addGap(29, 29, 29))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textFieldRunNumForecasts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel71))
                                .addGap(1, 1, 1)
                                .addComponent(jLabel8))))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonTrainAndTest)
                                .addComponent(jLabel9)
                                .addComponent(textFieldRunDataRangeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel44)
                                .addComponent(textFieldRunDataRangeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonRunRestoreRangeAll))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkBoxRunIncludeRMSSE)
                                .addComponent(textFieldRunRMSSESeasonality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel42)
                                    .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel49)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labelRunFakeIntLower)
                                            .addComponent(comboBoxRunFakeIntLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labelRunFakeIntUpper)
                                            .addComponent(comboBoxRunFakeIntUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(radioButtonRunFakeIntLowerUpper)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labelRunFakeIntCenter)
                                            .addComponent(comboBoxRunFakeIntCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(labelRunFakeIntRadius)
                                            .addComponent(comboBoxRunFakeIntRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(radioButtonRunFakeIntCenterRadius)
                                        .addGap(20, 20, 20))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxRunMLPnnetar)
                                    .addComponent(checkBoxRunMLPneuralnet)
                                    .addComponent(checkBoxRunMLPnnet)
                                    .addComponent(checkBoxRunARIMA)
                                    .addComponent(checkBoxRunKNNfnn)
                                    .addComponent(checkBoxRunKNNcustom)
                                    .addComponent(checkBoxRunKNNkknn)
                                    .addComponent(checkBoxRunVAR)
                                    .addComponent(checkBoxRunRBF)
                                    .addComponent(checkBoxRunHolt)
                                    .addComponent(checkBoxRunSES)
                                    .addComponent(checkBoxRunHoltWinters)
                                    .addComponent(checkBoxRunKNNmyown))
                                .addGap(1, 1, 1)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel72)
                                    .addComponent(checkBoxRunRandomWalkCTS)
                                    .addComponent(checkBoxRunBNN)
                                    .addComponent(checkBoxRunMAvg))
                                .addGap(20, 20, 20)
                                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(checkBoxRunHybrid)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxRunMLPintNnetar)
                                    .addComponent(checkBoxRunMLPintNnet)
                                    .addComponent(checkBoxRunRBFint)
                                    .addComponent(jLabel3)
                                    .addComponent(checkBoxRunVARint)
                                    .addComponent(checkBoxRunHoltInt)
                                    .addComponent(checkBoxRunSESint)
                                    .addComponent(checkBoxRunHoltWintersInt)
                                    .addComponent(checkBoxRunBNNInt))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel43)
                            .addComponent(checkBoxRunKNNinterval)
                            .addComponent(checkBoxRunIntervalMLPneuralnet)
                            .addComponent(checkBoxRunIntervalMLPCcode)
                            .addComponent(checkBoxRunIntervalRandomWalk)
                            .addComponent(jLabel133)
                            .addComponent(checkBoxRunIntervalHolt))
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jSeparator12, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel15))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(checkBoxAvgMDeCTSperM)
                                                .addComponent(checkBoxAvgMDeCTS)
                                                .addComponent(checkBoxAvgTheilsuCTSperM)
                                                .addComponent(checkBoxAvgTheilsuCTS))
                                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(checkBoxAvgSimpleCTSperM)
                                                .addComponent(checkBoxAvgSimpleCTS))))))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jLabel45)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxAvgMedianCTSperM)
                            .addComponent(checkBoxAvgMedianCTS))
                        .addGap(18, 18, 18)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel16))
                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkBoxAvgSimpleIntTSperM)
                                .addComponent(checkBoxAvgSimpleIntTS))
                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkBoxAvgMDeIntTS)
                                .addComponent(checkBoxAvgTheilsuIntTSperM)
                                .addComponent(checkBoxAvgTheilsuIntTS))
                            .addComponent(checkBoxAvgMDeIntTSperM))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxAvgMedianIntTS)
                            .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkBoxAvgCvgEffIntTSperM)
                                .addComponent(checkBoxAvgCvgEffIntTS)
                                .addComponent(checkBoxAvgCenterLogRadiusIntTSperM)
                                .addComponent(checkBoxAvgCenterLogRadiusIntTS)
                                .addComponent(checkBoxAvgMedianIntTSperM)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxAvgEigenvalsPCAIntTS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxAvgONLY))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        panelEverything.addTab("Run", panelRunOutside);

        panelErrorMeasuresAll.setPreferredSize(new java.awt.Dimension(1361, 615));

        javax.swing.GroupLayout panelErrorMeasuresLayout = new javax.swing.GroupLayout(panelErrorMeasures);
        panelErrorMeasures.setLayout(panelErrorMeasuresLayout);
        panelErrorMeasuresLayout.setHorizontalGroup(
            panelErrorMeasuresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelErrorMeasuresLayout.setVerticalGroup(
            panelErrorMeasuresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 608, Short.MAX_VALUE)
        );

        buttonRunShowHiddenErrorMeasures.setText("Show hidden rows");
        buttonRunShowHiddenErrorMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunShowHiddenErrorMeasuresActionPerformed(evt);
            }
        });

        buttonHideAllErrorsExceptAvg.setText("Hide all rows except for avg");
        buttonHideAllErrorsExceptAvg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHideAllErrorsExceptAvgActionPerformed(evt);
            }
        });

        jLabel13.setText("(double-click on a row to hide it.)");

        buttonRunExportErrorMeasures.setText("Export these error measures");
        buttonRunExportErrorMeasures.setEnabled(false);
        buttonRunExportErrorMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunExportErrorMeasuresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelErrorMeasuresAllLayout = new javax.swing.GroupLayout(panelErrorMeasuresAll);
        panelErrorMeasuresAll.setLayout(panelErrorMeasuresAllLayout);
        panelErrorMeasuresAllLayout.setHorizontalGroup(
            panelErrorMeasuresAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelErrorMeasuresAllLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelErrorMeasuresAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelErrorMeasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelErrorMeasuresAllLayout.createSequentialGroup()
                        .addComponent(buttonRunShowHiddenErrorMeasures)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonHideAllErrorsExceptAvg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(buttonRunExportErrorMeasures)
                        .addGap(0, 694, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelErrorMeasuresAllLayout.setVerticalGroup(
            panelErrorMeasuresAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelErrorMeasuresAllLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelErrorMeasuresAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRunShowHiddenErrorMeasures)
                    .addComponent(buttonHideAllErrorsExceptAvg)
                    .addComponent(jLabel13)
                    .addComponent(buttonRunExportErrorMeasures))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelErrorMeasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Error measures", panelErrorMeasuresAll);
        panelEverything.addTab("Residuals", panelResidualsAll);

        panelForecastValsAll.setPreferredSize(new java.awt.Dimension(1361, 615));
        panelEverything.addTab("Forecast values", panelForecastValsAll);

        panelDiagramsNNs.setPreferredSize(new java.awt.Dimension(1361, 615));

        javax.swing.GroupLayout panelDiagramsNNsInsideLayout = new javax.swing.GroupLayout(panelDiagramsNNsInside);
        panelDiagramsNNsInside.setLayout(panelDiagramsNNsInsideLayout);
        panelDiagramsNNsInsideLayout.setHorizontalGroup(
            panelDiagramsNNsInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelDiagramsNNsInsideLayout.setVerticalGroup(
            panelDiagramsNNsInsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        buttonExportDiagramsNN.setText("Export these diagrams");
        buttonExportDiagramsNN.setEnabled(false);

        javax.swing.GroupLayout panelDiagramsNNsLayout = new javax.swing.GroupLayout(panelDiagramsNNs);
        panelDiagramsNNs.setLayout(panelDiagramsNNsLayout);
        panelDiagramsNNsLayout.setHorizontalGroup(
            panelDiagramsNNsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDiagramsNNsLayout.createSequentialGroup()
                .addComponent(buttonExportDiagramsNN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDiagramsNNsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPaneDiagramsNNs, javax.swing.GroupLayout.PREFERRED_SIZE, 1335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDiagramsNNsInside, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDiagramsNNsLayout.setVerticalGroup(
            panelDiagramsNNsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDiagramsNNsLayout.createSequentialGroup()
                .addComponent(buttonExportDiagramsNN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDiagramsNNsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDiagramsNNsInside, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tabbedPaneDiagramsNNs)))
        );

        panelEverything.addTab("Diagrams of NNs", panelDiagramsNNs);

        panelPredictionIntervalsAll.setPreferredSize(new java.awt.Dimension(1361, 615));

        buttonExportPredictionIntervals.setText("Export");
        buttonExportPredictionIntervals.setEnabled(false);

        javax.swing.GroupLayout panelPredictionIntervalsLayout = new javax.swing.GroupLayout(panelPredictionIntervals);
        panelPredictionIntervals.setLayout(panelPredictionIntervalsLayout);
        panelPredictionIntervalsLayout.setHorizontalGroup(
            panelPredictionIntervalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPanePredictionIntervals)
        );
        panelPredictionIntervalsLayout.setVerticalGroup(
            panelPredictionIntervalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPredictionIntervalsLayout.createSequentialGroup()
                .addComponent(scrollPanePredictionIntervals, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelPredictionIntervalsAllLayout = new javax.swing.GroupLayout(panelPredictionIntervalsAll);
        panelPredictionIntervalsAll.setLayout(panelPredictionIntervalsAllLayout);
        panelPredictionIntervalsAllLayout.setHorizontalGroup(
            panelPredictionIntervalsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPredictionIntervalsAllLayout.createSequentialGroup()
                .addComponent(buttonExportPredictionIntervals)
                .addGap(0, 1291, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPredictionIntervalsAllLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPredictionIntervals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelPredictionIntervalsAllLayout.setVerticalGroup(
            panelPredictionIntervalsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPredictionIntervalsAllLayout.createSequentialGroup()
                .addComponent(buttonExportPredictionIntervals)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelPredictionIntervals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelEverything.addTab("Prediction intervals", panelPredictionIntervalsAll);
        panelEverything.removeTabAt(panelEverything.getTabCount() - 1);

        panelAnalysisBatch.setPreferredSize(new java.awt.Dimension(1361, 615));
        panelEverything.addTab("[Analysis batch]", panelAnalysisBatch);

        jButton2.setText("Export");
        jButton2.setEnabled(false);

        javax.swing.GroupLayout panelCombinationWeightsLayout = new javax.swing.GroupLayout(panelCombinationWeights);
        panelCombinationWeights.setLayout(panelCombinationWeightsLayout);
        panelCombinationWeightsLayout.setHorizontalGroup(
            panelCombinationWeightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1336, Short.MAX_VALUE)
        );
        panelCombinationWeightsLayout.setVerticalGroup(
            panelCombinationWeightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 619, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelCombinationWeightsAllLayout = new javax.swing.GroupLayout(panelCombinationWeightsAll);
        panelCombinationWeightsAll.setLayout(panelCombinationWeightsAllLayout);
        panelCombinationWeightsAllLayout.setHorizontalGroup(
            panelCombinationWeightsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCombinationWeightsAllLayout.createSequentialGroup()
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelCombinationWeightsAllLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCombinationWeights, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelCombinationWeightsAllLayout.setVerticalGroup(
            panelCombinationWeightsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCombinationWeightsAllLayout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCombinationWeights, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Combination weights", panelCombinationWeightsAll);
        panelEverything.removeTabAt(panelEverything.getTabCount() - 1);
        panelEverything.addTab("Model descriptions", panelModelDescriptionsAll);
        panelEverything.addTab("Bayesian", panelBayesianAll);

        getContentPane().add(panelEverything, java.awt.BorderLayout.CENTER);

        menuFile.setText("File");

        menuFileLoad.setText("Load");
        menuFileLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileLoadActionPerformed(evt);
            }
        });
        menuFile.add(menuFileLoad);

        menuFileExit.setText("Exit");
        menuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menuBarMain.add(menuFile);

        menuEdit.setText("Edit");
        menuBarMain.add(menuEdit);

        setJMenuBar(menuBarMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileLoadActionPerformed
        JFileChooser fileChooser = new JFileChooser((File)null);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setAcceptAllFileFilterUsed(false); //do not allow "All files"
        fileChooser.setFileFilter(new FileFilterXlsXlsxCsv());
        LoadDataCustomizerPanel customizer = new LoadDataCustomizerPanel();
        fileChooser.setAccessory(customizer);
        if (evt.getSource() == menuFileLoad) {
            switch (fileChooser.showOpenDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    this.loadedFile = fileChooser.getSelectedFile();
                    DataTableModel.getInstance().openFile(loadedFile, customizer);
                    DataTableModel.getInstance().fireTableStructureChanged();
                    fillGUIelementsWithNewData();
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                    this.loadedFile = null;
            }
        }
    }//GEN-LAST:event_menuFileLoadActionPerformed

    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void comboBoxRPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRPackageActionPerformed
        CardLayout card = (CardLayout)panelSettingsMLPPackage.getLayout();
        switch (Model.myValueOf(comboBoxRPackage.getSelectedItem().toString())) {
            case NNET:
                card.show(panelSettingsMLPPackage, "panelSettingsMLPPackage_nnet");
                break;
            case NNETAR:
                card.show(panelSettingsMLPPackage, "panelSettingsMLPPackage_nnetar");
                break;
            case NEURALNET:
                card.show(panelSettingsMLPPackage, "panelSettingsMLPPackage_neuralnet");
                break;
        }
        panelSettingsMLPPackage.repaint();
    }//GEN-LAST:event_comboBoxRPackageActionPerformed

    private void buttonPlotSelectedITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotSelectedITSActionPerformed
        List<IntervalNamesCentreRadius> listITSPlotCR = new ArrayList<>();
        List<IntervalNamesLowerUpper> listITSPlotLU = new ArrayList<>();
        
        List<Object> values = listPlotITSspecs.getSelectedValuesList();
        for (Object val : values) {
            if (val instanceof IntervalNamesCentreRadius) {
                listITSPlotCR.add((IntervalNamesCentreRadius) val);
            } else if (val instanceof IntervalNamesLowerUpper) {
                listITSPlotLU.add((IntervalNamesLowerUpper) val);
            }
        }
        
        PlotDrawer.drawPlotsITS(true, new CallParamsDrawPlotsITS(((PlotSubPanel)panelPlotImage).getListPlotLegend(), 
                PlotDrawer.getDrawNowToThisGDBufferedPanel(), ((PlotSubPanel)panelPlotImage).getPanelPlot().getWidth(), 
                ((PlotSubPanel)panelPlotImage).getPanelPlot().getHeight(), DataTableModel.getInstance(),
                listITSPlotCR, listITSPlotLU, false));
        ((PlotSubPanel)panelPlotImage).getButtonPlotExportPlot().setEnabled(true);
        setPlotRanges(0, 1);
        
        panelEverything.setSelectedComponent(panelPlotImage);
    }//GEN-LAST:event_buttonPlotSelectedITSActionPerformed

    private void comboBoxIntervalMLPModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxIntervalMLPModeActionPerformed
        CardLayout card = (CardLayout)panelSettingsIntervalMLPMode.getLayout();
        switch (Model.myValueOf(comboBoxIntervalMLPMode.getSelectedItem().toString())) {
            case INTERVAL_MLP_C_CODE:
                card.show(panelSettingsIntervalMLPMode, "panelSettingsIntervalMLPModeCcode");
                break;
            case NEURALNET:
                card.show(panelSettingsIntervalMLPMode, "panelSettingsIntervalMLPModeNeuralnet");
                break;
        }
        
        panelSettingsMLPPackage.repaint();
    }//GEN-LAST:event_comboBoxIntervalMLPModeActionPerformed

    private void comboBoxKNNoptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxKNNoptionsActionPerformed
        CardLayout card = (CardLayout)panelSettingsKNNoptions.getLayout();
        switch (Model.myValueOf(comboBoxKNNoptions.getSelectedItem().toString())) {
            case KNN_FNN:
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_FNN");
                break;
            case KNN_CUSTOM:
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_custom");
                break;
            case KNN_KKNN:
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_kknn");
                break;
        }
        
        panelSettingsKNNoptions.repaint();
    }//GEN-LAST:event_comboBoxKNNoptionsActionPerformed

    private void buttonPlotAddITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotAddITSActionPerformed
        dialogLBUBCenterRadius = DialogLbUbCenterRadius.getInstance(this, true);
        dialogLBUBCenterRadius.setColnames(DataTableModel.getInstance().getColnames());
        dialogLBUBCenterRadius.setVisible(true);
    }//GEN-LAST:event_buttonPlotAddITSActionPerformed

    private void buttonPlotRemoveITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRemoveITSActionPerformed
        List<Object> values = listPlotITSspecs.getSelectedValuesList();
        for (Object val : values) {
            if (val instanceof IntervalNamesCentreRadius) {
                listITSPlotCentreRadius.remove(val);
            } else if (val instanceof IntervalNamesLowerUpper) {
                listITSPlotLowerUpper.remove(val);
            }
            ((DefaultListModel)(listPlotITSspecs.getModel())).removeElement(val);
        }
    }//GEN-LAST:event_buttonPlotRemoveITSActionPerformed

    private void radioButtonRunFakeIntCenterRadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRunFakeIntCenterRadiusActionPerformed
        if (radioButtonRunFakeIntCenterRadius.isSelected()) {
            groupRunControlsCenterRadius.enableAll();
            groupRunControlsLowerUpper.disableAll();
        }
    }//GEN-LAST:event_radioButtonRunFakeIntCenterRadiusActionPerformed

    private void radioButtonRunFakeIntLowerUpperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRunFakeIntLowerUpperActionPerformed
        if (radioButtonRunFakeIntLowerUpper.isSelected()) {
            groupRunControlsCenterRadius.disableAll();
            groupRunControlsLowerUpper.enableAll();
        }
    }//GEN-LAST:event_radioButtonRunFakeIntLowerUpperActionPerformed

    private void buttonRunExportErrorMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunExportErrorMeasuresActionPerformed
        //TODO export with formatting - the highest, lowest vals highlighted etc.
        JFileChooser fileChooser = new OverwriteFileChooser();
        fileChooser.setSelectedFile(new File("error_measures.xls"));
        if (evt.getSource() == buttonRunExportErrorMeasures) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    File errorMeasuresFile = fileChooser.getSelectedFile();
                    ExcelWriter.errorJTablesToExcel((ErrorMeasuresTableModel_CTS)(errorMeasuresLatest_CTS.getModel()),
                        (ErrorMeasuresTableModel_ITS)(errorMeasuresLatest_IntTS.getModel()), errorMeasuresFile);
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                //nothing
            }
        }

        //a na zaver to disablovat, aby sa na to netukalo furt
        buttonRunExportErrorMeasures.setEnabled(false);
    }//GEN-LAST:event_buttonRunExportErrorMeasuresActionPerformed

    private void buttonTrainAndTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrainAndTestActionPerformed
        //zazalohovat si aktualny batchTableModel
        AnalysisBatchTableModel lastKnownBatchModel = AnalysisBatchTableModel.getInstance();
        lastKnownBatchModel.setAllLines(AnalysisBatchTableModel.getInstance().getAllLines());
        AnalysisBatchTableModel.getInstance().clear();
        
        //TODO mozno si nahadzat tie checkboxy do ComponentGroup a prechadzat ich len v cykle a nie takto natvrdo?

        if (checkBoxRunMLPnnetar.isSelected()) {
            comboBoxRPackage.setSelectedItem(Model.NNETAR);
            buttonSettingsAddToBatch_MLPActionPerformed(null);
        }

        if (checkBoxRunMLPneuralnet.isSelected()) {
            comboBoxRPackage.setSelectedItem(Model.NEURALNET);
            buttonSettingsAddToBatch_MLPActionPerformed(null);
        }

        if (checkBoxRunMLPnnet.isSelected()) {
            comboBoxRPackage.setSelectedItem(Model.NNET);
            buttonSettingsAddToBatch_MLPActionPerformed(null);
        }

        if (checkBoxRunIntervalMLPCcode.isSelected()) {
            comboBoxIntervalMLPMode.setSelectedItem(Model.INTERVAL_MLP_C_CODE);
            buttonSettingsAddToBatch_intMLPActionPerformed(null);
        }

        if (checkBoxRunMLPintNnetar.isSelected()) {
            comboBoxRPackageMLPint.setSelectedItem(Model.NNETAR);
            buttonSettingsAddToBatch_MLPintActionPerformed(null);
        }
        
        if (checkBoxRunMLPintNnet.isSelected()) {
            comboBoxRPackageMLPint.setSelectedItem(Model.NNET);
            buttonSettingsAddToBatch_MLPintActionPerformed(null);
        }

        if (checkBoxRunARIMA.isSelected()) {
            buttonSettingsAddToBatch_ARIMAActionPerformed(null);
        }

        if (checkBoxRunKNNfnn.isSelected()) {
            comboBoxKNNoptions.setSelectedItem(Model.KNN_FNN);
            buttonSettingsAddToBatch_KNNActionPerformed(null);
        }

//        if (checkBoxRunKNNcustom.isSelected()) {
//            List<KNNcustomParams> params = getParamsKNNcustom();
//            
//            showDialogTooManyModelsInCase(params.size(), Model.KNN_CUSTOM);
//            if (continueWithTooManyModels) {
//                Forecastable kNNcustom = new KNNcustom();
//                for (KNNcustomParams p : params) {
//                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (kNNcustom.forecast(dataTableModel, p));
//                    report.setID(Utils.getModelID());
//                    reportsCTS.add(report);
//                }
//            }
//        }

        if (checkBoxRunKNNkknn.isSelected()) {
            comboBoxKNNoptions.setSelectedItem(Model.KNN_KKNN);
            buttonSettingsAddToBatch_KNNActionPerformed(null);
        }
        
        if (checkBoxRunKNNmyown.isSelected()) {
            comboBoxKNNoptions.setSelectedItem(Model.KNN_MYOWN);
            buttonSettingsAddToBatch_KNNActionPerformed(null);
        }
        
//        if (checkBoxRunVAR.isSelected()) {
//            try {
//                List<VARParams> params = getParamsVAR(comboBoxColnamesRun, panelSettingsVARMainInsideBecauseX);
//
//                showDialogTooManyModelsInCase(params.size(), "VAR");
//                if (continueWithTooManyModels) {
//                    VAR var = new VAR();
//                    for (VARParams p : params) {
//                        List<TrainAndTestReportCrisp> reports = var.forecast(p);
//                        report.setID(Utils.getModelID());
//                        reportsCTS.addAll(reports);
//                    }
//                }
//            } catch (IllegalArgumentException e) {
//                //TODO log alebo nieco
//            }
//        }
        
        if (checkBoxRunRBF.isSelected()) {
            buttonSettingsAddToBatch_RBFActionPerformed(null);
        }
        
        if (checkBoxRunRBFint.isSelected()) {
            buttonSettingsAddToBatch_RBFintActionPerformed(null);
        }
        
        if (checkBoxRunVARint.isSelected()) {
            buttonSettingsAddToBatch_VARintActionPerformed(null);
        }
        
        if (checkBoxRunHybrid.isSelected()) {
            buttonSettingsAddToBatch_HybridActionPerformed(null);
        }
        
        if (checkBoxRunHolt.isSelected()) {
            buttonSettingsAddToBatch_HoltActionPerformed(null);
        }
        
        if (checkBoxRunHoltInt.isSelected()) {
            buttonSettingsAddToBatch_HoltintActionPerformed(null);
        }
        
        if (checkBoxRunIntervalHolt.isSelected()) {
            buttonSettingsAddToBatch_IntervalHoltActionPerformed(null);
        }
        
        if (checkBoxRunSES.isSelected()) {
            buttonSettingsAddToBatch_SESActionPerformed(null);
        }
        
        if (checkBoxRunSESint.isSelected()) {
            buttonSettingsAddToBatch_SESintActionPerformed(null);
        }
        
        if (checkBoxRunMAvg.isSelected()) {
            buttonSettingsAddToBatch_MAvgActionPerformed(null);
        }
        
        if (checkBoxRunHoltWinters.isSelected()) {
            buttonSettingsAddToBatch_HoltWintersActionPerformed(null);
        }
        
        if (checkBoxRunHoltWintersInt.isSelected()) {
            buttonSettingsAddToBatch_HoltWintersIntActionPerformed(null);
        }
        
        if (checkBoxRunBNN.isSelected()) {
            buttonSettingsAddToBatch_BNNActionPerformed(null);
        }
        
        if (checkBoxRunBNNInt.isSelected()) {
            buttonSettingsAddToBatch_BNNintActionPerformed(null);
        }

        if (checkBoxRunRandomWalkCTS.isSelected()) {
            try {
                List<RandomWalkParams> paramsRandomWalk = RandomWalkParams.getParamsRandomWalk(comboBoxColnamesRun);
                AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.RANDOM_WALK, paramsRandomWalk, paramsRandomWalk.size()));
            } catch (IllegalArgumentException e) {
                logger.error("Exception", e); // TODO: review logging
            }
        }

        if (checkBoxRunIntervalRandomWalk.isSelected()) {
            try {
                List<RandomWalkIntervalParams> paramsRandomWalkInt =
                        RandomWalkIntervalParams.getParamsRandomWalkInterval(panelMLPintSettingsDistance, comboBoxRunFakeIntCenter, comboBoxRunFakeIntRadius);
                AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.RANDOM_WALK_INT, paramsRandomWalkInt,
                        paramsRandomWalkInt.size()));
            } catch (IllegalArgumentException e) {
                logger.error("Exception", e); // TODO: review logging
            }
        }

        runModels(false);
        
        //a vratit tam stary batchTableModel
        AnalysisBatchTableModel.getInstance().setAllLines(lastKnownBatchModel.getAllLines());
    }//GEN-LAST:event_buttonTrainAndTestActionPerformed

    private void comboBoxRPackageMLPintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRPackageMLPintActionPerformed
        CardLayout card = (CardLayout) panelSettingsMLPintPackage.getLayout();
        switch (Model.myValueOf(comboBoxRPackageMLPint.getSelectedItem().toString())) {
            case NNET:
                card.show(panelSettingsMLPintPackage, "panelSettingsMLPintPackage_nnet");
                break;
            case NNETAR:
                card.show(panelSettingsMLPintPackage, "panelSettingsMLPintPackage_nnetar");
        }
        
        panelSettingsMLPintPackage.repaint();
    }//GEN-LAST:event_comboBoxRPackageMLPintActionPerformed

    private void buttonRunRestoreRangeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunRestoreRangeAllActionPerformed
        textFieldRunDataRangeFrom.setText("1");
        textFieldRunDataRangeTo.setText("" + DataTableModel.getInstance().getRowCount());
    }//GEN-LAST:event_buttonRunRestoreRangeAllActionPerformed

    private void checkBoxAvgSimpleCTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgSimpleCTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgSimpleCTSperM);
    }//GEN-LAST:event_checkBoxAvgSimpleCTSperMActionPerformed

    private void checkBoxAvgSimpleCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgSimpleCTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgSimpleCTS);
    }//GEN-LAST:event_checkBoxAvgSimpleCTSActionPerformed

    private void checkBoxAvgSimpleIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgSimpleIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgSimpleIntTSperM);
    }//GEN-LAST:event_checkBoxAvgSimpleIntTSperMActionPerformed

    private void checkBoxAvgSimpleIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgSimpleIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgSimpleIntTS);
    }//GEN-LAST:event_checkBoxAvgSimpleIntTSActionPerformed

    private void comboBoxSettingsHybridMethod_centerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSettingsHybridMethod_centerActionPerformed
        switchHybridToCard("center", comboBoxSettingsHybridMethod_center, panelSettingsHybrid_centerMain);
    }//GEN-LAST:event_comboBoxSettingsHybridMethod_centerActionPerformed

    private void comboBoxSettingsHybridMethod_radiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSettingsHybridMethod_radiusActionPerformed
        switchHybridToCard("radius", comboBoxSettingsHybridMethod_radius, panelSettingsHybrid_radiusMain);
    }//GEN-LAST:event_comboBoxSettingsHybridMethod_radiusActionPerformed

    private void switchHybridToCard(String centerOrRadius, JComboBox comboBox, JPanel panel) {
        CardLayout card = (CardLayout)panel.getLayout();
        //TODO neslo by tie panely nazvat tak, aby sa odstranil ten switch? ze uz priamo by tam mali tu konstantu v mene
        switch (Model.myValueOf(comboBox.getSelectedItem().toString())) {
            case NNETAR:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_MLPnnetar");
                break;
            case NNET:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_MLPnnet");
                break;
            case RBF:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_RBF");
                break;
            case ARIMA:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_ARIMA");
                break;
            case KNN_FNN:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_KNNFNN");
                break;
            case KNN_KKNN:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_KNNkknn");
                break;
            case SES:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_SES");
                break;
            case HOLT:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_Holt");
                break;
            case BNN:
                card.show(panel, "panelSettingsHybrid_" + centerOrRadius + "Main_BNN");
                break;
        }
        panel.repaint();
    }
    
    private void checkBoxRunIncludeRMSSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunIncludeRMSSEActionPerformed
        textFieldRunRMSSESeasonality.setEnabled(checkBoxRunIncludeRMSSE.isSelected());
    }//GEN-LAST:event_checkBoxRunIncludeRMSSEActionPerformed

    private void buttonSettingsAddToBatch_MLPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_MLPActionPerformed
        //zistit, ktora karta je hore
        switch (Model.myValueOf(comboBoxRPackage.getSelectedItem().toString())) {
            case NNET:
                try {
                    List<NnetParams> paramsNnet = NnetParams.getParamsNnet(panelMLPPercentTrain, comboBoxColnamesRun, panelSettingsMLPPackage_nnet);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.NNET, paramsNnet, paramsNnet.size()));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case NNETAR:
                try {
                    List<NnetarParams> paramsNnetar = NnetarParams.getParamsNnetar(panelMLPPercentTrain, comboBoxColnamesRun, panelSettingsMLPPackage_nnetar);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.NNETAR, paramsNnetar, paramsNnetar.size()));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case NEURALNET:
                break;
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_MLPActionPerformed

    private void buttonSettingsAddToBatch_MLPintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_MLPintActionPerformed
        switch (Model.myValueOf(comboBoxRPackageMLPint.getSelectedItem().toString())) {
            case NNET:
                try {
                    List<MLPintNnetParams> paramsNnet = MLPintNnetParams.getParamsMLPintNnet(panelMLPintPercentTrain, 
                            comboBoxRunFakeIntCenter, 
                        panelSettingsMLPintPackage_nnet_center, panelMLPintPercentTrain, comboBoxRunFakeIntRadius, 
                        panelSettingsMLPintPackage_nnet_radius, panelMLPintSettingsDistance, textFieldNumNetsToTrainMLPint,
                        panelBestModelCriterionMLPint);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.MLP_INT_NNET, paramsNnet,
                            paramsNnet.size()*(paramsNnet.get(0).getNumNetsToTrain()))); //TODO mozno brat to numNetsToTrain nejak bezpecnejsie?
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case NNETAR:
                try {
                    List<MLPintNnetarParams> paramsNnetar = MLPintNnetarParams.getParamsMLPintNnetar(panelMLPintPercentTrain, 
                            comboBoxRunFakeIntCenter, 
                        panelSettingsMLPintPackage_nnetar_center, panelMLPintPercentTrain, comboBoxRunFakeIntRadius, 
                        panelSettingsMLPintPackage_nnetar_radius, panelMLPintSettingsDistance, textFieldNumNetsToTrainMLPint,
                        panelBestModelCriterionMLPint);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.MLP_INT_NNETAR, paramsNnetar,
                            paramsNnetar.size()*(paramsNnetar.get(0).getNumNetsToTrain())));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case NEURALNET:
                break;
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_MLPintActionPerformed

    private void buttonSettingsAddToBatch_intMLPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_intMLPActionPerformed
        switch (Model.myValueOf(comboBoxIntervalMLPMode.getSelectedItem().toString())) {
            case INTERVAL_MLP_C_CODE:
                try {
                    List<IntervalMLPCcodeParams> paramsIMLP = IntervalMLPCcodeParams.getParamsIntervalMLPCcode(panelIntMLPPercentTrain, panelSettingsIntervalMLPModeCcode);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.INTERVAL_MLP_C_CODE, paramsIMLP,
                            paramsIMLP.size()*(paramsIMLP.get(0).getNumNetworks())));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case NEURALNET:
                break;
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_intMLPActionPerformed

    private void buttonSettingsAddToBatch_RBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_RBFActionPerformed
        try {
            List<RBFParams> paramsRBF = RBFParams.getParamsRBF(panelRBFPercentTrain, comboBoxColnamesRun, panelSettingsRBFMain);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.RBF, paramsRBF, paramsRBF.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_RBFActionPerformed

    private void buttonSettingsAddToBatch_RBFintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_RBFintActionPerformed
        try {
            List<RBFintParams> paramsRBFint = RBFintParams.getParamsRBFint(panelRBFintPercentTrain, comboBoxRunFakeIntCenter, 
                panelSettingsRBFint_center, panelRBFintPercentTrain, comboBoxRunFakeIntRadius, 
                panelSettingsRBFint_radius, panelRBFintSettingsDistance, textFieldNumNetworksToTrainRBFint,
                panelBestModelCriterionRBFint);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.RBF_INT, paramsRBFint, paramsRBFint.size()*(paramsRBFint.get(0).getNumNetsToTrain())));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_RBFintActionPerformed

    private void buttonSettingsAddToBatch_ARIMAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_ARIMAActionPerformed
        try {
            List<ArimaParams> paramsArima = ArimaParams.getParamsArima(panelARIMAPercTrain, comboBoxColnamesRun, panelSettingsARIMAMain);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.ARIMA, paramsArima, paramsArima.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_ARIMAActionPerformed

    private void buttonSettingsAddToBatch_KNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_KNNActionPerformed
        switch (Model.myValueOf(comboBoxKNNoptions.getSelectedItem().toString())) {
            case KNN_FNN:
                try {
                    List<KNNfnnParams> paramsFNN = KNNfnnParams.getParamsKNNfnn(panelKNNPercTrain, comboBoxColnamesRun, panelSettingsKNNoptions_FNN);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.KNN_FNN, paramsFNN, paramsFNN.size()));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case KNN_KKNN:
                try {
                    List<KNNkknnParams> paramsKKNN = KNNkknnParams.getParamsKNNkknn(panelKNNPercTrain, comboBoxColnamesRun, panelSettingsKNNoptions_kknn);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.KNN_KKNN, paramsKKNN, paramsKKNN.size()));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
            case KNN_CUSTOM:
                break;
            case KNN_MYOWN:
                try {
                    List<KNNmyownParams> paramsMyOwn = KNNmyownParams.getParamsKNNmyown(panelKNNPercTrain, comboBoxColnamesRun, panelSettingsKNNoptions_myown);
                    AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.KNN_MYOWN, paramsMyOwn, paramsMyOwn.size()));
                } catch (IllegalArgumentException e) {
                    logger.error("Exception", e); // TODO: review logging
                }
                break;
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_KNNActionPerformed

    private void buttonSettingsAddToBatch_VARintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_VARintActionPerformed
        try {
            List<VARintParams> paramsVARint = VARintParams.getParamsVARint(panelVARintPercentTrain, panelVARintDistance, panelVARintInsideBecause);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.VAR_INT, paramsVARint, paramsVARint.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_VARintActionPerformed

    private void buttonSettingsAddToBatch_SESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_SESActionPerformed
        try {
            List<SESParams> paramsSES = SESParams.getParamsSES(panelSESpercentTrain, comboBoxColnamesRun, panelSESmain);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.SES, paramsSES, paramsSES.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_SESActionPerformed

    private void buttonSettingsAddToBatch_SESintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_SESintActionPerformed
        try {
            List<SESintParams> paramsSESint = SESintParams.getParamsSESint(panelSESintPercentTrain, panelSESint_center, 
                        comboBoxRunFakeIntCenter, panelSESintPercentTrain, panelSESint_radius, comboBoxRunFakeIntRadius,
                        panelSESintDistance);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.SES_INT, paramsSESint, paramsSESint.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_SESintActionPerformed

    private void buttonSettingsAddToBatch_HoltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_HoltActionPerformed
        try {
            List<HoltParams> paramsHolt = HoltParams.getParamsHolt(panelHoltPercentTrain, panelHoltInside, comboBoxColnamesRun);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.HOLT, paramsHolt, paramsHolt.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_HoltActionPerformed

    private void buttonSettingsAddToBatch_HoltintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_HoltintActionPerformed
        try {
            List<HoltIntParams> paramsHoltInt = HoltIntParams.getParamsHoltInt(panelHoltIntPercentTrain, panelHoltInt_center, 
                        comboBoxRunFakeIntCenter, panelHoltIntPercentTrain, panelHoltInt_radius, comboBoxRunFakeIntRadius,
                        panelHoltIntDistance);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.HOLT_INT, paramsHoltInt, paramsHoltInt.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_HoltintActionPerformed

    private void buttonSettingsAddToBatch_IntervalHoltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_IntervalHoltActionPerformed
        try {
            List<IntervalHoltParams> paramsIntervalHolt = IntervalHoltParams.getParamsIntervalHolt(panelIntervalHoltPercentTrain, comboBoxRunFakeIntCenter,
                        comboBoxRunFakeIntRadius, panelIntervalHoltDistance, panelIntervalHoltMain);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.INTERVAL_HOLT, paramsIntervalHolt, paramsIntervalHolt.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_IntervalHoltActionPerformed

    private void buttonSettingsAddToBatch_HoltWintersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_HoltWintersActionPerformed
        try {
            List<HoltWintersParams> paramsHoltWinters = HoltWintersParams.getParamsHoltWinters(panelHoltWintersPercentTrain, 
                        panelHoltWintersInside, comboBoxColnamesRun);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.HOLT_WINTERS, paramsHoltWinters, paramsHoltWinters.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_HoltWintersActionPerformed

    private void buttonSettingsAddToBatch_HoltWintersIntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_HoltWintersIntActionPerformed
        try {
            List<HoltWintersIntParams> paramsHoltWintersInt = HoltWintersIntParams.getParamsHoltWintersInt(panelHoltWintersIntPercentTrain, 
                        panelHoltWintersInt_center, comboBoxRunFakeIntCenter, panelHoltWintersIntPercentTrain, 
                        panelHoltWintersInt_radius, comboBoxRunFakeIntRadius, panelHoltWintersIntDistance);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.HOLT_WINTERS_INT, paramsHoltWintersInt, paramsHoltWintersInt.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_HoltWintersIntActionPerformed

    private void buttonSettingsAddToBatch_HybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_HybridActionPerformed
        try {
            List<HybridParams> paramsHybrid = getParamsHybrid();
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.HYBRID, paramsHybrid, paramsHybrid.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_HybridActionPerformed

    
    private void buttonRunShowHiddenErrorMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunShowHiddenErrorMeasuresActionPerformed
        ((ErrorMeasuresTableModel_CTS)errorMeasuresLatest_CTS.getModel()).showAllHiddenRows();
        ((ErrorMeasuresTableModel_ITS)errorMeasuresLatest_IntTS.getModel()).showAllHiddenRows();
    }//GEN-LAST:event_buttonRunShowHiddenErrorMeasuresActionPerformed

    private void buttonPlotAllITSScatterplotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotAllITSScatterplotActionPerformed
        //tu uz len vezmi nasyslene v tych listoch
        PlotDrawer.drawScatterPlotsITS(true, new CallParamsDrawPlotsITS(((PlotSubPanel)panelPlotImage).getListPlotLegend(),
                PlotDrawer.getDrawNowToThisGDBufferedPanel(), ((PlotSubPanel)panelPlotImage).getPanelPlot().getWidth(), 
                ((PlotSubPanel)panelPlotImage).getPanelPlot().getHeight(), DataTableModel.getInstance(),
                listITSPlotCentreRadius, listITSPlotLowerUpper, true));
        ((PlotSubPanel)panelPlotImage).getButtonPlotExportPlot().setEnabled(true);
        setPlotRanges(0, 1);
        
        panelEverything.setSelectedComponent(panelPlotImage);
    }//GEN-LAST:event_buttonPlotAllITSScatterplotActionPerformed

    private void buttonHideAllErrorsExceptAvgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHideAllErrorsExceptAvgActionPerformed
        ((ErrorMeasuresTableModel_CTS)errorMeasuresLatest_CTS.getModel()).hideAllButAvg();
        ((ErrorMeasuresTableModel_ITS)errorMeasuresLatest_IntTS.getModel()).hideAllButAvg();
    }//GEN-LAST:event_buttonHideAllErrorsExceptAvgActionPerformed

    private void checkBoxAvgMDeCTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMDeCTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMDeCTSperM);
    }//GEN-LAST:event_checkBoxAvgMDeCTSperMActionPerformed
    
    private void checkBoxAvgMDeIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMDeIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMDeIntTSperM);
    }//GEN-LAST:event_checkBoxAvgMDeIntTSperMActionPerformed

    private void checkBoxAvgMDeCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMDeCTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMDeCTS);
    }//GEN-LAST:event_checkBoxAvgMDeCTSActionPerformed

    private void checkBoxAvgMDeIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMDeIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMDeIntTS);
    }//GEN-LAST:event_checkBoxAvgMDeIntTSActionPerformed

    private void checkBoxAvgTheilsuCTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgTheilsuCTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgTheilsuCTSperM);
    }//GEN-LAST:event_checkBoxAvgTheilsuCTSperMActionPerformed

    private void checkBoxAvgTheilsuIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgTheilsuIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgTheilsuIntTSperM);
    }//GEN-LAST:event_checkBoxAvgTheilsuIntTSperMActionPerformed

    private void checkBoxAvgTheilsuCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgTheilsuCTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgTheilsuCTS);
    }//GEN-LAST:event_checkBoxAvgTheilsuCTSActionPerformed

    private void checkBoxAvgTheilsuIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgTheilsuIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgTheilsuIntTS);
    }//GEN-LAST:event_checkBoxAvgTheilsuIntTSActionPerformed

    private void checkBoxAvgCvgEffIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgCvgEffIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgCvgEffIntTSperM);
    }//GEN-LAST:event_checkBoxAvgCvgEffIntTSperMActionPerformed
    
    private void checkBoxAvgCvgEffIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgCvgEffIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgCvgEffIntTS);
    }//GEN-LAST:event_checkBoxAvgCvgEffIntTSActionPerformed

    private void checkBoxAvgCenterLogRadiusIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgCenterLogRadiusIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgCenterLogRadiusIntTSperM);
    }//GEN-LAST:event_checkBoxAvgCenterLogRadiusIntTSperMActionPerformed

    private void checkBoxAvgCenterLogRadiusIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgCenterLogRadiusIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgCenterLogRadiusIntTS);
    }//GEN-LAST:event_checkBoxAvgCenterLogRadiusIntTSActionPerformed

    private void checkBoxAvgGotSelected(JCheckBox checkBox) {
        if (checkBox.isSelected()) { //ak sa to prave zafajklo
            checkBoxAvgONLY.setEnabled(true); //povol ONLY AVG
        } else { //prave sa to odfajklo
            maybeTurnOffPlotAvgONLY();
        }
    }
    
    private void buttonPlotAllITSScatterplotMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotAllITSScatterplotMatrixActionPerformed
        buttonPlotAllITSScatterplot.doClick(); //hack. for some reason does not draw the matrix without setting up the
                                               //   plot with drawing sth else first.
        ((DefaultListModel)(((PlotSubPanel)panelPlotImage).getListPlotLegend().getModel())).clear(); //a second hack to clear the legend after the scatterplot
        
        //tu uz len vezmi nasyslene v tych listoch
        PlotDrawer.drawScatterPlotMatrixITS(true, new CallParamsDrawPlotsITS(((PlotSubPanel)panelPlotImage).getListPlotLegend(), 
                PlotDrawer.getDrawNowToThisGDBufferedPanel(), ((PlotSubPanel)panelPlotImage).getPanelPlot().getWidth(), 
                ((PlotSubPanel)panelPlotImage).getPanelPlot().getHeight(), DataTableModel.getInstance(), 
                listITSPlotCentreRadius, listITSPlotLowerUpper, true));
        ((PlotSubPanel)panelPlotImage).getButtonPlotExportPlot().setEnabled(true);
        setPlotRanges(0, 0);
        
        panelEverything.setSelectedComponent(panelPlotImage);
    }//GEN-LAST:event_buttonPlotAllITSScatterplotMatrixActionPerformed

    private void checkBoxAvgMedianCTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMedianCTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMedianCTSperM);
    }//GEN-LAST:event_checkBoxAvgMedianCTSperMActionPerformed

    private void checkBoxAvgMedianCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMedianCTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMedianCTS);
    }//GEN-LAST:event_checkBoxAvgMedianCTSActionPerformed

    private void checkBoxAvgMedianIntTSperMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMedianIntTSperMActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMedianIntTSperM);
    }//GEN-LAST:event_checkBoxAvgMedianIntTSperMActionPerformed

    private void checkBoxAvgMedianIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgMedianIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgMedianIntTS);
    }//GEN-LAST:event_checkBoxAvgMedianIntTSActionPerformed

    private void buttonDiffSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDiffSeriesActionPerformed
        Transformations.difference(listColnamesTransform.getSelectedValuesList());
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonDiffSeriesActionPerformed

    private void buttonLogTransformSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLogTransformSeriesActionPerformed
        Transformations.logTransform(listColnamesTransform.getSelectedValuesList());
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonLogTransformSeriesActionPerformed

    private void buttonRemoveTrendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveTrendActionPerformed
        Transformations.removeTrend(listColnamesTransform.getSelectedValuesList());
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonRemoveTrendActionPerformed

    private void buttonAggregateToITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAggregateToITSActionPerformed
        final int length = Integer.parseInt(textFieldAggregateToITSevery.getText());
        Transformations.aggregateToITS(listColnamesTransform.getSelectedValuesList(), length);
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonAggregateToITSActionPerformed

    private void buttonSettingsAddToBatch_BNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_BNNActionPerformed
        try {
            List<BNNParams> paramsBNN = BNNParams.getParamsBNN(panelBNNPercentTrain, comboBoxColnamesRun, panelSettingsBNNinside);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.BNN, paramsBNN, paramsBNN.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_BNNActionPerformed

    private void buttonSettingsAddToBatch_BNNintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_BNNintActionPerformed
        try {
            List<BNNintParams> paramsBNNint = BNNintParams.getParamsBNNint(panelBNNintPercentTrain, comboBoxRunFakeIntCenter,
                panelSettingsBNNint_center, comboBoxRunFakeIntRadius, panelSettingsBNNint_radius,
                panelBNNintSettingsDistance, textFieldNumNetworksToTrainBNNint,
                panelBestModelCriterionBNNint);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.BNN_INT, paramsBNNint, paramsBNNint.size()*(paramsBNNint.get(0).getNumNetsToTrain())));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_BNNintActionPerformed

    private void buttonConvertITSLBUBCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConvertITSLBUBCRActionPerformed
        DialogConvertLbUbCenterRadius dialogConvertLBUBCenterRadius = DialogConvertLbUbCenterRadius.getInstance(this, true);
        dialogConvertLBUBCenterRadius.setColnames(DataTableModel.getInstance().getColnames());
        dialogConvertLBUBCenterRadius.setVisible(true);
        
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonConvertITSLBUBCRActionPerformed

    private void buttonSettingsAddToBatch_MAvgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSettingsAddToBatch_MAvgActionPerformed
        try {
            List<MAvgParams> paramsMAvg = MAvgParams.getParamsMAvg(comboBoxColnamesRun, panelMAvgMain);
            AnalysisBatchTableModel.getInstance().addLine(new AnalysisBatchLine(Model.MAvg, paramsMAvg, paramsMAvg.size()));
        } catch (IllegalArgumentException e) {
            logger.error("Exception", e); // TODO: review logging
        }
    }//GEN-LAST:event_buttonSettingsAddToBatch_MAvgActionPerformed

    private void buttonNormalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNormalizeActionPerformed
        Transformations.normalize(listColnamesTransform.getSelectedValuesList());
        fillGUIelementsWithNewData();
    }//GEN-LAST:event_buttonNormalizeActionPerformed

    private void buttonITSclearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonITSclearSelectionActionPerformed
        listPlotITSspecs.setSelectedIndices(new int[]{});
    }//GEN-LAST:event_buttonITSclearSelectionActionPerformed

    private void checkBoxAvgEigenvalsPCAIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAvgEigenvalsPCAIntTSActionPerformed
        checkBoxAvgGotSelected(checkBoxAvgEigenvalsPCAIntTS);
    }//GEN-LAST:event_checkBoxAvgEigenvalsPCAIntTSActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (server != null){
            server.shutdown();
        }
        
        MyRengine.stopRengine();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    
    private void maybeTurnOffPlotAvgONLY() {
        if (groupCheckBoxesAvg_withoutAvgONLY.areEnabled() == ComponentGroup.ENABLED.NONE) {
            checkBoxAvgONLY.setSelected(false);
            checkBoxAvgONLY.setEnabled(false);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAggregateToITS;
    private javax.swing.JButton buttonConvertITSLBUBCR;
    private javax.swing.JButton buttonConvertITSLBUBCR1;
    private javax.swing.JButton buttonDiffSeries;
    private javax.swing.JButton buttonExportDiagramsNN;
    private javax.swing.JButton buttonExportPredictionIntervals;
    private javax.swing.ButtonGroup buttonGroup_runFakeIntCRLBUB;
    private javax.swing.JButton buttonHideAllErrorsExceptAvg;
    private javax.swing.JButton buttonITSclearSelection;
    private javax.swing.JButton buttonLogTransformSeries;
    private javax.swing.JButton buttonNormalize;
    private javax.swing.JButton buttonPlotAddITS;
    private javax.swing.JButton buttonPlotAllITSScatterplot;
    private javax.swing.JButton buttonPlotAllITSScatterplotMatrix;
    private javax.swing.JButton buttonPlotRemoveITS;
    private javax.swing.JButton buttonPlotSelectedITS;
    private javax.swing.JButton buttonRemoveTrend;
    private javax.swing.JButton buttonRunExportErrorMeasures;
    private javax.swing.JButton buttonRunRestoreRangeAll;
    private javax.swing.JButton buttonRunShowHiddenErrorMeasures;
    private javax.swing.JButton buttonSettingsAddToBatch_ARIMA;
    private javax.swing.JButton buttonSettingsAddToBatch_BNN;
    private javax.swing.JButton buttonSettingsAddToBatch_BNNint;
    private javax.swing.JButton buttonSettingsAddToBatch_Holt;
    private javax.swing.JButton buttonSettingsAddToBatch_HoltWinters;
    private javax.swing.JButton buttonSettingsAddToBatch_HoltWintersInt;
    private javax.swing.JButton buttonSettingsAddToBatch_Holtint;
    private javax.swing.JButton buttonSettingsAddToBatch_Hybrid;
    private javax.swing.JButton buttonSettingsAddToBatch_IntervalHolt;
    private javax.swing.JButton buttonSettingsAddToBatch_KNN;
    private javax.swing.JButton buttonSettingsAddToBatch_MAvg;
    private javax.swing.JButton buttonSettingsAddToBatch_MLP;
    private javax.swing.JButton buttonSettingsAddToBatch_MLPint;
    private javax.swing.JButton buttonSettingsAddToBatch_RBF;
    private javax.swing.JButton buttonSettingsAddToBatch_RBFint;
    private javax.swing.JButton buttonSettingsAddToBatch_SES;
    private javax.swing.JButton buttonSettingsAddToBatch_SESint;
    private javax.swing.JButton buttonSettingsAddToBatch_VARint;
    private javax.swing.JButton buttonSettingsAddToBatch_intMLP;
    private javax.swing.JButton buttonTrainAndTest;
    private javax.swing.JCheckBox checkBoxAvgCenterLogRadiusIntTS;
    private javax.swing.JCheckBox checkBoxAvgCenterLogRadiusIntTSperM;
    private javax.swing.JCheckBox checkBoxAvgCvgEffIntTS;
    private javax.swing.JCheckBox checkBoxAvgCvgEffIntTSperM;
    private javax.swing.JCheckBox checkBoxAvgEigenvalsPCAIntTS;
    private javax.swing.JCheckBox checkBoxAvgMDeCTS;
    private javax.swing.JCheckBox checkBoxAvgMDeCTSperM;
    private javax.swing.JCheckBox checkBoxAvgMDeIntTS;
    private javax.swing.JCheckBox checkBoxAvgMDeIntTSperM;
    private javax.swing.JCheckBox checkBoxAvgMedianCTS;
    private javax.swing.JCheckBox checkBoxAvgMedianCTSperM;
    private javax.swing.JCheckBox checkBoxAvgMedianIntTS;
    private javax.swing.JCheckBox checkBoxAvgMedianIntTSperM;
    private javax.swing.JCheckBox checkBoxAvgONLY;
    private javax.swing.JCheckBox checkBoxAvgSimpleCTS;
    private javax.swing.JCheckBox checkBoxAvgSimpleCTSperM;
    private javax.swing.JCheckBox checkBoxAvgSimpleIntTS;
    private javax.swing.JCheckBox checkBoxAvgSimpleIntTSperM;
    private javax.swing.JCheckBox checkBoxAvgTheilsuCTS;
    private javax.swing.JCheckBox checkBoxAvgTheilsuCTSperM;
    private javax.swing.JCheckBox checkBoxAvgTheilsuIntTS;
    private javax.swing.JCheckBox checkBoxAvgTheilsuIntTSperM;
    private javax.swing.JCheckBox checkBoxRunARIMA;
    private javax.swing.JCheckBox checkBoxRunBNN;
    private javax.swing.JCheckBox checkBoxRunBNNInt;
    private javax.swing.JCheckBox checkBoxRunHolt;
    private javax.swing.JCheckBox checkBoxRunHoltInt;
    private javax.swing.JCheckBox checkBoxRunHoltWinters;
    private javax.swing.JCheckBox checkBoxRunHoltWintersInt;
    private javax.swing.JCheckBox checkBoxRunHybrid;
    private javax.swing.JCheckBox checkBoxRunIncludeRMSSE;
    private javax.swing.JCheckBox checkBoxRunIntervalHolt;
    private javax.swing.JCheckBox checkBoxRunIntervalMLPCcode;
    private javax.swing.JCheckBox checkBoxRunIntervalMLPneuralnet;
    private javax.swing.JCheckBox checkBoxRunIntervalRandomWalk;
    private javax.swing.JCheckBox checkBoxRunKNNcustom;
    private javax.swing.JCheckBox checkBoxRunKNNfnn;
    private javax.swing.JCheckBox checkBoxRunKNNinterval;
    private javax.swing.JCheckBox checkBoxRunKNNkknn;
    private javax.swing.JCheckBox checkBoxRunKNNmyown;
    private javax.swing.JCheckBox checkBoxRunMAvg;
    private javax.swing.JCheckBox checkBoxRunMLPintNnet;
    private javax.swing.JCheckBox checkBoxRunMLPintNnetar;
    private javax.swing.JCheckBox checkBoxRunMLPneuralnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnetar;
    private javax.swing.JCheckBox checkBoxRunRBF;
    private javax.swing.JCheckBox checkBoxRunRBFint;
    private javax.swing.JCheckBox checkBoxRunRandomWalkCTS;
    private javax.swing.JCheckBox checkBoxRunSES;
    private javax.swing.JCheckBox checkBoxRunSESint;
    private javax.swing.JCheckBox checkBoxRunVAR;
    private javax.swing.JCheckBox checkBoxRunVARint;
    private javax.swing.JComboBox comboBoxColnamesRun;
    private javax.swing.JComboBox comboBoxIntervalMLPMode;
    private javax.swing.JComboBox comboBoxKNNoptions;
    private javax.swing.JComboBox comboBoxRPackage;
    private javax.swing.JComboBox comboBoxRPackageMLPint;
    private javax.swing.JComboBox comboBoxRunFakeIntCenter;
    private javax.swing.JComboBox comboBoxRunFakeIntLower;
    private javax.swing.JComboBox comboBoxRunFakeIntRadius;
    private javax.swing.JComboBox comboBoxRunFakeIntUpper;
    private javax.swing.JComboBox comboBoxSettingsHybridMethod_center;
    private javax.swing.JComboBox comboBoxSettingsHybridMethod_radius;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel138;
    private javax.swing.JLabel jLabel139;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel150;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel152;
    private javax.swing.JLabel jLabel153;
    private javax.swing.JLabel jLabel154;
    private javax.swing.JLabel jLabel155;
    private javax.swing.JLabel jLabel156;
    private javax.swing.JLabel jLabel157;
    private javax.swing.JLabel jLabel158;
    private javax.swing.JLabel jLabel159;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel160;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelRPkg;
    private javax.swing.JLabel jLabelRPkg1;
    private javax.swing.JLabel jLabelTrainingInfo;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTable jTableData;
    private javax.swing.JLabel labelRunFakeIntCenter;
    private javax.swing.JLabel labelRunFakeIntLower;
    private javax.swing.JLabel labelRunFakeIntRadius;
    private javax.swing.JLabel labelRunFakeIntUpper;
    private javax.swing.JList listColnamesTransform;
    private javax.swing.JList listPlotITSspecs;
    private javax.swing.JMenuBar menuBarMain;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileExit;
    private javax.swing.JMenuItem menuFileLoad;
    private javax.swing.JTabbedPane paneSettingsMethods;
    private javax.swing.JPanel paneSettingsMethodsARIMA;
    private javax.swing.JPanel paneSettingsMethodsBNN;
    private javax.swing.JPanel paneSettingsMethodsBNNint;
    private javax.swing.JPanel paneSettingsMethodsHybrid;
    private javax.swing.JPanel paneSettingsMethodsIntervalMLP;
    private javax.swing.JPanel paneSettingsMethodsKNN;
    private javax.swing.JPanel paneSettingsMethodsMLP;
    private javax.swing.JPanel paneSettingsMethodsMLPint;
    private javax.swing.JPanel paneSettingsMethodsRBF;
    private javax.swing.JPanel paneSettingsMethodsRBFint;
    private javax.swing.JPanel panelARIMAPercTrain;
    private javax.swing.JPanel panelAnalysisBatch;
    private javax.swing.JPanel panelAnalysisSettings;
    private javax.swing.JPanel panelBNNPercentTrain;
    private javax.swing.JPanel panelBNNintPercentTrain;
    private javax.swing.JPanel panelBNNintSettingsDistance;
    private javax.swing.JPanel panelBayesianAll;
    private javax.swing.JPanel panelBestModelCriterionBNNint;
    private javax.swing.JPanel panelBestModelCriterionMLPint;
    private javax.swing.JPanel panelBestModelCriterionRBFint;
    private javax.swing.JPanel panelCRCombinationStrategyBNNint;
    private javax.swing.JPanel panelCRCombinationStrategyHoltWintersInt;
    private javax.swing.JPanel panelCRCombinationStrategyRBFint;
    private javax.swing.JPanel panelCRCombinationStrategySESint;
    private javax.swing.JPanel panelCRCombinationsStrategyHoltInt;
    private javax.swing.JPanel panelCRCombinationsStrategyMLPint;
    private javax.swing.JPanel panelCTS;
    private javax.swing.JPanel panelCombinationWeights;
    private javax.swing.JPanel panelCombinationWeightsAll;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelDiagramsNNs;
    private javax.swing.JPanel panelDiagramsNNsInside;
    private javax.swing.JPanel panelErrorMeasures;
    private javax.swing.JPanel panelErrorMeasuresAll;
    private javax.swing.JTabbedPane panelEverything;
    private javax.swing.JPanel panelForecastValsAll;
    private javax.swing.JPanel panelHoltInside;
    private javax.swing.JPanel panelHoltIntDistance;
    private javax.swing.JPanel panelHoltIntPercentTrain;
    private javax.swing.JPanel panelHoltInt_center;
    private javax.swing.JPanel panelHoltInt_radius;
    private javax.swing.JPanel panelHoltPercentTrain;
    private javax.swing.JPanel panelHoltWintersInside;
    private javax.swing.JPanel panelHoltWintersIntDistance;
    private javax.swing.JPanel panelHoltWintersIntPercentTrain;
    private javax.swing.JPanel panelHoltWintersInt_center;
    private javax.swing.JPanel panelHoltWintersInt_radius;
    private javax.swing.JPanel panelHoltWintersPercentTrain;
    private javax.swing.JPanel panelIntMLPPercentTrain;
    private javax.swing.JPanel panelIntTS;
    private javax.swing.JPanel panelIntervalHoltDistance;
    private javax.swing.JPanel panelIntervalHoltMain;
    private javax.swing.JPanel panelIntervalHoltPercentTrain;
    private javax.swing.JPanel panelKNNPercTrain;
    private javax.swing.JPanel panelMAvgMain;
    private javax.swing.JPanel panelMLPPercentTrain;
    private javax.swing.JPanel panelMLPintPercentTrain;
    private javax.swing.JPanel panelMLPintSettingsDistance;
    private javax.swing.JPanel panelModelDescriptionsAll;
    private javax.swing.JPanel panelPlotImage;
    private javax.swing.JPanel panelPredictionIntervals;
    private javax.swing.JPanel panelPredictionIntervalsAll;
    private javax.swing.JPanel panelRBFPercentTrain;
    private javax.swing.JPanel panelRBFintPercentTrain;
    private javax.swing.JPanel panelRBFintSettingsDistance;
    private javax.swing.JPanel panelResidualsAll;
    private javax.swing.JPanel panelRunOutside;
    private javax.swing.JPanel panelSESintDistance;
    private javax.swing.JPanel panelSESintPercentTrain;
    private javax.swing.JPanel panelSESint_center;
    private javax.swing.JPanel panelSESint_radius;
    private javax.swing.JPanel panelSESmain;
    private javax.swing.JPanel panelSESpercentTrain;
    private javax.swing.JPanel panelSettingsARIMAMain;
    private javax.swing.JPanel panelSettingsBNNinside;
    private javax.swing.JPanel panelSettingsBNNint_center;
    private javax.swing.JPanel panelSettingsBNNint_radius;
    private javax.swing.JPanel panelSettingsHybridDistance;
    private javax.swing.JPanel panelSettingsHybridPercentTrain;
    private javax.swing.JPanel panelSettingsHybrid_centerMain;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_ARIMA;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_BNN;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_Holt;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_KNNFNN;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_KNNkknn;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_MLPnnet;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_MLPnnetar;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_RBF;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_SES;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_ARIMA;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_BNN;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_Holt;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_KNNFNN;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_KNNkknn;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_MLPnnet;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_MLPnnetar;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_RBF;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_SES;
    private javax.swing.JPanel panelSettingsIntervalMLPMode;
    private javax.swing.JPanel panelSettingsIntervalMLPModeCcode;
    private javax.swing.JPanel panelSettingsIntervalMLPModeNeuralnet;
    private javax.swing.JPanel panelSettingsKNNoptions;
    private javax.swing.JPanel panelSettingsKNNoptions_FNN;
    private javax.swing.JPanel panelSettingsKNNoptions_custom;
    private javax.swing.JPanel panelSettingsKNNoptions_kknn;
    private javax.swing.JPanel panelSettingsKNNoptions_myown;
    private javax.swing.JPanel panelSettingsMLPPackage;
    private javax.swing.JPanel panelSettingsMLPPackage_neuralnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnetar;
    private javax.swing.JPanel panelSettingsMLPintPackage;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet_center;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet_radius;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar_center;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar_radius;
    private javax.swing.JPanel panelSettingsMethodsHolt;
    private javax.swing.JPanel panelSettingsMethodsHoltInt;
    private javax.swing.JPanel panelSettingsMethodsHoltWinters;
    private javax.swing.JPanel panelSettingsMethodsHoltWintersInt;
    private javax.swing.JPanel panelSettingsMethodsIntervalHolt;
    private javax.swing.JPanel panelSettingsMethodsMAvg;
    private javax.swing.JPanel panelSettingsMethodsSES;
    private javax.swing.JPanel panelSettingsMethodsSESint;
    private javax.swing.JPanel panelSettingsMethodsVARint;
    private javax.swing.JPanel panelSettingsRBFMain;
    private javax.swing.JPanel panelSettingsRBFint_center;
    private javax.swing.JPanel panelSettingsRBFint_radius;
    private javax.swing.JPanel panelTestsOutside;
    private javax.swing.JPanel panelTransform;
    private javax.swing.JPanel panelVARintDistance;
    private javax.swing.JPanel panelVARintInside;
    private javax.swing.JPanel panelVARintInsideBecause;
    private javax.swing.JPanel panelVARintPercentTrain;
    private javax.swing.JRadioButton radioButtonRunFakeIntCenterRadius;
    private javax.swing.JRadioButton radioButtonRunFakeIntLowerUpper;
    private javax.swing.JScrollPane scrollPaneData;
    private javax.swing.JScrollPane scrollPanePredictionIntervals;
    private javax.swing.JScrollPane scrollPane_panelSettingsHybrid_centerMain_MLPnnet;
    private javax.swing.JScrollPane scrollPane_panelSettingsHybrid_radiusMain_MLPnnet;
    private javax.swing.JScrollPane scrollPane_panelSettingsMLPPackage_nnet;
    private javax.swing.JScrollPane scrollPane_panelSettingsMLPintPackage_nnet_center;
    private javax.swing.JScrollPane scrollPane_panelSettingsMLPintPackage_nnet_radius;
    private javax.swing.JTabbedPane tabbedPaneDiagramsNNs;
    private javax.swing.JTextField textFieldAggregateToITSevery;
    private javax.swing.JTextField textFieldNumNetsToTrainMLPint;
    private javax.swing.JTextField textFieldNumNetworksToTrainBNNint;
    private javax.swing.JTextField textFieldNumNetworksToTrainRBFint;
    private javax.swing.JTextField textFieldRunDataRangeFrom;
    private javax.swing.JTextField textFieldRunDataRangeTo;
    private javax.swing.JTextField textFieldRunNumForecasts;
    private javax.swing.JTextField textFieldRunRMSSESeasonality;
    // End of variables declaration//GEN-END:variables

    private File loadedFile;
    private DialogLbUbCenterRadius dialogLBUBCenterRadius;
    private JTable errorMeasuresLatest_CTS = new JTable(new ErrorMeasuresTableModel_CTS(new ArrayList<>()));
    private JTable errorMeasuresLatest_IntTS = new JTable(new ErrorMeasuresTableModel_ITS((new ArrayList<>())));
    private JTable forecastValuesLatest;
    private JTable residualsTableLatest;
    private List<IntervalNamesCentreRadius> listITSPlotCentreRadius = new ArrayList<>();
    private List<IntervalNamesLowerUpper> listITSPlotLowerUpper = new ArrayList<>();
    private boolean continueWithTooManyModels = true;
    
    public void setContinueWithTooManyModels(boolean continueWithTooManyModels) {
        this.continueWithTooManyModels = continueWithTooManyModels; //TODO toto tiez zavana skaredym dizajnom, prerobit
    }

    public void drawPlotGeneral(boolean drawNew, String plotFunction, String additionalArgs) {
        //TODO mozno refaktor a vyhodit do PlotDrawera - aby tam bolo vsetko kreslenie grafov
        //String colname = comboBoxColnames.getSelectedItem().toString();
        List<String> colnames = (((CTSSubPanel)panelCTS).getListColnames()).getSelectedValuesList();
        
        List<DefaultPlottable> plottables = new ArrayList<>();
        for (String col : colnames) {
            DefaultPlottable p = new DefaultPlottable(col, null, col);
            plottables.add(p);
        }
        
        drawPlotGeneral(drawNew, plotFunction, additionalArgs, plottables);
        
        //mean, standard deviation, median
        ((CTSSubPanel)panelCTS).getTextAreaPlotBasicStats().setText(AnalysisUtils.getBasicStats(colnames));
    }
    
    public void drawPlotGeneral(boolean drawNew, String plotFunction, String additionalArgs, List<DefaultPlottable> plottables) {
        //TODO mozno refaktor a vyhodit do PlotDrawera - aby tam bolo vsetko kreslenie grafov
        //String colname = comboBoxColnames.getSelectedItem().toString();
        
        //TODO refactor? - tie basicStats by sa nemuseli ani prepocitavat, ak sa len prefarbuje
        PlotDrawer.drawPlotGeneral(drawNew, new CallParamsDrawPlotGeneral(((PlotSubPanel)panelPlotImage).getListPlotLegend(), 
                PlotDrawer.getDrawNowToThisGDBufferedPanel(), ((PlotSubPanel)panelPlotImage).getPanelPlot().getWidth(),
                ((PlotSubPanel)panelPlotImage).getPanelPlot().getHeight(), plottables, plotFunction, additionalArgs));
        ((PlotSubPanel)panelPlotImage).getButtonPlotExportPlot().setEnabled(true);
    }
    
    public <T extends Params> void setParamsGeneral(Class<T> classss, List<T> resultList) {
        SettingsPanel.setSomethingList(classss, resultList, "setNumForecasts", 
                Integer.class, new ArrayList<>(FieldsParser.parseIntegers(textFieldRunNumForecasts).subList(0, 1))); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(classss, resultList, "setDataRangeFrom",
                Integer.class, new ArrayList<>(FieldsParser.parseIntegers(textFieldRunDataRangeFrom).subList(0, 1))); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(classss, resultList, "setDataRangeTo",
                Integer.class, new ArrayList<>(FieldsParser.parseIntegers(textFieldRunDataRangeTo).subList(0, 1))); //multiple vals not supported; will work with the first
        Integer seasonality = 0;
        if (checkBoxRunIncludeRMSSE.isSelected()) {
            seasonality = Integer.parseInt(textFieldRunRMSSESeasonality.getText());
        }
        SettingsPanel.setSomethingOneValue(classss, resultList, "setSeasonality",
                Integer.class, seasonality);
    }
    
    private List<HybridParams> getParamsHybrid() throws IllegalArgumentException {
        HybridParams par = new HybridParams();
        List<HybridParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        switch (Model.myValueOf(comboBoxSettingsHybridMethod_center.getSelectedItem().toString())) {
            case NNETAR:
                List<NnetarParams> resultListCenterNnetar = NnetarParams.getParamsNnetar(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_MLPnnetar);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        NnetarParams.class, resultListCenterNnetar);
                break;
            case NNET:
                List<NnetParams> resultListCenterNnet = NnetParams.getParamsNnet(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_MLPnnet);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        NnetParams.class, resultListCenterNnet);
                break;
            case RBF:
                List<RBFParams> resultListCenterRBF = RBFParams.getParamsRBF(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_RBF);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        RBFParams.class, resultListCenterRBF);
                break;
            case ARIMA:
                List<ArimaParams> resultListCenterARIMA = ArimaParams.getParamsArima(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_ARIMA);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        ArimaParams.class, resultListCenterARIMA);
                break;
            case KNN_FNN:
                List<KNNfnnParams> resultListCenterKNNFNN = KNNfnnParams.getParamsKNNfnn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_KNNFNN);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        KNNfnnParams.class, resultListCenterKNNFNN);
                break;
            case KNN_KKNN:
                List<KNNkknnParams> resultListCenterKNNkknn = KNNkknnParams.getParamsKNNkknn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_KNNkknn);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        KNNkknnParams.class, resultListCenterKNNkknn);
                break;
            case SES:
                List<SESParams> resultListCenterSES = SESParams.getParamsSES(panelSettingsHybridPercentTrain, 
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_SES);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        SESParams.class, resultListCenterSES);
                break;
            case HOLT:
                List<HoltParams> resultListCenterHolt = HoltParams.getParamsHolt(panelSettingsHybridPercentTrain, 
                        panelSettingsHybrid_centerMain_Holt, comboBoxRunFakeIntCenter);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        HoltParams.class, resultListCenterHolt);
                break;
            case BNN:
                List<BNNParams> resultListCenterBNN = BNNParams.getParamsBNN(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_BNN);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        BNNParams.class, resultListCenterBNN);
                break;
            default:
                //do not do anything, this should never happen. maybe throw an exception? 
                break;
        }
        
        
        
        switch (Model.myValueOf(comboBoxSettingsHybridMethod_radius.getSelectedItem().toString())) {
            case NNETAR:
                List<NnetarParams> resultListRadiusNnetar = NnetarParams.getParamsNnetar(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_MLPnnetar);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        NnetarParams.class, resultListRadiusNnetar);
                break;
            case NNET:
                List<NnetParams> resultListRadiusNnet = NnetParams.getParamsNnet(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_MLPnnet);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        NnetParams.class, resultListRadiusNnet);
                break;
            case RBF:
                List<RBFParams> resultListRadiusRBF = RBFParams.getParamsRBF(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_RBF);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        RBFParams.class, resultListRadiusRBF);
                break;
            case ARIMA:
                List<ArimaParams> resultListRadiusARIMA = ArimaParams.getParamsArima(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_ARIMA);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        ArimaParams.class, resultListRadiusARIMA);
                break;
            case KNN_FNN:
                List<KNNfnnParams> resultListRadiusKNNFNN = KNNfnnParams.getParamsKNNfnn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_KNNFNN);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        KNNfnnParams.class, resultListRadiusKNNFNN);
                break;
            case KNN_KKNN:
                List<KNNkknnParams> resultListRadiusKNNkknn = KNNkknnParams.getParamsKNNkknn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_KNNkknn);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        KNNkknnParams.class, resultListRadiusKNNkknn);
                break;
            case SES:
                List<SESParams> resultListRadiusSES = SESParams.getParamsSES(panelSettingsHybridPercentTrain, 
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_SES);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        SESParams.class, resultListRadiusSES);
                break;
            case HOLT:
                List<HoltParams> resultListRadiusHolt = HoltParams.getParamsHolt(panelSettingsHybridPercentTrain, 
                        panelSettingsHybrid_radiusMain_Holt, comboBoxRunFakeIntRadius);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        HoltParams.class, resultListRadiusHolt);
                break;
            case BNN:
                List<BNNParams> resultListRadiusBNN = BNNParams.getParamsBNN(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_BNN);
                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        BNNParams.class, resultListRadiusBNN);
                break;
            default:
                //do not do anything, this should never happen. maybe throw an exception? 
                break;
        }
        
        ((DistanceSettingsPanel)panelSettingsHybridDistance).setSpecificParams(HybridParams.class, resultList);
        SettingsPanel.setSomethingList(HybridParams.class, resultList, "setNumNetsToTrain",
                Integer.class, FieldsParser.parseIntegers(textFieldNumNetworksToTrainRBFint));
        
        return resultList;
    }
    
    public void addPlotITS_CentreRadius(IntervalNamesCentreRadius interval) {
        listITSPlotCentreRadius.add(interval);
        ((DefaultListModel)(listPlotITSspecs.getModel())).addElement(interval);
    }
    
    public void addPlotITS_LowerUpper(IntervalNamesLowerUpper interval) {
        listITSPlotLowerUpper.add(interval);
        ((DefaultListModel)(listPlotITSspecs.getModel())).addElement(interval);
    }
    
    private void drawTablesErrorMeasures(List<TrainAndTestReportCrisp> rCTS,
                                         List<TrainAndTestReportInterval> rIntTS,
                                         List<TrainAndTestReport> addedReports) {
        panelErrorMeasures.removeAll();
        JTabbedPane tabbedPaneTablesErrors = new JTabbedPane(JTabbedPane.TOP);
        tabbedPaneTablesErrors.setSize(panelErrorMeasures.getWidth(), panelErrorMeasures.getHeight());
        
        List<TrainAndTestReport> reportsCTS = new ArrayList<>();
        reportsCTS.addAll(rCTS);
        List<TrainAndTestReport> reportsIntTS = new ArrayList<>();
        reportsIntTS.addAll(rIntTS);
        for (TrainAndTestReport r : addedReports) {
            if (r instanceof TrainAndTestReportCrisp) {
                reportsCTS.add(r);
            } else if (r instanceof TrainAndTestReportInterval) {
                reportsIntTS.add(r);
            }
        }
        
        if ((! reportsCTS.isEmpty()) && (! reportsIntTS.isEmpty())) { //kresli obe
            final JTable errorMeasuresTable_CTS = new JTable();
            errorMeasuresTable_CTS.setModel(new ErrorMeasuresTableModel_CTS(reportsCTS));
            errorMeasuresTable_CTS.setDefaultRenderer(Object.class, new ErrorTableCellRenderer());
            errorMeasuresTable_CTS.setTableHeader(null);
            errorMeasuresTable_CTS.setVisible(true);

            JScrollPane scrollPaneErrorMeasuresCTS = new JScrollPane(errorMeasuresTable_CTS);
            tabbedPaneTablesErrors.addTab("CTS", scrollPaneErrorMeasuresCTS);
            errorMeasuresTable_CTS.addMouseListener(new MouseListener() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        //pozor, -1! pretoze 
                        int selectedRow = errorMeasuresTable_CTS.getSelectedRow();
                        ((ErrorMeasuresTableModel_CTS)errorMeasuresTable_CTS.getModel()).hideRow(selectedRow);
                    }
                }
                
                @Override
                public void mousePressed(MouseEvent e) { }
                @Override
                public void mouseReleased(MouseEvent e) { }
                @Override
                public void mouseEntered(MouseEvent e) { }
                @Override
                public void mouseExited(MouseEvent e) { }
            });
            errorMeasuresLatest_CTS = errorMeasuresTable_CTS; //and save it for possible future export


            final JTable errorMeasuresTable_ITS = new JTable();
            errorMeasuresTable_ITS.setModel(new ErrorMeasuresTableModel_ITS(reportsIntTS));
            errorMeasuresTable_ITS.setDefaultRenderer(Object.class, new ErrorTableCellRenderer());
            errorMeasuresTable_ITS.setTableHeader(null);
            errorMeasuresTable_ITS.setVisible(true);

            JScrollPane scrollPaneErrorMeasuresITS = new JScrollPane(errorMeasuresTable_ITS);
            tabbedPaneTablesErrors.addTab("ITS", scrollPaneErrorMeasuresITS);
            errorMeasuresTable_ITS.addMouseListener(new MouseListener() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        //pozor, -1! pretoze 
                        int selectedRow = errorMeasuresTable_ITS.getSelectedRow();
                        ((ErrorMeasuresTableModel_ITS)errorMeasuresTable_ITS.getModel()).hideRow(selectedRow);
                    }
                }
                
                @Override
                public void mousePressed(MouseEvent e) { }
                @Override
                public void mouseReleased(MouseEvent e) { }
                @Override
                public void mouseEntered(MouseEvent e) { }
                @Override
                public void mouseExited(MouseEvent e) { }
            });
            errorMeasuresLatest_IntTS = errorMeasuresTable_ITS; //and save it for possible future export
        } else {
            if (! reportsCTS.isEmpty()) { //takze IntTS je empty, CTS moze zaplnit cele miesto
                final JTable errorMeasuresTable_CTS = new JTable();
                errorMeasuresTable_CTS.setModel(new ErrorMeasuresTableModel_CTS(reportsCTS));
                errorMeasuresTable_CTS.setDefaultRenderer(Object.class, new ErrorTableCellRenderer());
                errorMeasuresTable_CTS.setTableHeader(null);
                errorMeasuresTable_CTS.setVisible(true);

                JScrollPane scrollPaneErrorMeasuresCTS = new JScrollPane(errorMeasuresTable_CTS);
                tabbedPaneTablesErrors.addTab("CTS", scrollPaneErrorMeasuresCTS);
                errorMeasuresTable_CTS.addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            //pozor, -1! pretoze 
                            int selectedRow = errorMeasuresTable_CTS.getSelectedRow();
                            ((ErrorMeasuresTableModel_CTS)errorMeasuresTable_CTS.getModel()).hideRow(selectedRow);
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) { }
                    @Override
                    public void mouseReleased(MouseEvent e) { }
                    @Override
                    public void mouseEntered(MouseEvent e) { }
                    @Override
                    public void mouseExited(MouseEvent e) { }
                });
                errorMeasuresLatest_CTS = errorMeasuresTable_CTS; //and save it for possible future export
            } else {
                if (! reportsIntTS.isEmpty()) { //CTS je empty, ITS moze zaplnit cele miesto
                    final JTable errorMeasuresTable_ITS = new JTable();
                    errorMeasuresTable_ITS.setModel(new ErrorMeasuresTableModel_ITS(reportsIntTS));
                    errorMeasuresTable_ITS.setDefaultRenderer(Object.class, new ErrorTableCellRenderer());
                    errorMeasuresTable_ITS.setTableHeader(null);
                    errorMeasuresTable_ITS.setVisible(true);

                    JScrollPane scrollPaneErrorMeasuresITS = new JScrollPane(errorMeasuresTable_ITS);
                    tabbedPaneTablesErrors.addTab("ITS", scrollPaneErrorMeasuresITS);
                    errorMeasuresTable_ITS.addMouseListener(new MouseListener() {

                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2) {
                                //pozor, -1! pretoze 
                                int selectedRow = errorMeasuresTable_ITS.getSelectedRow();
                                ((ErrorMeasuresTableModel_ITS)errorMeasuresTable_ITS.getModel()).hideRow(selectedRow);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) { }
                        @Override
                        public void mouseReleased(MouseEvent e) { }
                        @Override
                        public void mouseEntered(MouseEvent e) { }
                        @Override
                        public void mouseExited(MouseEvent e) { }
                    });
                    errorMeasuresLatest_IntTS = errorMeasuresTable_ITS; //and save it for possible future export
                } //else do not draw anything
            }
        }
        
        tabbedPaneTablesErrors.setVisible(true);
        panelErrorMeasures.add(tabbedPaneTablesErrors);
        
        panelErrorMeasures.repaint();
   }

    private void showDialogTooManyModelsInCase(int paramsSize, Model modelName) {
        if (paramsSize > Utils.REASONABLY_MANY_MODELS) {
            DialogTooManyModels dialogTooManyModels = new DialogTooManyModels(this, true, paramsSize, modelName);
            dialogTooManyModels.setVisible(true);
        }
    }

    public void setPlotRanges(int sizeCTS, int sizeIntTS) { //TODO presunut do PlotSubPanela
        if (sizeCTS == 0) {
            groupZoomControlsCTS.disableAll();
        } else {
            groupZoomControlsCTS.enableAll();
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSXfrom().setText("" + PlotStateKeeper.getLastDrawnCrispXmin());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSXto().setText("" + PlotStateKeeper.getLastDrawnCrispXmax());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSYfrom().setText("" + PlotStateKeeper.getLastDrawnCrispYmin());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSYto().setText("" + PlotStateKeeper.getLastDrawnCrispYmax());
        }
        
        if (sizeIntTS == 0) {
            groupZoomControlsIntTS.disableAll();
        } else {
            groupZoomControlsIntTS.enableAll();
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSXfrom().setText("" + PlotStateKeeper.getLastDrawnIntXmin());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSXto().setText("" + PlotStateKeeper.getLastDrawnIntXmax());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSYfrom().setText("" + PlotStateKeeper.getLastDrawnIntYmin());
            ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSYto().setText("" + PlotStateKeeper.getLastDrawnIntYmax());
        }
    }

    private void outputPredictionIntervals(List<TrainAndTestReportCrisp> reportsCTS) {
        List<TrainAndTestReportCrisp> reportsWithPredInts = new ArrayList<>();
        
        for (TrainAndTestReportCrisp r : reportsCTS) {
            if (r.getPredictionIntervalsLowers().length > 0) {
                reportsWithPredInts.add(r);
            }
        }
        
        if (! reportsWithPredInts.isEmpty()) {
            JTable tablePredictionInts = new JTable(new PredictionIntsTableModel(reportsWithPredInts));
            tablePredictionInts.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumn firstColumn = tablePredictionInts.getColumnModel().getColumn(0);
            firstColumn.setMinWidth(10);
            firstColumn.setMaxWidth(50);
            tablePredictionInts.setVisible(true);
            
            panelPredictionIntervals.removeAll();
            scrollPanePredictionIntervals.setViewportView(tablePredictionInts);
            panelPredictionIntervals.add(scrollPanePredictionIntervals);
            panelPredictionIntervals.repaint();
            
            panelPredictionIntervalsAll.setVisible(true);
            panelEverything.addTab("Prediction intervals", panelPredictionIntervalsAll);
        } else {
            panelEverything.remove(panelPredictionIntervalsAll);
        }
    }

    private List<Average> getAllAvgs(List<TrainAndTestReportCrisp> reportsCTS, List<TrainAndTestReportInterval> reportsIntTS) {
        List<Average> avgList = new ArrayList<>();
        avgList.add(new AverageSimple(checkBoxAvgSimpleCTSperM.isSelected(), 
                checkBoxAvgSimpleCTS.isSelected(), checkBoxAvgSimpleIntTSperM.isSelected(),
                checkBoxAvgSimpleIntTS.isSelected()));
        avgList.add(new AverageMDE(checkBoxAvgMDeCTSperM.isSelected(),
                checkBoxAvgMDeCTS.isSelected(), checkBoxAvgMDeIntTSperM.isSelected(),
                checkBoxAvgMDeIntTS.isSelected(), reportsCTS, reportsIntTS));
        avgList.add(new AverageTheilsU(checkBoxAvgTheilsuCTSperM.isSelected(), 
                checkBoxAvgTheilsuCTS.isSelected(), checkBoxAvgTheilsuIntTSperM.isSelected(), 
                checkBoxAvgTheilsuIntTS.isSelected(), reportsCTS, reportsIntTS));
        avgList.add(new AverageCoverageEfficiency(checkBoxAvgCvgEffIntTSperM.isSelected(), 
                checkBoxAvgCvgEffIntTS.isSelected(), reportsIntTS));
        avgList.add(new AverageEqCenterEqLogRadius(checkBoxAvgCenterLogRadiusIntTSperM.isSelected(), 
                checkBoxAvgCenterLogRadiusIntTS.isSelected()));
        avgList.add(new Median(checkBoxAvgMedianCTSperM.isSelected(), checkBoxAvgMedianCTS.isSelected(),
                checkBoxAvgMedianIntTSperM.isSelected(), checkBoxAvgMedianIntTS.isSelected()));
        avgList.add(new AverageEigenvalsPCA(false, false, false, checkBoxAvgEigenvalsPCAIntTS.isSelected(), reportsIntTS));
        
        return avgList;
    }

    private void outputComputedWeights() {
        if (checkBoxAvgONLY.isEnabled()) { //hack; tj aspon jeden avg bol pocitany
            panelCombinationWeights.removeAll();
            
            JTabbedPane tabbedPaneComputedWeights = new JTabbedPane(JTabbedPane.TOP);
            tabbedPaneComputedWeights.setSize(panelCombinationWeights.getWidth(), panelCombinationWeights.getHeight());
            
            for (Average avg : ((CallParamsDrawPlots)PlotStateKeeper.getLastCallParams()).getAvgConfig().getAvgs()) {
                if (! avg.getAllWeightsCrisp().isEmpty()) {
                    JTable tableComputedWeightsCTS = new JTable(new CombinationWeightsTableModel(avg.getAllWeightsCrisp()));
                    tableComputedWeightsCTS.setVisible(true);
                    JScrollPane scrollPaneComputedWeightsCTS = new JScrollPane();
                    scrollPaneComputedWeightsCTS.setViewportView(tableComputedWeightsCTS);
                    tabbedPaneComputedWeights.addTab(avg.getName(), scrollPaneComputedWeightsCTS);
                }
                
                if (! avg.getAllWeightsInterval().isEmpty()) {
                    JTable tableComputedWeightsIntTS = new JTable(new CombinationWeightsTableModel(avg.getAllWeightsInterval()));
                    tableComputedWeightsIntTS.setVisible(true);
                    JScrollPane scrollPaneComputedWeightsIntTS = new JScrollPane();
                    scrollPaneComputedWeightsIntTS.setViewportView(tableComputedWeightsIntTS);
                    tabbedPaneComputedWeights.addTab(avg.getName(), scrollPaneComputedWeightsIntTS);
                }
            }
            
            panelCombinationWeights.add(tabbedPaneComputedWeights);
            panelCombinationWeights.setVisible(true);
            panelCombinationWeights.repaint();
            
            panelCombinationWeightsAll.setVisible(true);
            panelEverything.addTab("Combination weights", panelCombinationWeightsAll);
            panelCombinationWeightsAll.repaint();
        } else {
            panelEverything.remove(panelCombinationWeightsAll);
        }
    }

    private void fillGUIelementsWithNewData() { //TODO pridat observer na polia v dataTableModele?
        cleanGUIelements();
        
        textFieldRunDataRangeTo.setText("" + DataTableModel.getInstance().getRowCount());
        for (String colname : DataTableModel.getInstance().getColnames()) {
            ((DefaultListModel)((((CTSSubPanel)panelCTS).getListColnames()).getModel())).addElement(colname);
            ((DefaultListModel)(listColnamesTransform.getModel())).addElement(colname);
            ((DefaultListModel)(((TestsSubPanel)panelTestsOutside).getListColnamesTests().getModel())).addElement(colname);
            comboBoxColnamesRun.addItem(colname);
            comboBoxRunFakeIntCenter.addItem(colname);
            comboBoxRunFakeIntRadius.addItem(colname);
            comboBoxRunFakeIntLower.addItem(colname);
            comboBoxRunFakeIntUpper.addItem(colname);
        }
        DialogAddIntervalExplanatoryVar.setColNames(DataTableModel.getInstance().getColnames());
        DialogAddIntervalOutputVar.setColNames(DataTableModel.getInstance().getColnames());
        DialogAddCrispExplanatoryVar.setColNames(DataTableModel.getInstance().getColnames());
        VARSettingsPanel.setColNames(DataTableModel.getInstance().getColnames());
//        panelSettingsVARMainInsideBecauseX = new VARSettingsPanel(); //musim ho znovu vytvorit, inak je uz vytvoreny a nema
//                                                       //tam tie colnames.
//        paneSettingsMethodsVAR.removeAll();
//        panelSettingsVARMain.removeAll();
//        panelSettingsVARMain.add(panelSettingsVARMainInsideBecauseX);
//        paneSettingsMethodsVAR.add(panelSettingsVARMain);
//        paneSettingsMethodsVAR.repaint();

        VARintSettingsPanel.setColNames(DataTableModel.getInstance().getColnames());
        panelVARintInside.removeAll();
        panelVARintInsideBecause = new VARintSettingsPanel();
        panelVARintInside.add(panelVARintInsideBecause);
        panelVARintInside.repaint();

        if (! DataTableModel.getInstance().getColnames().isEmpty()) {
            enableAllButtons();
        }
    }

    private void cleanGUIelements() {
        ((DefaultListModel)((((CTSSubPanel)panelCTS).getListColnames()).getModel())).removeAllElements();
        ((DefaultListModel)(listColnamesTransform.getModel())).removeAllElements();
        ((DefaultListModel)(((TestsSubPanel)panelTestsOutside).getListColnamesTests().getModel())).removeAllElements();
        ((DefaultListModel)(listPlotITSspecs.getModel())).removeAllElements();
        comboBoxColnamesRun.removeAllItems();
        comboBoxRunFakeIntCenter.removeAllItems();
        comboBoxRunFakeIntRadius.removeAllItems();
        comboBoxRunFakeIntLower.removeAllItems();
        comboBoxRunFakeIntUpper.removeAllItems();
        
        if (! DataTableModel.getInstance().getColnames().isEmpty()) {
            disableAllButtons();
        }
    }

    private void enableAllButtons() {
        groupButtons.enableAll();
        
        ((IntMLPCcodeSettingsPanel)panelSettingsIntervalMLPModeCcode).enableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFMain).enableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFint_center).enableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFint_radius).enableAllButtons();
        ((RBFSettingsPanel)panelSettingsHybrid_centerMain_RBF).enableAllButtons();
        ((RBFSettingsPanel)panelSettingsHybrid_radiusMain_RBF).enableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPPackage_nnet).enableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPintPackage_nnet_center).enableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPintPackage_nnet_radius).enableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsHybrid_centerMain_MLPnnet).enableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsHybrid_radiusMain_MLPnnet).enableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNinside).enableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNint_center).enableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNint_radius).enableAllButtons();
        ((BNNSettingsPanel)panelSettingsHybrid_centerMain_BNN).enableAllButtons();
        ((BNNSettingsPanel)panelSettingsHybrid_radiusMain_BNN).enableAllButtons();
    }
    
    private void disableAllButtons() {
        groupButtons.disableAll();
        
        ((IntMLPCcodeSettingsPanel)panelSettingsIntervalMLPModeCcode).disableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFMain).disableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFint_center).disableAllButtons();
        ((RBFSettingsPanel)panelSettingsRBFint_radius).disableAllButtons();
        ((RBFSettingsPanel)panelSettingsHybrid_centerMain_RBF).disableAllButtons();
        ((RBFSettingsPanel)panelSettingsHybrid_radiusMain_RBF).disableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPPackage_nnet).disableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPintPackage_nnet_center).disableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsMLPintPackage_nnet_radius).disableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsHybrid_centerMain_MLPnnet).disableAllButtons();
        ((MLPNnetSettingsPanel)panelSettingsHybrid_radiusMain_MLPnnet).disableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNinside).disableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNint_center).disableAllButtons();
        ((BNNSettingsPanel)panelSettingsBNNint_radius).disableAllButtons();
        ((BNNSettingsPanel)panelSettingsHybrid_centerMain_BNN).disableAllButtons();
        ((BNNSettingsPanel)panelSettingsHybrid_radiusMain_BNN).disableAllButtons();
    }
    
    private void writeAllModelDetails(List<TrainAndTestReport> allReports) {
        ((ModelDescriptionsSubPanel) panelModelDescriptionsAll).getTextAreaModelsInfo().setText(AnalysisUtils.getModelDetails(allReports));
    }

    /**
     * ModelForecastJob represents a single job of a model forecasting with given single parameter set.
     * Used for parallelization, executorService is fed with bunch of ModelForecastJob instances.
     */
    private static class ModelForecastJob implements Runnable, Task<TrainAndTestReport> {
        private static final long serialVersionUID = 1L;

        public Forecastable forecastable;
        public Map<String, List<Double>> inputData;
        public Params params;
        public transient List reportList;

        public Model modelName;
        public int paramIdx = 0;
        public int paramTotal = 0;

        // If true a new instance for DataTableModel is set to the singleton.
        // This hack is used to initialize worker with given input data as
        // DataTableModel.getInstance() may still be somewhere in the code.
        // Note that Worker's singleton of DataTableModel is by default empty.
        private transient boolean shouldSetNewDataInstance = true;

        @Override
        public void run() {
            // When executing via executor, do not overwrite data model singleton. Single process.
            shouldSetNewDataInstance = false;
            final TrainAndTestReport report = execute();
            if (report != null) {
                report.setID(Utils.getModelID());
                reportList.add(report);

            } else {
                logger.error("Error: Forecasting for model {} paramIdx {} returned null report", modelName, paramIdx);
            }
        }

        @Override
        public String getTaskId() {
            return modelName + "_" + paramIdx;
        }

        @Override
        public TrainAndTestReport execute() {
            final long curTime = System.currentTimeMillis();
            logger.info("<{} param={} total={} time={} thread={}>",
                    modelName, paramIdx, paramTotal, curTime, Thread.currentThread().getName());

            // Hacking a bit - start REngine if not started.
            // This code is executed on the worker node, need to start engine.
            MyRengine.getRengine();

            // Execute the job
            final TrainAndTestReport report = forecastable.forecast(inputData, params);

            final long compTime = System.currentTimeMillis();
            logger.info("</{} param={} total={} time={} spent={} ms thread={}>",
                    modelName, paramIdx, paramTotal, compTime, compTime - curTime, Thread.currentThread().getName());

            return report;
        }
    }

    /**
     * Handler triggered when a task posted to the worker has een finished.
     * @param task
     * @param jobResult
     */
    @Override
    public void onJobFinished(Task<TrainAndTestReport> task, TrainAndTestReport jobResult) {
        logger.info("Job finished {}, null result: {}", jobResult, jobResult == null);

        // Adding a null object to the concurrent queue causes freeze.
        if (jobResult != null) {
            taskResults.add(jobResult);
        }

        taskProcessed.incrementAndGet();
        logger.info("Job finished {}, resSize: {}, taskProcessed {}",
                task.getTaskId(), taskResults.size(), taskProcessed.get());

        if (taskProcessed.get() == taskToProcess.get()){
            // TODO: when migrating to async, off the main queue, here trigger post-processing.
            logger.info("All jobs were processed");
        }
    }

    /**
     * Blocks until all tasks are finished using RMI server.
     *
     * @param reportsCTS
     * @param reportsIntTS
     */
    private void waitServerTasksFinished(List<TrainAndTestReportCrisp> reportsCTS, List<TrainAndTestReportInterval> reportsIntTS){
        while(true){
            if (taskToProcess.get() <= taskProcessed.get()){
                break;
            }

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                logger.error("Interrupted", e);
                break;
            }
        }

        logger.info("Waiting finished, result size: {}", taskResults.size());

        // TODO: refactor, this is baaaaad, ugly from the ugliest.
        while(!taskResults.isEmpty()){
            final TrainAndTestReport result = taskResults.poll();

            if (result instanceof TrainAndTestReportCrisp){
                reportsCTS.add((TrainAndTestReportCrisp) result);
            } else if (result instanceof TrainAndTestReportInterval){
                reportsIntTS.add((TrainAndTestReportInterval) result);
            } else {
                logger.error("WTF?");
            }
        }
    }

    /**
     * Blocks until all tasks are finished in the executor.
     * @param executor
     */
    private void waitExecutorTasksFinished(ExecutorService executor){
        // Do the job, please.
        // Waits until all all jobs in the executors are finished.
        executor.shutdown();
        try {
            final boolean done = executor.awaitTermination(1, DAYS);

            logger.info("Waiting finished, success: {}", done);
        } catch (InterruptedException e) {
            logger.error("Computation interrupted", e);
        }
    }

    public void runModels(boolean isBatch) {
        Utils.resetModelID();
        final int numThreads = 8;

        groupExportButtons.enableAll();
        
        ///hack: turn off all AVG checkboxes in case the params tried to take values from them.
        //  it is not safe to support average in these settings; there may be too many differences, we cannot check everything
        boolean originalStateCheckboxAvgCTSPerMethod = checkBoxAvgSimpleCTSperM.isSelected();
        boolean originalStateCheckboxAvgCTS = checkBoxAvgSimpleCTS.isSelected();
        boolean originalStateCheckboxAvgIntTSPerMethod = checkBoxAvgSimpleIntTSperM.isSelected();
        boolean originalStateCheckboxAvgIntTS = checkBoxAvgSimpleIntTS.isSelected();
        boolean originalStateCheckboxAvgONLY = checkBoxAvgONLY.isSelected();
        if (isBatch) {
            checkBoxAvgSimpleCTSperM.setSelected(false);
            checkBoxAvgSimpleCTS.setSelected(false);
            checkBoxAvgSimpleIntTSperM.setSelected(false);
            checkBoxAvgSimpleIntTS.setSelected(false);
            checkBoxAvgONLY.setSelected(false);
            //------------end hack, part 1/2
        }

        //vsetky pridaju do zoznamu trainingreports svoje errormeasures a plotcode
        List<TrainAndTestReportCrisp> reportsCTS = new CopyOnWriteArrayList<>();
        List<TrainAndTestReportInterval> reportsIntTS = new CopyOnWriteArrayList<>();

        //najprv prebehnut vsetky BatchLines, ci nahodou niektora nema privela modelov a ci sa teda bude spustat:
        List<AnalysisBatchLine> runOnlyTheseBatchLines = new ArrayList<>();
        for (AnalysisBatchLine l : AnalysisBatchTableModel.getInstance().getAllLines()) {
            int numModels = 0;
            try {
                numModels = l.getNumModels();
            } catch (IllegalArgumentException e) {
                logger.error("Exception", e); // TODO: review logging
            }
            showDialogTooManyModelsInCase(numModels, l.getModel());
            
            if (continueWithTooManyModels) {
                runOnlyTheseBatchLines.add(l);
            }
        }

        //a potom uz ist len cez tie, ktore bud maju malo modelov, alebo bolo potvrdene, ze maju bezat aj s velkym poctom
        // Iterate over list of models and parameters, create model forecasting jobs and feed executor service with them.
        final ExecutorService executor = Executors.newFixedThreadPool(numThreads);
        final long computationTimeStarted = System.currentTimeMillis();
        taskToProcess.set(0);
        taskProcessed.set(0);
        taskResults.clear();
        if (server != null){
            server.checkAllWorkers();
        }

        for (AnalysisBatchLine l : runOnlyTheseBatchLines) {
            Forecastable forecastable = null;

            // a) crisp model
            forecastable = ModelFactory.getCrispModel(l.getModel());
            List reportList = reportsCTS;

            // b) interval model
            if (forecastable == null){
                forecastable = ModelFactory.getIntervalModel(l.getModel());
                reportList = reportsIntTS;
            }

            // c) unknown
            if (forecastable == null){
                logger.error("Unknown model: {}", l.getModel());
                continue;
            }

            List<? extends Params> params = l.getModelParams();

            // Sanity checking for parameter list, should be non-empty.
            if (params == null){
                logger.error("Null parameter list for model: {}", l.getModel());
                continue;
            } else if (params.isEmpty()){
                logger.warn("Empty parameter list for model: {}", l.getModel());
                continue;
            }

            // For each model parameter create a new job and add it to the executor service for the computation.
            int paramCnt = 0;
            for (Params p : params) {
                ModelForecastJob job = new ModelForecastJob();
                job.forecastable = forecastable;
                job.params = p;
                job.inputData = DataTableModel.getInstance().getAllValues(); //TODO potom tomu nedavat ani vsetky stlpce, len potrebne
                job.reportList = reportList;
                job.modelName = l.getModel();
                job.paramIdx = paramCnt++;
                job.paramTotal = params.size();

                if (server != null){
                    logger.info("Submitting job {}, param: {}/{} to RMI server", l.getModel(), job.paramIdx + 1, job.paramTotal);
                    server.enqueueJob(job);

                } else {
                    logger.info("Submitting job {}, param: {}/{} to executor", l.getModel(), job.paramIdx + 1, job.paramTotal);
                    executor.submit(job);
                }

                taskToProcess.getAndIncrement();
            }
        }

        logger.info("Waiting to get all jobs done: {}", taskToProcess.get());
        if (server != null){
            waitServerTasksFinished(reportsCTS, reportsIntTS);

        } else {
            waitExecutorTasksFinished(executor);
        }

        final long computationTime = System.currentTimeMillis() - computationTimeStarted;
        logger.info("Waiting finished, CTS size: {}, interval size: {}, time elapsed {} ms",
                reportsCTS.size(), reportsIntTS.size(), computationTime);


        
        
        //first draw diagrams of NNs, if applicable. the plots need to be drawn second because of the problems
        //  with determining the canvas to export. this way the last canvas can be exported, for it is the plot
        List<TrainAndTestReport> allReports = new ArrayList<>();
        allReports.addAll(reportsCTS);
        allReports.addAll(reportsIntTS);
        
        writeAllModelDetails(allReports);
        
        List<JGDBufferedPanel> diagramPanels = PlotDrawer.drawDiagrams(tabbedPaneDiagramsNNs.getWidth(), tabbedPaneDiagramsNNs.getHeight(), allReports);
        
        tabbedPaneDiagramsNNs.removeAll();
        int i = 0;
        for (JGDBufferedPanel p : diagramPanels) {
            tabbedPaneDiagramsNNs.addTab("Page "+(++i), p);
        }
        panelDiagramsNNsInside.repaint();
        
        //show Forecast plot
        int numForecasts = FieldsParser.parseIntegers(textFieldRunNumForecasts).get(0);
        int from = Integer.parseInt(textFieldRunDataRangeFrom.getText()) - 1;
        int to = Integer.parseInt(textFieldRunDataRangeTo.getText());
        String colname_CTS = comboBoxColnamesRun.getSelectedItem().toString();
        List<TrainAndTestReport> addedReports = PlotDrawer.drawPlots(Const.MODE_DRAW_NEW, Const.MODE_REFRESH_NO, 
                new CallParamsDrawPlots(((PlotSubPanel)panelPlotImage).getListPlotLegend(), 
                        PlotDrawer.getDrawNowToThisGDBufferedPanel(), 
                        ((PlotSubPanel)panelPlotImage).getPanelPlot().getWidth(), ((PlotSubPanel)panelPlotImage).getPanelPlot().getHeight(),
                DataTableModel.getInstance().getDataForColname(colname_CTS), DataTableModel.getInstance().getRowCount(), numForecasts, reportsCTS,
                reportsIntTS, from, to, colname_CTS, 
                new AveragesConfig(getAllAvgs(reportsCTS, reportsIntTS), checkBoxAvgONLY.isSelected())));
        setPlotRanges(reportsCTS.size(), reportsIntTS.size());
        ((PlotSubPanel)panelPlotImage).getButtonPlotExportPlot().setEnabled(true);
        
        allReports = new ArrayList<>(); //we need to refresh allReports, 'cause sth might've been hack-added in drawPlots
        allReports.addAll(reportsCTS);
        allReports.addAll(reportsIntTS);
        allReports.addAll(addedReports);
        
        //show errors
        drawTablesErrorMeasures(reportsCTS, reportsIntTS, addedReports);
        
        //show prediction intervals, if any
        outputPredictionIntervals(reportsCTS);
        
        //show computed weights for combined models, if any
        outputComputedWeights(); //TODO fix, broken
        
        
        
        ///hack: turn on all AVG checkboxes the way they were before so nobody notices
        //  (and so that... happy debugging, suckers :D)
        if (isBatch) {
            checkBoxAvgSimpleCTSperM.setSelected(originalStateCheckboxAvgCTSPerMethod);
            checkBoxAvgSimpleCTS.setSelected(originalStateCheckboxAvgCTS);
            checkBoxAvgSimpleIntTSperM.setSelected(originalStateCheckboxAvgIntTSPerMethod);
            checkBoxAvgSimpleIntTS.setSelected(originalStateCheckboxAvgIntTS);
            checkBoxAvgONLY.setSelected(originalStateCheckboxAvgONLY);
        }
        //------------end hack, part 2/2
        

        //and show forecast values in the other pane
        final JTable forecastValuesTable = new JTable(new ForecastValsTableModel(numForecasts, allReports));
        
        forecastValuesTable.setColumnSelectionAllowed(true);
        forecastValuesTable.setRowSelectionAllowed(false);
        
        forecastValuesTable.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //pozor, -1! pretoze 
                    int selectedCol = forecastValuesTable.getSelectedColumn();
                    ((ForecastValsTableModel)forecastValuesTable.getModel()).hideColumn(selectedCol);
//                    forecastValuesTable.repaint();
                }
            }

            @Override
            public void mousePressed(MouseEvent e) { }
            @Override
            public void mouseReleased(MouseEvent e) { }
            @Override
            public void mouseEntered(MouseEvent e) { }
            @Override
            public void mouseExited(MouseEvent e) { }
        });
        
        forecastValuesTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn firstColumn = forecastValuesTable.getColumnModel().getColumn(0);
        firstColumn.setMinWidth(10);
        firstColumn.setMaxWidth(50);
        forecastValuesTable.setVisible(true);
        forecastValuesLatest = forecastValuesTable;
        ((ForecastValuesSubPanel) panelForecastValsAll).setForecastValuesLatest(forecastValuesLatest);
        ((ForecastValuesSubPanel) panelForecastValsAll).getPanelForecastVals().removeAll();
        ((ForecastValuesSubPanel) panelForecastValsAll).getScrollPaneForecastVals().setViewportView(forecastValuesLatest);
        ((ForecastValuesSubPanel) panelForecastValsAll).getPanelForecastVals().add(((ForecastValuesSubPanel) panelForecastValsAll).getScrollPaneForecastVals());
        ((ForecastValuesSubPanel) panelForecastValsAll).getPanelForecastVals().repaint();
        
        //and show residuals
        if (! allReports.isEmpty()) {
            final JTable residualsTable = new JTable(new ResidualsTableModel(allReports));
            residualsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            residualsTable.setColumnSelectionAllowed(true);
            residualsTable.setRowSelectionAllowed(false);
            
            TableColumn firstCol = residualsTable.getColumnModel().getColumn(0);
            firstCol.setMinWidth(10);
            firstCol.setMaxWidth(50);
            residualsTable.setVisible(true);
            residualsTableLatest = residualsTable;
            ((ResidualsSubPanel) panelResidualsAll).setResidualsTableLatest(residualsTableLatest);
            ((ResidualsSubPanel) panelResidualsAll).getPanelResiduals().removeAll();
            ((ResidualsSubPanel) panelResidualsAll).getScrollPaneResiduals().setViewportView(residualsTableLatest);
            ((ResidualsSubPanel) panelResidualsAll).getPanelResiduals().add(((ResidualsSubPanel) panelResidualsAll).getScrollPaneResiduals());
            ((ResidualsSubPanel) panelResidualsAll).getPanelResiduals().repaint();
        }

        panelEverything.setSelectedComponent(panelPlotImage);
    }
    
    public void addReportToData(TrainAndTestReportCrisp r) {
        AnalysisUtils.addReportToData(r);
        fillGUIelementsWithNewData();
    }
    
    public void addReportToData(TrainAndTestReportInterval r) {
        AnalysisUtils.addReportToData(r);
        fillGUIelementsWithNewData();
    }

    public void convertITStoLBUB(IntervalNamesCentreRadius namesCR) {
        Transformations.convertITStoLBUB(namesCR);
        fillGUIelementsWithNewData();
    }

    public void convertITStoCR(IntervalNamesLowerUpper namesLBUB) {
        Transformations.convertITStoCR(namesLBUB);
        fillGUIelementsWithNewData();
    }

    public void exportTextArea(ActionEvent evt, JButton whichButton, JTextArea whichTextArea) {
        //TODO refactor this out to my own class; it is repeated quite a few times throughout the code
        JFileChooser fileChooser = new OverwriteFileChooser();
        fileChooser.setSelectedFile(new File("analysis.txt"));
        if (evt.getSource() == whichButton) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    File file = fileChooser.getSelectedFile();
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                        String text = whichTextArea.getText();
                        text = text.replace("\n", System.lineSeparator());
                        writer.append(text);
                        writer.flush();
                    } catch (IOException e) {
                        logger.error("IOException", e);
                    }
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                //nothing
            }
        }
    }
    
    //groups
    private final ComponentGroup groupButtons = new ComponentGroup();
    private final ComponentGroup groupExportButtons = new ComponentGroup();
    private final ComponentGroup groupRunControlsCenterRadius = new ComponentGroup();
    private final ComponentGroup groupRunControlsLowerUpper = new ComponentGroup();
    private final ComponentGroup groupZoomControlsCTS = new ComponentGroup();
    private final ComponentGroup groupZoomControlsIntTS = new ComponentGroup();
    
    private final ComponentGroup groupCheckBoxesAvg_withoutAvgONLY = new ComponentGroup();
    
    private void addComponentsToGroups() {
        groupRunControlsCenterRadius.addAll(labelRunFakeIntCenter, labelRunFakeIntRadius, comboBoxRunFakeIntCenter,
                comboBoxRunFakeIntRadius);
        
        groupRunControlsLowerUpper.addAll(labelRunFakeIntLower, labelRunFakeIntUpper, comboBoxRunFakeIntLower,
                comboBoxRunFakeIntUpper);
        
        groupCheckBoxesAvg_withoutAvgONLY.addAll(
                checkBoxAvgSimpleCTS, checkBoxAvgSimpleCTSperM, checkBoxAvgSimpleIntTS, checkBoxAvgSimpleIntTSperM, 
                checkBoxAvgMDeCTS, checkBoxAvgMDeCTSperM, checkBoxAvgMDeIntTS, checkBoxAvgMDeIntTSperM,
                checkBoxAvgTheilsuCTS, checkBoxAvgTheilsuCTSperM, checkBoxAvgTheilsuIntTS, checkBoxAvgTheilsuIntTSperM,
                checkBoxAvgCvgEffIntTS, checkBoxAvgCvgEffIntTSperM,
                checkBoxAvgCenterLogRadiusIntTS, checkBoxAvgCenterLogRadiusIntTSperM,
                checkBoxAvgMedianCTS, checkBoxAvgMedianCTSperM, checkBoxAvgMedianIntTS, checkBoxAvgMedianIntTSperM);
        
        groupZoomControlsCTS.addAll(((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSXfrom(), 
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSXto(), 
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSYfrom(),
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeCTSYto(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotRestoreCTSRangeX(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotRestoreCTSRangeY(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotZoomCTS());
        
        groupZoomControlsIntTS.addAll(((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSXfrom(), 
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSXto(), 
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSYfrom(),
                ((PlotSubPanel)panelPlotImage).getTextFieldPlotRangeIntTSYto(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotRestoreIntTSRangeX(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotRestoreIntTSRangeY(), 
                ((PlotSubPanel)panelPlotImage).getButtonPlotZoomIntTS());
        
        //TODO pridat annotation processor alebo daco, co prejde vsetky JButtony deklarovane v MainFrame a napridava ich do
        //   tejto grupy automaticky
        groupButtons.addAll(((CTSSubPanel) panelCTS).getButtonPlotColname(), buttonTrainAndTest, 
                ((AnalysisBatchSubPanel) panelAnalysisBatch).getButtonRunAnalysisBatch(), buttonSettingsAddToBatch_MLP, 
                buttonSettingsAddToBatch_MLPint, buttonSettingsAddToBatch_intMLP, buttonSettingsAddToBatch_RBF, 
                buttonSettingsAddToBatch_RBFint, buttonSettingsAddToBatch_ARIMA, buttonSettingsAddToBatch_Holt, 
                buttonSettingsAddToBatch_HoltWinters, buttonSettingsAddToBatch_HoltWintersInt, buttonSettingsAddToBatch_Holtint, 
                buttonSettingsAddToBatch_Hybrid, buttonSettingsAddToBatch_IntervalHolt, buttonSettingsAddToBatch_KNN, 
                buttonSettingsAddToBatch_SES, buttonSettingsAddToBatch_SESint, buttonSettingsAddToBatch_VARint, 
                buttonSettingsAddToBatch_BNN, buttonSettingsAddToBatch_BNNint, ((CTSSubPanel) panelCTS).getButtonACF(), 
                ((CTSSubPanel) panelCTS).getButtonPACF(), ((CTSSubPanel) panelCTS).getButtonBasicStats(), 
                ((CTSSubPanel) panelCTS).getButtonBoxplots(), ((CTSSubPanel) panelCTS).getButtonHistograms(), 
                ((CTSSubPanel) panelCTS).getButtonNormProbPlot(), ((TestsSubPanel)panelTestsOutside).getButtonNormalityTests(), 
                ((TestsSubPanel)panelTestsOutside).getButtonStationarityTest(), ((TestsSubPanel)panelTestsOutside).getButtonStructBreaks(),
                ((CTSSubPanel) panelCTS).getButtonExportAnalysisText(), 
                ((TestsSubPanel)panelTestsOutside).getButtonExportTestsPlots(),
                ((TestsSubPanel)panelTestsOutside).getButtonExportTextAreaTests(), buttonDiffSeries, buttonLogTransformSeries, 
                buttonNormalize, buttonRemoveTrend, buttonAggregateToITS, buttonConvertITSLBUBCR, buttonPlotSelectedITS, 
                buttonPlotAllITSScatterplot, buttonPlotAllITSScatterplotMatrix, buttonPlotAddITS, buttonPlotRemoveITS, 
                ((CTSSubPanel) panelCTS).getButtonCTSclearSelection(), buttonITSclearSelection, ((CTSSubPanel) panelCTS).getButtonPCA(), 
                ((TestsSubPanel)panelTestsOutside).getButtonKMOTest(), ((TestsSubPanel)panelTestsOutside).getButtonBartlettsTest(), 
                ((CTSSubPanel) panelCTS).getButtonScreePlot());
        
        groupExportButtons.addAll(buttonRunExportErrorMeasures, ((ForecastValuesSubPanel) panelForecastValsAll).getButtonExportForecastValues(),
                ((ResidualsSubPanel) panelResidualsAll).getButtonExportResiduals());
    }

    public AdmlProviderImpl<TrainAndTestReport> getServer() {
        return server;
    }

    public void setServer(AdmlProviderImpl<TrainAndTestReport> server) {
        this.server = server;
    }

    public JTextField getTextFieldRunDataRangeFrom() {
        return textFieldRunDataRangeFrom;
    }

    public JTextField getTextFieldRunDataRangeTo() {
        return textFieldRunDataRangeTo;
    }

    public JTextField getTextFieldRunNumForecasts() {
        return textFieldRunNumForecasts;
    }

    public JTextArea getTextAreaPlotBasicStats() { //TODO
        return ((CTSSubPanel) panelCTS).getTextAreaPlotBasicStats();
    }

    public void setSelectedComponentPanelEverything(Component selectedPanel) {
        panelEverything.setSelectedComponent(selectedPanel);
    }

    public JPanel getPanelPlotImage() {
        return panelPlotImage;
    }
}
