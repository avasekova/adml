package gui.subpanels;

import analysis.AnalysisUtils;
import gui.MainFrame;
import gui.PlotContainer;
import gui.PlotDrawer;
import gui.filefilters.FileFilterEps;
import gui.filefilters.FileFilterPdf;
import gui.filefilters.FileFilterPng;
import gui.filefilters.FileFilterPs;
import gui.filefilters.RFileFilter;
import gui.files.PlotExtensionFileChooser;
import gui.tablemodels.DataTableModel;
import org.rosuda.javaGD.JGDBufferedPanel;
import utils.MyRengine;

import java.io.File;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JTextArea;

/**
 *
 * @author Andrejka
 */
public class CTSSubPanel extends javax.swing.JPanel implements PlotContainer {

    /**
     * Creates new form CTSSubPanel
     */
    public CTSSubPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPlotColname = new javax.swing.JButton();
        buttonACF = new javax.swing.JButton();
        buttonPACF = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listColnames = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaPlotBasicStats = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        buttonBoxplots = new javax.swing.JButton();
        buttonHistograms = new javax.swing.JButton();
        tabbedPaneAnalysisPlotsCTS = new javax.swing.JTabbedPane();
        buttonNormProbPlot = new javax.swing.JButton();
        buttonExportAnalysisPlotsCTS = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        buttonExportAnalysisText = new javax.swing.JButton();
        buttonBasicStats = new javax.swing.JButton();
        buttonCTSclearSelection = new javax.swing.JButton();
        buttonPCA = new javax.swing.JButton();
        buttonScreePlot = new javax.swing.JButton();

        buttonPlotColname.setText("Plot selected time series");
        buttonPlotColname.setEnabled(false);
        buttonPlotColname.setEnabled(false);
        buttonPlotColname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotColnameActionPerformed(evt);
            }
        });

        buttonACF.setText("Autocorrelation Plot");
        buttonACF.setEnabled(false);
        buttonACF.setEnabled(false);
        buttonACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonACFActionPerformed(evt);
            }
        });

        buttonPACF.setText("Partial Autocorrelation Plot");
        buttonPACF.setEnabled(false);
        buttonPACF.setEnabled(false);
        buttonPACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPACFActionPerformed(evt);
            }
        });

        listColnames.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(listColnames);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(164, 89));

        textAreaPlotBasicStats.setEditable(false);
        textAreaPlotBasicStats.setColumns(20);
        textAreaPlotBasicStats.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        textAreaPlotBasicStats.setLineWrap(true);
        textAreaPlotBasicStats.setRows(5);
        textAreaPlotBasicStats.setFocusable(false);
        textAreaPlotBasicStats.setMaximumSize(new java.awt.Dimension(32767, 32767));
        textAreaPlotBasicStats.setOpaque(false);
        jScrollPane2.setViewportView(textAreaPlotBasicStats);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonBoxplots.setText("Boxplots");
        buttonBoxplots.setEnabled(false);
        buttonBoxplots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBoxplotsActionPerformed(evt);
            }
        });

        buttonHistograms.setText("Histograms");
        buttonHistograms.setEnabled(false);
        buttonHistograms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHistogramsActionPerformed(evt);
            }
        });

        buttonNormProbPlot.setText("Normal probability plot");
        buttonNormProbPlot.setEnabled(false);
        buttonNormProbPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNormProbPlotActionPerformed(evt);
            }
        });

        buttonExportAnalysisPlotsCTS.setText("Export currently shown plot");
        buttonExportAnalysisPlotsCTS.setEnabled(false);
        buttonExportAnalysisPlotsCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportAnalysisPlotsCTSActionPerformed(evt);
            }
        });

        jLabel22.setText("(Broken - only exports the last tab.)");

        buttonExportAnalysisText.setText("Save the contents of the box below:");
        buttonExportAnalysisText.setEnabled(false);
        buttonExportAnalysisText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportAnalysisTextActionPerformed(evt);
            }
        });

        buttonBasicStats.setText("Basic statistics");
        buttonBasicStats.setEnabled(false);
        buttonBasicStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBasicStatsActionPerformed(evt);
            }
        });

        buttonCTSclearSelection.setText("(Clear selection)");
        buttonCTSclearSelection.setEnabled(false);
        buttonCTSclearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCTSclearSelectionActionPerformed(evt);
            }
        });

        buttonPCA.setText("Principal Components Analysis");
        buttonPCA.setEnabled(false);
        buttonPCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPCAActionPerformed(evt);
            }
        });

        buttonScreePlot.setText("Scree plot");
        buttonScreePlot.setEnabled(false);
        buttonScreePlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonScreePlotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1363, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonExportAnalysisText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(buttonPlotColname)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonCTSclearSelection))
                                .addComponent(buttonHistograms)
                                .addComponent(buttonNormProbPlot)
                                .addComponent(buttonBasicStats)
                                .addComponent(buttonPCA)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(buttonACF)
                                        .addComponent(buttonBoxplots))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(buttonScreePlot)
                                        .addComponent(buttonPACF))))
                            .addGap(0, 3, Short.MAX_VALUE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tabbedPaneAnalysisPlotsCTS)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(buttonExportAnalysisPlotsCTS)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel22)
                            .addGap(0, 390, Short.MAX_VALUE)))
                    .addGap(16, 16, 16)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonPlotColname)
                                        .addComponent(buttonCTSclearSelection))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonACF)
                                        .addComponent(buttonPACF))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonBoxplots)
                                        .addComponent(buttonScreePlot))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonHistograms)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonNormProbPlot)
                                    .addGap(18, 18, 18)
                                    .addComponent(buttonBasicStats)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(buttonPCA))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(7, 7, 7)
                            .addComponent(buttonExportAnalysisText)
                            .addGap(9, 9, 9)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonExportAnalysisPlotsCTS)
                                .addComponent(jLabel22))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tabbedPaneAnalysisPlotsCTS)))
                    .addGap(12, 12, 12)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPlotColnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotColnameActionPerformed
        MainFrame.getInstance().drawPlotGeneral(true, "plot.ts", "");
        MainFrame.getInstance().setPlotRanges(1, 0);
    }//GEN-LAST:event_buttonPlotColnameActionPerformed

    private void buttonACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonACFActionPerformed
        PlotDrawer.drawSimpleFctionToGrid("acf", listColnames.getSelectedValuesList(), DataTableModel.getInstance(), tabbedPaneAnalysisPlotsCTS);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonACFActionPerformed

    private void buttonPACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPACFActionPerformed
        PlotDrawer.drawSimpleFctionToGrid("pacf", listColnames.getSelectedValuesList(), DataTableModel.getInstance(), tabbedPaneAnalysisPlotsCTS);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonPACFActionPerformed

    private void buttonBoxplotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBoxplotsActionPerformed
        PlotDrawer.drawSimpleFctionToGrid("boxplot", listColnames.getSelectedValuesList(), DataTableModel.getInstance(), tabbedPaneAnalysisPlotsCTS);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonBoxplotsActionPerformed

    private void buttonHistogramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHistogramsActionPerformed
        PlotDrawer.drawSimpleFctionToGrid("hist", listColnames.getSelectedValuesList(), DataTableModel.getInstance(), tabbedPaneAnalysisPlotsCTS);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonHistogramsActionPerformed

    private void buttonNormProbPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNormProbPlotActionPerformed
        PlotDrawer.drawSimpleFctionToGrid("qqnorm", listColnames.getSelectedValuesList(), DataTableModel.getInstance(), tabbedPaneAnalysisPlotsCTS);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonNormProbPlotActionPerformed

    private void buttonExportAnalysisPlotsCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportAnalysisPlotsCTSActionPerformed
        //idealne by mohlo v buducnosti exportovat vsetky zobrazene taby, ale tam je problem s existujucimi subormi
        //TODO vymysliet
        JFileChooser fileChooser = new PlotExtensionFileChooser();
        fileChooser.setSelectedFile(new File("plotExport.eps"));

        fileChooser.setAcceptAllFileFilterUsed(false); //do not allow "All files"
        fileChooser.addChoosableFileFilter(new FileFilterEps());
        fileChooser.addChoosableFileFilter(new FileFilterPs());
        fileChooser.addChoosableFileFilter(new FileFilterPng());
        fileChooser.addChoosableFileFilter(new FileFilterPdf());

        //TODO aj toto sa opakuje, refactor out
        if (evt.getSource() == buttonExportAnalysisPlotsCTS) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                File plotFile = fileChooser.getSelectedFile();
                MyRengine rengine = MyRengine.getRengine();

                String device = "";
                String ext = "";
                if (fileChooser.getFileFilter() instanceof RFileFilter) {
                    device = ((RFileFilter)fileChooser.getFileFilter()).getDevice();
                    ext = ((RFileFilter)fileChooser.getFileFilter()).getExtension();
                }

                String fileName = plotFile.getPath().replace("\\", "\\\\");
                    if (fileName.contains(".") && (fileName.lastIndexOf('.') < (fileName.length()-1))) {
                        //tipnem si, ze je tam pripona
                        String extCurr = fileName.substring((fileName.lastIndexOf('.')+1), fileName.length()); //vezmem si priponu
                        if (extCurr.equals("eps") || extCurr.equals("ps") || extCurr.equals("png") || extCurr.equals("pdf")) {
                            fileName = fileName.substring(0, fileName.lastIndexOf('.'));
                        } //else to bola nejaka ina cast mena za bodkou
                    }

                    rengine.eval("dev.print(" + device + ", file=\"" + fileName + "." + ext + "\", width=" +
                        ((PlotSubPanel)MainFrame.getInstance().getPanelPlotImage()).getPanelPlot().getWidth() + ", height=" +
                        ((PlotSubPanel)MainFrame.getInstance().getPanelPlotImage()).getPanelPlot().getHeight() + ")");
                    //                    rengine.eval("dev.off()"); //z nejakeho dovodu to "nerefreshuje" nasledujuce ploty, ked to vypnem.
                    break;
                    case JFileChooser.CANCEL_OPTION:
                    default:
                    //nothing
                }
            }
    }//GEN-LAST:event_buttonExportAnalysisPlotsCTSActionPerformed

    private void buttonExportAnalysisTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportAnalysisTextActionPerformed
        MainFrame.getInstance().exportTextArea(evt, buttonExportAnalysisText, textAreaPlotBasicStats);
    }//GEN-LAST:event_buttonExportAnalysisTextActionPerformed

    private void buttonBasicStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBasicStatsActionPerformed
        textAreaPlotBasicStats.setText(AnalysisUtils.getBasicStats(listColnames.getSelectedValuesList()));
    }//GEN-LAST:event_buttonBasicStatsActionPerformed

    private void buttonCTSclearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCTSclearSelectionActionPerformed
        listColnames.setSelectedIndices(new int[]{});
    }//GEN-LAST:event_buttonCTSclearSelectionActionPerformed

    private void buttonPCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPCAActionPerformed
        textAreaPlotBasicStats.setText(AnalysisUtils.getPrincipalComponents(listColnames.getSelectedValuesList()));
    }//GEN-LAST:event_buttonPCAActionPerformed

    private void buttonScreePlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonScreePlotActionPerformed
        List<JGDBufferedPanel> plots = PlotDrawer.drawScreePlot(listColnames.getSelectedValuesList(),
                tabbedPaneAnalysisPlotsCTS.getWidth(), tabbedPaneAnalysisPlotsCTS.getHeight()); //TODO univerzalnejsie, nemusi byt tabbedPaneAnalysisPlotsCTS
        setPlots(plots);
        MainFrame.getInstance().setPlotRanges(0, 0);
        buttonExportAnalysisPlotsCTS.setEnabled(true);
    }//GEN-LAST:event_buttonScreePlotActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonACF;
    private javax.swing.JButton buttonBasicStats;
    private javax.swing.JButton buttonBoxplots;
    private javax.swing.JButton buttonCTSclearSelection;
    private javax.swing.JButton buttonExportAnalysisPlotsCTS;
    private javax.swing.JButton buttonExportAnalysisText;
    private javax.swing.JButton buttonHistograms;
    private javax.swing.JButton buttonNormProbPlot;
    private javax.swing.JButton buttonPACF;
    private javax.swing.JButton buttonPCA;
    private javax.swing.JButton buttonPlotColname;
    private javax.swing.JButton buttonScreePlot;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList<String> listColnames;
    private javax.swing.JTabbedPane tabbedPaneAnalysisPlotsCTS;
    private javax.swing.JTextArea textAreaPlotBasicStats;
    // End of variables declaration//GEN-END:variables

    public JTextArea getTextAreaPlotBasicStats() {
        return textAreaPlotBasicStats;
    }

    public JList<String> getListColnames() {
        return listColnames;
    }

    public JButton getButtonACF() {
        return buttonACF;
    }

    public JButton getButtonBasicStats() {
        return buttonBasicStats;
    }

    public JButton getButtonBoxplots() {
        return buttonBoxplots;
    }

    public JButton getButtonCTSclearSelection() {
        return buttonCTSclearSelection;
    }

    public JButton getButtonExportAnalysisPlotsCTS() {
        return buttonExportAnalysisPlotsCTS;
    }

    public JButton getButtonExportAnalysisText() {
        return buttonExportAnalysisText;
    }

    public JButton getButtonHistograms() {
        return buttonHistograms;
    }

    public JButton getButtonNormProbPlot() {
        return buttonNormProbPlot;
    }

    public JButton getButtonPACF() {
        return buttonPACF;
    }

    public JButton getButtonPCA() {
        return buttonPCA;
    }

    public JButton getButtonPlotColname() {
        return buttonPlotColname;
    }

    public JButton getButtonScreePlot() {
        return buttonScreePlot;
    }


    @Override
    public void setPlots(List<JGDBufferedPanel> plots) {
        tabbedPaneAnalysisPlotsCTS.removeAll();
        int i = 0;
        for (JGDBufferedPanel p : plots) {
            tabbedPaneAnalysisPlotsCTS.addTab("Page "+(++i), p);
        }
        tabbedPaneAnalysisPlotsCTS.repaint(); //TODO ak nestaci, tak this.repaint
    }
}
