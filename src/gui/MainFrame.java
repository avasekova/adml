package gui;

import java.awt.CardLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import models.Forecastable;
import models.Neuralnet;
import models.Nnet;
import models.Nnetar;
import models.TrainAndTestReport;
import params.NeuralnetParams;
import params.NnetParams;
import params.NnetarParams;
import params.Params;
import utils.Utils;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_paramsNnetExclusive = new javax.swing.ButtonGroup();
        panelEverything = new javax.swing.JTabbedPane();
        panelChart = new javax.swing.JPanel();
        comboBoxColnames = new javax.swing.JComboBox();
        buttonPlotColname = new javax.swing.JButton();
        panelPlot = new javax.swing.JPanel();
        buttonACF = new javax.swing.JButton();
        buttonPACF = new javax.swing.JButton();
        panelData = new javax.swing.JPanel();
        scrollPaneData = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        panelAnalysisSettings = new javax.swing.JPanel();
        paneSettingsMethods = new javax.swing.JTabbedPane();
        paneSettingsMethodsMLP = new javax.swing.JPanel();
        jLabelRPkg = new javax.swing.JLabel();
        comboBoxRPackage = new javax.swing.JComboBox();
        panelSettingsMLPPackage = new javax.swing.JPanel();
        panelSettingsMLPPackage_nnetar = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        paramNnetar_textFieldNumNodesHiddenLayer = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        paramNnetar_textFieldNumNonSeasonalLags = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        paramNnetar_textFieldNumSeasonalLags = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        paramNnetar_textFieldNumReps = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        paramNnetar_textFieldLambda = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        paramNnetar_textFieldNumForecasts = new javax.swing.JTextField();
        panelSettingsMLPPackage_neuralnet = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        panelSettingsMLPPackage_nnet = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        paramNnet_comboBoxColnamesInput = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        paramNnet_comboBoxColnamesOutput = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        paramNnet_numNodesHiddenLayer = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        paramNnet_radioButtonLogistic = new javax.swing.JRadioButton();
        paramNnet_radioButtonLeastSqrs = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        paramNnet_radioButtonLoglinSoftmax = new javax.swing.JRadioButton();
        paramNnet_radioButtonCensoredOn = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        paramNnet_checkBoxSkipConn = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        paramNnet_initRange = new javax.swing.JTextField();
        paramNnet_labelInitRangeMirror = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        paramNnet_weightDecay = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        paramNnet_maxit = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        paramNnet_traceOptimization = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        paramNnet_abstol = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        paramNnet_reltol = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabelPercTrain = new javax.swing.JLabel();
        sliderPercentTrain = new javax.swing.JSlider();
        textFieldPercentTrain = new javax.swing.JTextField();
        jLabelPercentSign = new javax.swing.JLabel();
        paneSettingsMethodsARIMA = new javax.swing.JPanel();
        jLabelARIMA = new javax.swing.JLabel();
        panelRunOutside = new javax.swing.JPanel();
        comboBoxColnamesRun = new javax.swing.JComboBox();
        buttonTrainAndTest = new javax.swing.JButton();
        panelSummary = new javax.swing.JPanel();
        jLabelTrainingInfo = new javax.swing.JLabel();
        checkBoxRunMLPnnetar = new javax.swing.JCheckBox();
        checkBoxRunARIMA = new javax.swing.JCheckBox();
        checkBoxRunMLPnnet = new javax.swing.JCheckBox();
        checkBoxRunMLPneuralnet = new javax.swing.JCheckBox();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileLoad = new javax.swing.JMenuItem();
        menuFileExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        buttonGroup_paramsNnetExclusive.add(paramNnet_radioButtonLogistic);
        buttonGroup_paramsNnetExclusive.add(paramNnet_radioButtonLeastSqrs);
        buttonGroup_paramsNnetExclusive.add(paramNnet_radioButtonLoglinSoftmax);
        buttonGroup_paramsNnetExclusive.add(paramNnet_radioButtonCensoredOn);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboBoxColnames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        buttonPlotColname.setText("Plot data");
        buttonPlotColname.setEnabled(false);
        buttonPlotColname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotColnameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPlotLayout = new javax.swing.GroupLayout(panelPlot);
        panelPlot.setLayout(panelPlotLayout);
        panelPlotLayout.setHorizontalGroup(
            panelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 766, Short.MAX_VALUE)
        );
        panelPlotLayout.setVerticalGroup(
            panelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        buttonACF.setText("Autocorrelation Plot");
        buttonACF.setEnabled(false);
        buttonACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonACFActionPerformed(evt);
            }
        });

        buttonPACF.setText("Partial Autocorrelation Plot");
        buttonPACF.setEnabled(false);
        buttonPACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPACFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChartLayout = new javax.swing.GroupLayout(panelChart);
        panelChart.setLayout(panelChartLayout);
        panelChartLayout.setHorizontalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChartLayout.createSequentialGroup()
                        .addComponent(comboBoxColnames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPlotColname)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonACF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPACF))
                    .addComponent(panelPlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(362, Short.MAX_VALUE))
        );
        panelChartLayout.setVerticalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxColnames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPlotColname)
                    .addComponent(buttonACF)
                    .addComponent(buttonPACF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Chart", panelChart);

        jTableData.setModel(dataTableModel);
        scrollPaneData.setViewportView(jTableData);

        javax.swing.GroupLayout panelDataLayout = new javax.swing.GroupLayout(panelData);
        panelData.setLayout(panelDataLayout);
        panelDataLayout.setHorizontalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
        );
        panelDataLayout.setVerticalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );

        panelEverything.addTab("Data", panelData);

        paneSettingsMethods.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jLabelRPkg.setText("R package:");

        comboBoxRPackage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nnetar", "neuralnet", "nnet" }));
        comboBoxRPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRPackageActionPerformed(evt);
            }
        });

        panelSettingsMLPPackage.setLayout(new java.awt.CardLayout());

        jLabel3.setText("Number of nodes in the (single) hidden layer:");

        paramNnetar_textFieldNumNodesHiddenLayer.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {
                if ("<default>".equals(paramNnetar_textFieldNumNodesHiddenLayer.getText())) {
                    paramNnetar_textFieldNumNodesHiddenLayer.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (paramNnetar_textFieldNumNodesHiddenLayer.getText().length() < 1) {
                    paramNnetar_textFieldNumNodesHiddenLayer.setText("<default>");
                }
            }
        });
        paramNnetar_textFieldNumNodesHiddenLayer.setText("<default>");

        jLabel1.setText("Number of non-seasonal lags to be used as inputs:");

        paramNnetar_textFieldNumNonSeasonalLags.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {
                if ("<default>".equals(paramNnetar_textFieldNumNonSeasonalLags.getText())) {
                    paramNnetar_textFieldNumNonSeasonalLags.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (paramNnetar_textFieldNumNonSeasonalLags.getText().length() < 1) {
                    paramNnetar_textFieldNumNonSeasonalLags.setText("<default>");
                }
            }
        });
        paramNnetar_textFieldNumNonSeasonalLags.setText("<default>");
        paramNnetar_textFieldNumNonSeasonalLags.setToolTipText("The default is the optimal number of lags (according to the AIC) for a linear AR(p) model.");

        jLabel2.setText("Number of seasonal lags to be used as inputs:");

        paramNnetar_textFieldNumSeasonalLags.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {
                if ("<default>".equals(paramNnetar_textFieldNumSeasonalLags.getText())) {
                    paramNnetar_textFieldNumSeasonalLags.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (paramNnetar_textFieldNumSeasonalLags.getText().length() < 1) {
                    paramNnetar_textFieldNumSeasonalLags.setText("<default>");
                }
            }
        });
        paramNnetar_textFieldNumSeasonalLags.setText("<default>");

        jLabel4.setText("Number of repetitions:");

        paramNnetar_textFieldNumReps.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {
                if ("<default>".equals(paramNnetar_textFieldNumReps.getText())) {
                    paramNnetar_textFieldNumReps.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (paramNnetar_textFieldNumReps.getText().length() < 1) {
                    paramNnetar_textFieldNumReps.setText("<default>");
                }
            }
        });
        paramNnetar_textFieldNumReps.setText("<default>");

        jLabel5.setText("Lambda (Box-Cox transformation):");

        paramNnetar_textFieldLambda.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {
                if ("<default>".equals(paramNnetar_textFieldLambda.getText())) {
                    paramNnetar_textFieldLambda.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
                if (paramNnetar_textFieldLambda.getText().length() < 1) {
                    paramNnetar_textFieldLambda.setText("<default>");
                }
            }
        });
        paramNnetar_textFieldLambda.setText("<default>");

        jLabel7.setText("Number of forecasts:");

        paramNnetar_textFieldNumForecasts.setText("1");

        javax.swing.GroupLayout panelSettingsMLPPackage_nnetarLayout = new javax.swing.GroupLayout(panelSettingsMLPPackage_nnetar);
        panelSettingsMLPPackage_nnetar.setLayout(panelSettingsMLPPackage_nnetarLayout);
        panelSettingsMLPPackage_nnetarLayout.setHorizontalGroup(
            panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_nnetarLayout.createSequentialGroup()
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(45, 45, 45)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paramNnetar_textFieldNumForecasts)
                    .addComponent(paramNnetar_textFieldLambda, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paramNnetar_textFieldNumReps, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paramNnetar_textFieldNumSeasonalLags, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paramNnetar_textFieldNumNodesHiddenLayer, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(paramNnetar_textFieldNumNonSeasonalLags))
                .addGap(0, 720, Short.MAX_VALUE))
        );
        panelSettingsMLPPackage_nnetarLayout.setVerticalGroup(
            panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_nnetarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(paramNnetar_textFieldNumNodesHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(paramNnetar_textFieldNumNonSeasonalLags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(paramNnetar_textFieldNumSeasonalLags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(paramNnetar_textFieldNumReps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(paramNnetar_textFieldLambda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(paramNnetar_textFieldNumForecasts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(261, Short.MAX_VALUE))
        );

        panelSettingsMLPPackage.add(panelSettingsMLPPackage_nnetar, "panelSettingsMLPPackage_nnetar");

        jLabel6.setText("(TODO)");

        javax.swing.GroupLayout panelSettingsMLPPackage_neuralnetLayout = new javax.swing.GroupLayout(panelSettingsMLPPackage_neuralnet);
        panelSettingsMLPPackage_neuralnet.setLayout(panelSettingsMLPPackage_neuralnetLayout);
        panelSettingsMLPPackage_neuralnetLayout.setHorizontalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_neuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(1017, Short.MAX_VALUE))
        );
        panelSettingsMLPPackage_neuralnetLayout.setVerticalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_neuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(397, Short.MAX_VALUE))
        );

        panelSettingsMLPPackage.add(panelSettingsMLPPackage_neuralnet, "panelSettingsMLPPackage_neuralnet");

        jLabel8.setText("Inputs:");

        paramNnet_comboBoxColnamesInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        jLabel9.setText("Outputs:");

        paramNnet_comboBoxColnamesOutput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        jLabel10.setText("Weights:");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("(not enabled yet)");

        jLabel12.setText("Number of nodes in the (single) hidden layer:");

        jLabel13.setText("Initial parameter vector:");

        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("(not enabled yet)");

        jLabel15.setText("Which parameters to optimize:");

        jLabel16.setForeground(new java.awt.Color(255, 0, 0));
        jLabel16.setText("(not enabled yet. Default: all)");

        jLabel17.setText("Output units:");

        paramNnet_radioButtonLogistic.setSelected(true);
        paramNnet_radioButtonLogistic.setText("Logistic (if not selected, linear)");

        paramNnet_radioButtonLeastSqrs.setText("Maximum conditional likelihood fitting (if not selected, least squares fitting)");

        jLabel18.setText("(not enabled yet)");

        paramNnet_radioButtonLoglinSoftmax.setText("Log-linear model (softmax) (if not selected, maximum conditional likelihood fitting)");

        paramNnet_radioButtonCensoredOn.setText("censored on");

        jLabel19.setText("Add skip-layer connections from input to output:");

        jLabel20.setText("Initial random weights in range:");

        paramNnet_initRange.setText("0.7");
        paramNnet_initRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramNnet_initRangeActionPerformed(evt);
            }
        });

        paramNnet_labelInitRangeMirror.setText("[-" + paramNnet_initRange.getText() + ";");

        jLabel23.setText("]");

        jLabel21.setText("Weight decay:");

        paramNnet_weightDecay.setText("0");

        jLabel24.setText("Max iterations:");

        paramNnet_maxit.setText("100");

        jLabel25.setForeground(new java.awt.Color(255, 0, 0));
        jLabel25.setText("Hessian not included, as well as maxNumOfWeights");

        jLabel26.setText("Trace optimization:");

        paramNnet_traceOptimization.setSelected(true);

        jLabel27.setText("Stop if the fit criterion falls below");

        paramNnet_abstol.setText("0.0001");

        jLabel22.setText("Stop if the optimizer cannot reduce the fit criterion by a factor of at least 1 -");

        paramNnet_reltol.setText("0.00000001");

        jLabel29.setForeground(new java.awt.Color(255, 0, 0));
        jLabel29.setText("TODO: choose data for prediction");

        javax.swing.GroupLayout panelSettingsMLPPackage_nnetLayout = new javax.swing.GroupLayout(panelSettingsMLPPackage_nnet);
        panelSettingsMLPPackage_nnet.setLayout(panelSettingsMLPPackage_nnetLayout);
        panelSettingsMLPPackage_nnetLayout.setHorizontalGroup(
            panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paramNnet_maxit, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(paramNnet_weightDecay))
                        .addGap(789, 789, 789))
                    .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                        .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paramNnet_radioButtonLogistic)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel14)
                                    .addComponent(paramNnet_numNodesHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                        .addComponent(paramNnet_radioButtonLeastSqrs)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18))
                                    .addComponent(paramNnet_radioButtonLoglinSoftmax)
                                    .addComponent(paramNnet_radioButtonCensoredOn)))
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_checkBoxSkipConn))
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_labelInitRangeMirror, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_initRange, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel23))
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paramNnet_abstol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paramNnet_reltol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_comboBoxColnamesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_comboBoxColnamesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addGap(197, 197, 197)
                                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel25))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                        .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel21)
                            .addComponent(jLabel24)
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(paramNnet_traceOptimization)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelSettingsMLPPackage_nnetLayout.setVerticalGroup(
            panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(paramNnet_comboBoxColnamesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(paramNnet_comboBoxColnamesOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(paramNnet_numNodesHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(paramNnet_radioButtonLogistic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paramNnet_radioButtonLeastSqrs)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramNnet_radioButtonLoglinSoftmax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramNnet_radioButtonCensoredOn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                        .addComponent(paramNnet_checkBoxSkipConn)
                        .addGap(18, 18, 18)
                        .addComponent(paramNnet_weightDecay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paramNnet_maxit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(paramNnet_traceOptimization)
                        .addGroup(panelSettingsMLPPackage_nnetLayout.createSequentialGroup()
                            .addComponent(jLabel19)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20)
                                .addComponent(paramNnet_labelInitRangeMirror)
                                .addComponent(paramNnet_initRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel23))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel24)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel26))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(paramNnet_abstol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSettingsMLPPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(paramNnet_reltol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelSettingsMLPPackage.add(panelSettingsMLPPackage_nnet, "panelSettingsMLPPackage_nnet");

        jLabelPercTrain.setText("Portion of data to use for training:");

        sliderPercentTrain.setPaintTicks(true);
        sliderPercentTrain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPercentTrainStateChanged(evt);
            }
        });

        textFieldPercentTrain.setText("" + sliderPercentTrain.getValue());
        textFieldPercentTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldPercentTrainActionPerformed(evt);
            }
        });

        jLabelPercentSign.setText("%");

        javax.swing.GroupLayout paneSettingsMethodsMLPLayout = new javax.swing.GroupLayout(paneSettingsMethodsMLP);
        paneSettingsMethodsMLP.setLayout(paneSettingsMethodsMLPLayout);
        paneSettingsMethodsMLPLayout.setHorizontalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                                .addComponent(jLabelRPkg)
                                .addGap(88, 88, 88)
                                .addComponent(jLabelPercTrain)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPercentSign)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsMLPLayout.setVerticalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelRPkg)
                            .addComponent(jLabelPercTrain))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelPercentSign)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("MLP", paneSettingsMethodsMLP);

        jLabelARIMA.setText("(TODO)");

        javax.swing.GroupLayout paneSettingsMethodsARIMALayout = new javax.swing.GroupLayout(paneSettingsMethodsARIMA);
        paneSettingsMethodsARIMA.setLayout(paneSettingsMethodsARIMALayout);
        paneSettingsMethodsARIMALayout.setHorizontalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelARIMA)
                .addContainerGap(1037, Short.MAX_VALUE))
        );
        paneSettingsMethodsARIMALayout.setVerticalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelARIMA)
                .addContainerGap(465, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("ARIMA", paneSettingsMethodsARIMA);

        javax.swing.GroupLayout panelAnalysisSettingsLayout = new javax.swing.GroupLayout(panelAnalysisSettings);
        panelAnalysisSettings.setLayout(panelAnalysisSettingsLayout);
        panelAnalysisSettingsLayout.setHorizontalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods)
        );
        panelAnalysisSettingsLayout.setVerticalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods)
        );

        panelEverything.addTab("Analysis settings", panelAnalysisSettings);

        comboBoxColnamesRun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        buttonTrainAndTest.setText("Train and Test");
        buttonTrainAndTest.setEnabled(false);
        buttonTrainAndTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrainAndTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSummaryLayout = new javax.swing.GroupLayout(panelSummary);
        panelSummary.setLayout(panelSummaryLayout);
        panelSummaryLayout.setHorizontalGroup(
            panelSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelSummaryLayout.setVerticalGroup(
            panelSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        checkBoxRunMLPnnetar.setSelected(true);
        checkBoxRunMLPnnetar.setText("MLP (nnetar)");

        checkBoxRunARIMA.setText("ARIMA");
        checkBoxRunARIMA.setEnabled(false);

        checkBoxRunMLPnnet.setText("MLP (nnet)");

        checkBoxRunMLPneuralnet.setText("MLP (neuralnet)");
        checkBoxRunMLPneuralnet.setEnabled(false);

        javax.swing.GroupLayout panelRunOutsideLayout = new javax.swing.GroupLayout(panelRunOutside);
        panelRunOutside.setLayout(panelRunOutsideLayout);
        panelRunOutsideLayout.setHorizontalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonTrainAndTest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTrainingInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxRunMLPnnetar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunMLPneuralnet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunMLPnnet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxRunARIMA)
                        .addGap(0, 645, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelRunOutsideLayout.setVerticalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTrainAndTest)
                    .addComponent(jLabelTrainingInfo)
                    .addComponent(checkBoxRunMLPnnetar)
                    .addComponent(checkBoxRunARIMA)
                    .addComponent(checkBoxRunMLPnnet)
                    .addComponent(checkBoxRunMLPneuralnet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Run", panelRunOutside);

        menuFile.setText("File");

        menuFileLoad.setText("Load");
        menuFileLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileLoadActionPerformed(evt);
            }
        });
        menuFile.add(menuFileLoad);

        menuFileExit.setText("Exit");
        menuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menuBarMain.add(menuFile);

        menuEdit.setText("Edit");
        menuBarMain.add(menuEdit);

        setJMenuBar(menuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEverything)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEverything)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileLoadActionPerformed

        //TODO odkomentovat------------------------------------------------------
//        JFileChooser fileChooser = new JFileChooser();
//        fileChooser.setMultiSelectionEnabled(false);
//        FileFilter fileFilterXLS = new FileFilter() {
//
//            @Override
//            public boolean accept(File f) {
//                if (f.isDirectory()) {
//                    return true;
//                } else {
//                    String extension = f.getName().substring(f.getName().lastIndexOf('.'));
//                    return ".xls".equals(extension) || ".xlsx".equals(extension);
//                }
//            }
//            
//            @Override
//            public String getDescription() {
//                return "MS Excel files (.xls, .xlsx)";
//            }
//        };
//        fileChooser.setFileFilter(fileFilterXLS);
//        if (evt.getSource() == menuFileLoad) {
//            switch (fileChooser.showOpenDialog(this)) {
//                case JFileChooser.APPROVE_OPTION:
//                    this.loadedFile = fileChooser.getSelectedFile();
                                               this.loadedFile = new File("C:\\Users\\Andrejka\\Documents\\fi_muni\\phd\\3d_semester-madrid\\w02\\javier redondo\\brent_prices_its_2000_2014.xlsx");
                    dataTableModel.openFile(loadedFile);
                    dataTableModel.fireTableStructureChanged();
                    for (String colname : dataTableModel.getColnames()) {
                        comboBoxColnames.addItem(colname);
                        comboBoxColnamesRun.addItem(colname);
                        paramNnet_comboBoxColnamesInput.addItem(colname);
                        paramNnet_comboBoxColnamesOutput.addItem(colname);
                    }
                    if (! dataTableModel.getColnames().isEmpty()) {
                        buttonPlotColname.setEnabled(true);
                        buttonTrainAndTest.setEnabled(true);
                        buttonACF.setEnabled(true);
                        buttonPACF.setEnabled(true);
                    }
//                    break;
//                case JFileChooser.CANCEL_OPTION:
//                default:
//                    this.loadedFile = null;
//            }
//        }
        
        //this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_menuFileLoadActionPerformed

    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void buttonPlotColnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotColnameActionPerformed
        outputPlotGeneral("plot.ts", "");
    }//GEN-LAST:event_buttonPlotColnameActionPerformed

    private void textFieldPercentTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldPercentTrainActionPerformed
        try {
            int val = Integer.parseInt(textFieldPercentTrain.getText());
            sliderPercentTrain.setValue(val);
        } catch (NumberFormatException e) {
            //TODO log
        }
    }//GEN-LAST:event_textFieldPercentTrainActionPerformed

    private void sliderPercentTrainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPercentTrainStateChanged
        textFieldPercentTrain.setText("" + sliderPercentTrain.getValue());
    }//GEN-LAST:event_sliderPercentTrainStateChanged

    private void buttonTrainAndTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrainAndTestActionPerformed
        String colname = comboBoxColnamesRun.getSelectedItem().toString();
        //ktorekolvek su zafajknute, pridaju do zoznamu trainingreports svoje errormeasures a plotcode
        List<TrainAndTestReport> reports = new ArrayList<>();
        
        if (checkBoxRunMLPnnetar.isSelected()) {
            NnetarParams params = getParamsNnetar();
            Forecastable nnetar = new Nnetar();
            TrainAndTestReport report = nnetar.forecast(dataTableModel.getDataForColname(colname), params);
            reports.add(report);
        }
        
        if (checkBoxRunMLPneuralnet.isSelected()) {
            NeuralnetParams params = getParamsNeuralnet();
            Forecastable neuralnet = new Neuralnet();
            TrainAndTestReport report = neuralnet.forecast(dataTableModel.getDataForColname(colname), params);
            reports.add(report);
        }
        
        if (checkBoxRunMLPnnet.isSelected()) {
            NnetParams params = getParamsNnet();
            Forecastable nnet = new Nnet();
            ((NnetParams) params).setInputs(dataTableModel.getDataForColname(((NnetParams) params).getInputColname()));
            TrainAndTestReport report = nnet.forecast(dataTableModel.getDataForColname(colname), params);
            reports.add(report);
        }
        
        //add more methods/models here
        
        
        panelSummary.removeAll();
        JTable errorMeasuresTable = new JTable();
        errorMeasuresTable.setSize(panelSummary.getWidth(), panelSummary.getHeight());
        errorMeasuresTable.setModel(new ErrorMeasuresTableModel(reports));
        errorMeasuresTable.setDefaultRenderer(Object.class, new TableBothHeadersCellColorRenderer());
        errorMeasuresTable.setVisible(true);
        panelSummary.add(errorMeasuresTable);
        
        
        //show Forecast plot
        panelPlot.removeAll();
        JPanel frame = new JPanel();
        frame.setSize(panelPlot.getWidth(), panelPlot.getHeight());
        //TODO tu pozliepat tie ploty: par(new=TRUE) medzi kazdym kreslenim
        JLabel label = new JLabel(PlotDrawer.drawPlots(reports));
        frame.add(label);
        frame.setVisible(true);
        panelPlot.add(frame);
        this.repaint();
        /* kod na kreslenie grafu:
        try {
            caller = Utils.getCleanRCaller();
            File forecastPlotFile = code.startPlot();
            code.addRCode("plot(" + Const.FORECAST_MODEL + ")");
            code.endPlot();
            caller.setRCode(code);
            caller.runOnly();
            report.setForecastPlot(code.getPlot(forecastPlotFile));
        } catch (IOException ex) {
            Logger.getLogger(Nnetar.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }//GEN-LAST:event_buttonTrainAndTestActionPerformed

    private void comboBoxRPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRPackageActionPerformed
        CardLayout card = (CardLayout)panelSettingsMLPPackage.getLayout();
        card.show(panelSettingsMLPPackage, "panelSettingsMLPPackage_" + comboBoxRPackage.getSelectedItem().toString());
        panelSettingsMLPPackage.repaint();
    }//GEN-LAST:event_comboBoxRPackageActionPerformed

    private void buttonACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonACFActionPerformed
        outputPlotGeneral("acf", "");
    }//GEN-LAST:event_buttonACFActionPerformed

    private void buttonPACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPACFActionPerformed
        outputPlotGeneral("pacf", "");
    }//GEN-LAST:event_buttonPACFActionPerformed

    private void paramNnet_initRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramNnet_initRangeActionPerformed
        paramNnet_labelInitRangeMirror.setText("[-" + paramNnet_initRange.getText() + ";");
    }//GEN-LAST:event_paramNnet_initRangeActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonACF;
    private javax.swing.ButtonGroup buttonGroup_paramsNnetExclusive;
    private javax.swing.JButton buttonPACF;
    private javax.swing.JButton buttonPlotColname;
    private javax.swing.JButton buttonTrainAndTest;
    private javax.swing.JCheckBox checkBoxRunARIMA;
    private javax.swing.JCheckBox checkBoxRunMLPneuralnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnetar;
    private javax.swing.JComboBox comboBoxColnames;
    private javax.swing.JComboBox comboBoxColnamesRun;
    private javax.swing.JComboBox comboBoxRPackage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelARIMA;
    private javax.swing.JLabel jLabelPercTrain;
    private javax.swing.JLabel jLabelPercentSign;
    private javax.swing.JLabel jLabelRPkg;
    private javax.swing.JLabel jLabelTrainingInfo;
    private javax.swing.JTable jTableData;
    private javax.swing.JMenuBar menuBarMain;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileExit;
    private javax.swing.JMenuItem menuFileLoad;
    private javax.swing.JTabbedPane paneSettingsMethods;
    private javax.swing.JPanel paneSettingsMethodsARIMA;
    private javax.swing.JPanel paneSettingsMethodsMLP;
    private javax.swing.JPanel panelAnalysisSettings;
    private javax.swing.JPanel panelChart;
    private javax.swing.JPanel panelData;
    private javax.swing.JTabbedPane panelEverything;
    private javax.swing.JPanel panelPlot;
    private javax.swing.JPanel panelRunOutside;
    private javax.swing.JPanel panelSettingsMLPPackage;
    private javax.swing.JPanel panelSettingsMLPPackage_neuralnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnetar;
    private javax.swing.JPanel panelSummary;
    private javax.swing.JTextField paramNnet_abstol;
    private javax.swing.JCheckBox paramNnet_checkBoxSkipConn;
    private javax.swing.JComboBox paramNnet_comboBoxColnamesInput;
    private javax.swing.JComboBox paramNnet_comboBoxColnamesOutput;
    private javax.swing.JTextField paramNnet_initRange;
    private javax.swing.JLabel paramNnet_labelInitRangeMirror;
    private javax.swing.JTextField paramNnet_maxit;
    private javax.swing.JTextField paramNnet_numNodesHiddenLayer;
    private javax.swing.JRadioButton paramNnet_radioButtonCensoredOn;
    private javax.swing.JRadioButton paramNnet_radioButtonLeastSqrs;
    private javax.swing.JRadioButton paramNnet_radioButtonLogistic;
    private javax.swing.JRadioButton paramNnet_radioButtonLoglinSoftmax;
    private javax.swing.JTextField paramNnet_reltol;
    private javax.swing.JCheckBox paramNnet_traceOptimization;
    private javax.swing.JTextField paramNnet_weightDecay;
    private javax.swing.JTextField paramNnetar_textFieldLambda;
    private javax.swing.JTextField paramNnetar_textFieldNumForecasts;
    private javax.swing.JTextField paramNnetar_textFieldNumNodesHiddenLayer;
    private javax.swing.JTextField paramNnetar_textFieldNumNonSeasonalLags;
    private javax.swing.JTextField paramNnetar_textFieldNumReps;
    private javax.swing.JTextField paramNnetar_textFieldNumSeasonalLags;
    private javax.swing.JScrollPane scrollPaneData;
    private javax.swing.JSlider sliderPercentTrain;
    private javax.swing.JTextField textFieldPercentTrain;
    // End of variables declaration//GEN-END:variables

    private File loadedFile;
    private final DataTableModel dataTableModel = new DataTableModel();

    private void outputPlotGeneral(String plotFunction, String additionalArgs) {
        String colname = comboBoxColnames.getSelectedItem().toString();
        
        ImageIcon plotImage = dataTableModel.producePlotGeneral(colname, plotFunction, additionalArgs);
        
        panelPlot.removeAll();
        JPanel frame = new JPanel();
        frame.setSize(plotImage.getIconWidth(), plotImage.getIconHeight());
        JLabel label = new JLabel(plotImage);
        frame.add(label);
        frame.setVisible(true);
        panelPlot.add(frame);
        this.repaint(); //aby sa tam zobrazil ten obrazok hned, a nie o tri roky
    }

    private NnetarParams getParamsNnetar() {
        NnetarParams params = new NnetarParams();
        //zohnat vsetky parametre pre dany model:
        params.setPercentTrain(sliderPercentTrain.getValue());
        params.setNumNodesHidden(Utils.getIntegerOrDefault(paramNnetar_textFieldNumNodesHiddenLayer));
        params.setNumSeasonalLags(Utils.getIntegerOrDefault(paramNnetar_textFieldNumSeasonalLags));
        params.setNumNonSeasonalLags(Utils.getIntegerOrDefault(paramNnetar_textFieldNumNonSeasonalLags));
        params.setNumReps(Utils.getIntegerOrDefault(paramNnetar_textFieldNumReps));
        params.setLambda(Utils.getDoubleOrDefault(paramNnetar_textFieldLambda));
        params.setNumForecasts(Utils.getIntegerOrDefault(paramNnetar_textFieldNumForecasts)); //tieto sa pripocitaju k testovacim forecasts!
        
        return params;
    }
    
    private NeuralnetParams getParamsNeuralnet() {
        NeuralnetParams params = new NeuralnetParams();
        //zohnat vsetky parametre pre dany model:
        //TODO: vymysliet nejak vseobecne! zatial je to natvrdo pre nnetar
//        params.put("percentTrain", sliderPercentTrain.getValue());
//        //TODO chytat vynimky, resp. validator na cisla
//        params.put("numNodesHidden", Utils.getIntegerOrDefault(textFieldNumNodesInHiddenSingleLayer));
//        params.put("numSeasonalLags", Utils.getIntegerOrDefault(textFieldNumSeasonalLags));
//        params.put("numNonSeasonalLags", Utils.getIntegerOrDefault(textFieldNumNonSeasonalLags));
//        params.put("numReps", Utils.getIntegerOrDefault(textFieldNumReps));
//        params.put("lambda", Utils.getIntegerOrDefault(textFieldLambda));
//        params.put("numForecasts", Utils.getIntegerOrDefault(textFieldNumForecasts)); //tieto sa pripocitaju k testovacim forecasts!
        
        return params;
    }
    
    private NnetParams getParamsNnet() {
        NnetParams params = new NnetParams();
        //zohnat vsetky parametre pre dany model:
        
        params.setInputColname(paramNnet_comboBoxColnamesInput.getSelectedItem().toString());
        params.setPercentTrain(sliderPercentTrain.getValue());
        params.setAbstol(Utils.getDoubleOrDefault(paramNnet_abstol));
        params.setReltol(Utils.getDoubleOrDefault(paramNnet_reltol));
        params.setSkipLayerConnections(Utils.booleanToRBool(paramNnet_checkBoxSkipConn.isSelected()));
        params.setInitWeightsRange(Utils.getDoubleOrDefault(paramNnet_initRange));
        params.setMaxIterations(Utils.getIntegerOrDefault(paramNnet_maxit));
        params.setNumNodesHiddenLayer(Utils.getIntegerOrDefault(paramNnet_numNodesHiddenLayer));
        params.setLinearElseLogistic(Utils.booleanToRBool(paramNnet_radioButtonLogistic.isSelected()));
        params.setLeastSqrsElseMaxCondLikelihood(Utils.booleanToRBool(paramNnet_radioButtonLeastSqrs.isSelected()));
        params.setLoglinSoftmaxElseMaxCondLikelihood(Utils.booleanToRBool(paramNnet_radioButtonLoglinSoftmax.isSelected()));
        params.setCensoredOnElseOff(Utils.booleanToRBool(paramNnet_radioButtonCensoredOn.isSelected()));
        params.setWeightDecay(Utils.getDoubleOrDefault(paramNnet_weightDecay));
        params.setTraceOptimization(Utils.booleanToRBool(paramNnet_traceOptimization.isSelected()));
        
        return params;
    }
    
}
