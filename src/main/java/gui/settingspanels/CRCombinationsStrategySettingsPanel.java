package gui.settingspanels;

import models.params.Params;

import java.util.List;

public class CRCombinationsStrategySettingsPanel extends SettingsPanel {
    
    private final SettingsPanel[] radiusPanels;
    
    /**
     * Creates new form BestModelCriterionSettingsPanel
     * @param radiusPanels
     */
    public CRCombinationsStrategySettingsPanel(SettingsPanel... radiusPanels) {
        this.radiusPanels = radiusPanels;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupOptions = new javax.swing.ButtonGroup();
        radioButtonAllCombinations = new javax.swing.JRadioButton();
        radioButtonUseCenterForBoth = new javax.swing.JRadioButton();

        buttonGroupOptions.add(radioButtonAllCombinations);
        buttonGroupOptions.add(radioButtonUseCenterForBoth);

        radioButtonAllCombinations.setSelected(true);
        radioButtonAllCombinations.setText("All combinations of parameter values in Center and Radius (default)");
        radioButtonAllCombinations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonAllCombinationsActionPerformed(evt);
            }
        });

        radioButtonUseCenterForBoth.setText("Use parameter values from Center also for Radius");
        radioButtonUseCenterForBoth.setToolTipText("");
        radioButtonUseCenterForBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonUseCenterForBothActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(radioButtonAllCombinations)
            .addComponent(radioButtonUseCenterForBoth)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(radioButtonAllCombinations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonUseCenterForBoth))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioButtonAllCombinationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonAllCombinationsActionPerformed
        enableAllRadiusPanels(radioButtonAllCombinations.isSelected());
    }//GEN-LAST:event_radioButtonAllCombinationsActionPerformed

    private void radioButtonUseCenterForBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonUseCenterForBothActionPerformed
        enableAllRadiusPanels(radioButtonAllCombinations.isSelected());
    }//GEN-LAST:event_radioButtonUseCenterForBothActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupOptions;
    private javax.swing.JRadioButton radioButtonAllCombinations;
    private javax.swing.JRadioButton radioButtonUseCenterForBoth;
    // End of variables declaration//GEN-END:variables

    public boolean isAllCombinationsSelected() {
        return radioButtonAllCombinations.isSelected();
    }
    
    private void enableAllRadiusPanels(boolean trueFalse) {
        for (SettingsPanel p : radiusPanels) {
            p.enableAllElements(trueFalse);
            p.setTakenIntoAccount(trueFalse);
        }
    }
    
    @Override
    public <T extends Params> void setSpecificParams(Class<T> classss, List<T> resultList) {
        //pbly nothing happens here
        //SettingsPanel.setSomethingOneValue(classss, resultList, "setCriterion", Improvable.class, getBestModelCriterion());
    }
}
