package gui;

import gui.filefilters.FileFilterEps;
import gui.filefilters.FileFilterPdf;
import gui.filefilters.FileFilterPng;
import gui.filefilters.FileFilterPs;
import gui.filefilters.FileFilterXlsXlsx;
import gui.settingspanels.ARIMASettingsPanel;
import gui.settingspanels.DistanceSettingsPanel;
import gui.settingspanels.IntMLPCcodeSettingsPanel;
import gui.settingspanels.KNNCustomSettingsPanel;
import gui.settingspanels.KNNFNNSettingsPanel;
import gui.settingspanels.KNNkknnSettingsPanel;
import gui.settingspanels.MLPNnetSettingsPanel;
import gui.settingspanels.MLPNnetarSettingsPanel;
import gui.settingspanels.PercentTrainSettingsPanel;
import gui.settingspanels.RBFSettingsPanel;
import gui.settingspanels.SettingsPanel;
import gui.settingspanels.VARSettingsPanel;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableColumn;
import models.Arima;
import models.Forecastable;
import models.Hybrid;
import models.IntervalMLPCcode;
import models.KNNfnn;
import models.KNNkknn;
import models.MLPintNnet;
import models.MLPintNnetar;
import models.Neuralnet;
import models.Nnet;
import models.Nnetar;
import models.RBF;
import models.RBFint;
import models.RandomWalkInterval;
import models.TrainAndTestReport;
import models.TrainAndTestReportCrisp;
import models.TrainAndTestReportInterval;
import models.VAR;
import org.rosuda.JRI.Rengine;
import org.rosuda.javaGD.JGDBufferedPanel;
import params.ArimaParams;
import params.BasicStats;
import params.HybridParams;
import params.IntervalMLPCcodeParams;
import params.KNNfnnParams;
import params.KNNkknnParams;
import params.MLPintNnetParams;
import params.MLPintNnetarParams;
import params.NeuralnetParams;
import params.NnetParams;
import params.NnetarParams;
import params.RBFParams;
import params.RBFintParams;
import params.RandomWalkIntervalParams;
import params.VARParams;
import utils.CrispOutputVariable;
import utils.ExcelWriter;
import utils.MyRengine;
import utils.Utils;
import utils.imlp.Interval;
import utils.imlp.IntervalNamesCentreRadius;
import utils.imlp.IntervalNamesLowerUpper;
import utils.imlp.dist.BertoluzzaDistance;
import utils.imlp.dist.DeCarvalhoDistance;
import utils.imlp.dist.Distance;
import utils.imlp.dist.HausdorffDistance;
import utils.imlp.dist.IchinoYaguchiDistance;
import utils.imlp.dist.WeightedEuclideanDistance;
import utils.ugliez.CallParamsDrawPlotGeneral;
import utils.ugliez.CallParamsDrawPlots;
import utils.ugliez.CallParamsDrawPlotsITS;
import utils.ugliez.PlotStateKeeper;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_runFakeIntCRLBUB = new javax.swing.ButtonGroup();
        panelEverything = new javax.swing.JTabbedPane();
        panelChart = new javax.swing.JPanel();
        buttonPlotColname = new javax.swing.JButton();
        panelPlot = new javax.swing.JPanel();
        buttonACF = new javax.swing.JButton();
        buttonPACF = new javax.swing.JButton();
        buttonPlotAllITS = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listColnames = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaPlotBasicStats = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        listPlotITSspecs = new javax.swing.JList();
        buttonPlotRemoveITS = new javax.swing.JButton();
        buttonPlotAddITS = new javax.swing.JButton();
        buttonPlotExportPlot = new javax.swing.JButton();
        jLabel89 = new javax.swing.JLabel();
        textFieldPlotRangeCTSXfrom = new javax.swing.JTextField();
        jLabel126 = new javax.swing.JLabel();
        textFieldPlotRangeCTSXto = new javax.swing.JTextField();
        jLabel127 = new javax.swing.JLabel();
        textFieldPlotRangeCTSYfrom = new javax.swing.JTextField();
        jLabel128 = new javax.swing.JLabel();
        textFieldPlotRangeCTSYto = new javax.swing.JTextField();
        buttonPlotRestoreCTSRangeX = new javax.swing.JButton();
        buttonPlotRestoreCTSRangeY = new javax.swing.JButton();
        jLabel129 = new javax.swing.JLabel();
        jLabel130 = new javax.swing.JLabel();
        textFieldPlotRangeIntTSYfrom = new javax.swing.JTextField();
        textFieldPlotRangeIntTSXfrom = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        jLabel132 = new javax.swing.JLabel();
        textFieldPlotRangeIntTSYto = new javax.swing.JTextField();
        textFieldPlotRangeIntTSXto = new javax.swing.JTextField();
        buttonPlotRestoreIntTSRangeX = new javax.swing.JButton();
        buttonPlotRestoreIntTSRangeY = new javax.swing.JButton();
        buttonPlotZoomCTS = new javax.swing.JButton();
        buttonPlotZoomIntTS = new javax.swing.JButton();
        panelData = new javax.swing.JPanel();
        scrollPaneData = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        panelAnalysisSettings = new javax.swing.JPanel();
        paneSettingsMethods = new javax.swing.JTabbedPane();
        paneSettingsMethodsMLP = new javax.swing.JPanel();
        jLabelRPkg = new javax.swing.JLabel();
        comboBoxRPackage = new javax.swing.JComboBox();
        panelSettingsMLPPackage = new javax.swing.JPanel();
        panelSettingsMLPPackage_nnetar = new MLPNnetarSettingsPanel();
        panelSettingsMLPPackage_neuralnet = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        panelSettingsMLPPackage_nnet = new MLPNnetSettingsPanel();
        panelMLPPercentTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsMLPint = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        panelSettingsMLPintPackage = new javax.swing.JPanel();
        panelSettingsMLPintPackage_nnetar = new javax.swing.JPanel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        panelSettingsMLPintPackage_nnetar_center = new MLPNnetarSettingsPanel();
        panelSettingsMLPintPackage_nnetar_radius = new MLPNnetarSettingsPanel();
        panelSettingsMLPintPackage_nnet = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        panelSettingsMLPintPackage_nnet_center = new MLPNnetSettingsPanel();
        panelSettingsMLPintPackage_nnet_radius = new MLPNnetSettingsPanel();
        jLabelRPkg1 = new javax.swing.JLabel();
        comboBoxRPackageMLPint = new javax.swing.JComboBox();
        jLabel63 = new javax.swing.JLabel();
        textFieldNumNetworksToTrainMLPint = new javax.swing.JTextField();
        panelMLPintSettingsDistance = new DistanceSettingsPanel();
        panelMLPintPercentTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsIntervalMLP = new javax.swing.JPanel();
        panelSettingsIntervalMLPMode = new javax.swing.JPanel();
        panelSettingsIntervalMLPModeCcode = new IntMLPCcodeSettingsPanel();
        panelSettingsIntervalMLPModeNeuralnet = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        comboBoxIntervalMLPMode = new javax.swing.JComboBox();
        panelIntMLPPercentTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsRBF = new javax.swing.JPanel();
        panelSettingsRBFMain = new RBFSettingsPanel();
        panelRBFPercentTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsRBFint = new javax.swing.JPanel();
        jLabel143 = new javax.swing.JLabel();
        jLabel150 = new javax.swing.JLabel();
        jLabel151 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel156 = new javax.swing.JLabel();
        jLabel157 = new javax.swing.JLabel();
        jLabel138 = new javax.swing.JLabel();
        textFieldNumNetworksToTrainRBFint = new javax.swing.JTextField();
        panelRBFintSettingsDistance = new DistanceSettingsPanel();
        panelSettingsRBFint_center = new RBFSettingsPanel();
        panelSettingsRBFint_radius = new RBFSettingsPanel();
        panelRBFintPercentTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsARIMA = new javax.swing.JPanel();
        panelSettingsARIMAMain = new ARIMASettingsPanel();
        panelARIMAPercTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsKNN = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        panelSettingsKNNoptions = new javax.swing.JPanel();
        panelSettingsKNNoptions_FNN = new KNNFNNSettingsPanel();
        panelSettingsKNNoptions_custom = new KNNCustomSettingsPanel();
        panelSettingsKNNoptions_kknn = new KNNkknnSettingsPanel();
        comboBoxKNNoptions = new javax.swing.JComboBox();
        panelKNNPercTrain = new PercentTrainSettingsPanel();
        paneSettingsMethodsVAR = new javax.swing.JPanel();
        panelSettingsVARMain = new javax.swing.JPanel();
        panelSettingsVARMainInsideBecauseX = new VARSettingsPanel();
        jLabel1 = new javax.swing.JLabel();
        paneSettingsMethodsHybrid = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxSettingsHybridMethod_center = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comboBoxSettingsHybridMethod_radius = new javax.swing.JComboBox();
        panelSettingsHybrid_centerMain = new javax.swing.JPanel();
        panelSettingsHybrid_centerMain_MLPnnetar = new MLPNnetarSettingsPanel();
        panelSettingsHybrid_centerMain_MLPnnet = new MLPNnetSettingsPanel();
        panelSettingsHybrid_centerMain_RBF = new RBFSettingsPanel();
        panelSettingsHybrid_centerMain_ARIMA = new ARIMASettingsPanel();
        panelSettingsHybrid_centerMain_KNNFNN = new KNNFNNSettingsPanel();
        panelSettingsHybrid_centerMain_KNNkknn = new KNNkknnSettingsPanel();
        jSeparator3 = new javax.swing.JSeparator();
        panelSettingsHybrid_radiusMain = new javax.swing.JPanel();
        panelSettingsHybrid_radiusMain_MLPnnetar = new MLPNnetarSettingsPanel();
        panelSettingsHybrid_radiusMain_MLPnnet = new MLPNnetSettingsPanel();
        panelSettingsHybrid_radiusMain_RBF = new RBFSettingsPanel();
        panelSettingsHybrid_radiusMain_ARIMA = new ARIMASettingsPanel();
        panelSettingsHybrid_radiusMain_KNNFNN = new KNNFNNSettingsPanel();
        panelSettingsHybrid_radiusMain_KNNkknn = new KNNkknnSettingsPanel();
        panelSettingsHybridPercentTrain = new PercentTrainSettingsPanel();
        panelSettingsHybridDistance = new DistanceSettingsPanel();
        panelRunOutside = new javax.swing.JPanel();
        comboBoxColnamesRun = new javax.swing.JComboBox();
        panelSummary = new javax.swing.JPanel();
        jLabelTrainingInfo = new javax.swing.JLabel();
        checkBoxRunMLPnnetar = new javax.swing.JCheckBox();
        checkBoxRunARIMA = new javax.swing.JCheckBox();
        checkBoxRunMLPnnet = new javax.swing.JCheckBox();
        checkBoxRunMLPneuralnet = new javax.swing.JCheckBox();
        checkBoxRunIntervalMLPCcode = new javax.swing.JCheckBox();
        checkBoxRunIntervalMLPneuralnet = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        buttonTrainAndTest = new javax.swing.JButton();
        checkBoxRunKNNfnn = new javax.swing.JCheckBox();
        jLabel49 = new javax.swing.JLabel();
        labelRunFakeIntLower = new javax.swing.JLabel();
        comboBoxRunFakeIntCenter = new javax.swing.JComboBox();
        comboBoxRunFakeIntRadius = new javax.swing.JComboBox();
        labelRunFakeIntUpper = new javax.swing.JLabel();
        checkBoxRunMLPintNnetar = new javax.swing.JCheckBox();
        checkBoxRunKNNinterval = new javax.swing.JCheckBox();
        checkBoxRunKNNcustom = new javax.swing.JCheckBox();
        jLabel71 = new javax.swing.JLabel();
        textFieldRunNumForecasts = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        checkBoxRunKNNkknn = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textFieldRunDataRangeFrom = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        textFieldRunDataRangeTo = new javax.swing.JTextField();
        buttonRunExportErrorMeasures = new javax.swing.JButton();
        labelRunFakeIntCenter = new javax.swing.JLabel();
        labelRunFakeIntRadius = new javax.swing.JLabel();
        comboBoxRunFakeIntLower = new javax.swing.JComboBox();
        comboBoxRunFakeIntUpper = new javax.swing.JComboBox();
        radioButtonRunFakeIntLowerUpper = new javax.swing.JRadioButton();
        radioButtonRunFakeIntCenterRadius = new javax.swing.JRadioButton();
        checkBoxRunMLPintNnet = new javax.swing.JCheckBox();
        buttonRunRestoreRangeAll = new javax.swing.JButton();
        checkBoxRunPlotAverageCTSperMethod = new javax.swing.JCheckBox();
        checkBoxRunPlotAverageIntTSperMethod = new javax.swing.JCheckBox();
        checkBoxRunPlotAvgONLY = new javax.swing.JCheckBox();
        checkBoxRunPlotAverageCTS = new javax.swing.JCheckBox();
        checkBoxRunPlotAverageIntTS = new javax.swing.JCheckBox();
        checkBoxRunIntervalRandomWalk = new javax.swing.JCheckBox();
        jLabel133 = new javax.swing.JLabel();
        checkBoxRunVAR = new javax.swing.JCheckBox();
        checkBoxRunRBF = new javax.swing.JCheckBox();
        checkBoxRunRBFint = new javax.swing.JCheckBox();
        checkBoxRunHybrid = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        panelForecastValsAll = new javax.swing.JPanel();
        buttonExportForecastValues = new javax.swing.JButton();
        panelForecastVals = new javax.swing.JPanel();
        scrollPaneForecastVals = new javax.swing.JScrollPane();
        panelDiagramsNNs = new javax.swing.JPanel();
        scrollPaneDiagramsNNs = new javax.swing.JScrollPane();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileLoad = new javax.swing.JMenuItem();
        menuFileExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        buttonGroup_runFakeIntCRLBUB.add(radioButtonRunFakeIntLowerUpper);
        buttonGroup_runFakeIntCRLBUB.add(radioButtonRunFakeIntCenterRadius);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonPlotColname.setText("Plot data");
        buttonPlotColname.setEnabled(false);
        buttonPlotColname.setEnabled(false);
        buttonPlotColname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotColnameActionPerformed(evt);
            }
        });

        gdBufferedPanelPlot = new JGDBufferedPanel(panelPlot.getWidth(), panelPlot.getHeight());
        panelPlot.add(gdBufferedPanelPlot, BorderLayout.CENTER);
        panelPlot.setLayout(new java.awt.BorderLayout());

        buttonACF.setText("Autocorrelation Plot");
        buttonACF.setEnabled(false);
        buttonACF.setEnabled(false);
        buttonACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonACFActionPerformed(evt);
            }
        });

        buttonPACF.setText("Partial Autocorrelation Plot");
        buttonPACF.setEnabled(false);
        buttonPACF.setEnabled(false);
        buttonPACF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPACFActionPerformed(evt);
            }
        });

        buttonPlotAllITS.setText("Plot all specified ITS");
        buttonPlotAllITS.setEnabled(false);
        buttonPlotAllITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotAllITSActionPerformed(evt);
            }
        });

        listColnames.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(listColnames);

        textAreaPlotBasicStats.setEditable(false);
        textAreaPlotBasicStats.setColumns(20);
        textAreaPlotBasicStats.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        textAreaPlotBasicStats.setLineWrap(true);
        textAreaPlotBasicStats.setRows(5);
        textAreaPlotBasicStats.setFocusable(false);
        textAreaPlotBasicStats.setOpaque(false);
        jScrollPane2.setViewportView(textAreaPlotBasicStats);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        listPlotITSspecs.setModel(new DefaultListModel());
        jScrollPane4.setViewportView(listPlotITSspecs);

        buttonPlotRemoveITS.setText("Remove selected ITS");
        buttonPlotRemoveITS.setEnabled(false);
        buttonPlotRemoveITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRemoveITSActionPerformed(evt);
            }
        });

        buttonPlotAddITS.setText("Specify new ITS");
        buttonPlotAddITS.setEnabled(false);
        buttonPlotAddITS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotAddITSActionPerformed(evt);
            }
        });

        buttonPlotExportPlot.setText("Save currently shown plot");
        buttonPlotExportPlot.setEnabled(false);
        buttonPlotExportPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotExportPlotActionPerformed(evt);
            }
        });

        jLabel89.setText("Zoom CTS axis x: from");

        textFieldPlotRangeCTSXfrom.setText("0");
        textFieldPlotRangeCTSXfrom.setEnabled(false);

        jLabel126.setText("to");

        textFieldPlotRangeCTSXto.setText("0");
        textFieldPlotRangeCTSXto.setEnabled(false);

        jLabel127.setText("Zoom CTS axis y: from");

        textFieldPlotRangeCTSYfrom.setText("0");
        textFieldPlotRangeCTSYfrom.setEnabled(false);

        jLabel128.setText("to");

        textFieldPlotRangeCTSYto.setText("0");
        textFieldPlotRangeCTSYto.setEnabled(false);

        buttonPlotRestoreCTSRangeX.setText("<-restore all");
        buttonPlotRestoreCTSRangeX.setEnabled(false);
        buttonPlotRestoreCTSRangeX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRestoreCTSRangeXActionPerformed(evt);
            }
        });

        buttonPlotRestoreCTSRangeY.setText("<-restore all");
        buttonPlotRestoreCTSRangeY.setEnabled(false);
        buttonPlotRestoreCTSRangeY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRestoreCTSRangeYActionPerformed(evt);
            }
        });

        jLabel129.setText("Zoom ITS axis x: from");

        jLabel130.setText("Zoom ITS axis y: from");

        textFieldPlotRangeIntTSYfrom.setText("0");
        textFieldPlotRangeIntTSYfrom.setEnabled(false);

        textFieldPlotRangeIntTSXfrom.setText("0");
        textFieldPlotRangeIntTSXfrom.setEnabled(false);

        jLabel131.setText("to");

        jLabel132.setText("to");

        textFieldPlotRangeIntTSYto.setText("0");
        textFieldPlotRangeIntTSYto.setEnabled(false);

        textFieldPlotRangeIntTSXto.setText("0");
        textFieldPlotRangeIntTSXto.setEnabled(false);

        buttonPlotRestoreIntTSRangeX.setText("<-restore all");
        buttonPlotRestoreIntTSRangeX.setEnabled(false);
        buttonPlotRestoreIntTSRangeX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRestoreIntTSRangeXActionPerformed(evt);
            }
        });

        buttonPlotRestoreIntTSRangeY.setText("<-restore all");
        buttonPlotRestoreIntTSRangeY.setEnabled(false);
        buttonPlotRestoreIntTSRangeY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotRestoreIntTSRangeYActionPerformed(evt);
            }
        });

        buttonPlotZoomCTS.setText("Zoom CTS");
        buttonPlotZoomCTS.setEnabled(false);
        buttonPlotZoomCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotZoomCTSActionPerformed(evt);
            }
        });

        buttonPlotZoomIntTS.setText("Zoom ITS");
        buttonPlotZoomIntTS.setEnabled(false);
        buttonPlotZoomIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlotZoomIntTSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChartLayout = new javax.swing.GroupLayout(panelChart);
        panelChart.setLayout(panelChartLayout);
        panelChartLayout.setHorizontalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelChartLayout.createSequentialGroup()
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelChartLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonPlotColname)
                                    .addComponent(buttonACF)
                                    .addComponent(buttonPACF))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelChartLayout.createSequentialGroup()
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel127)
                                    .addGroup(panelChartLayout.createSequentialGroup()
                                        .addComponent(buttonPlotExportPlot)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel89)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldPlotRangeCTSXfrom)
                                    .addComponent(textFieldPlotRangeCTSYfrom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel126)
                                    .addComponent(jLabel128))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldPlotRangeCTSYto, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                                    .addComponent(textFieldPlotRangeCTSXto))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonPlotRestoreCTSRangeX)
                                    .addComponent(buttonPlotRestoreCTSRangeY))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPlotZoomCTS)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelChartLayout.createSequentialGroup()
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonPlotAllITS)
                                    .addComponent(buttonPlotRemoveITS)
                                    .addComponent(buttonPlotAddITS))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                            .addGroup(panelChartLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel129)
                                    .addComponent(jLabel130))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldPlotRangeIntTSXfrom, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                    .addComponent(textFieldPlotRangeIntTSYfrom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel131)
                                    .addComponent(jLabel132))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldPlotRangeIntTSYto, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(textFieldPlotRangeIntTSXto))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonPlotRestoreIntTSRangeX)
                                    .addComponent(buttonPlotRestoreIntTSRangeY))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonPlotZoomIntTS)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelChartLayout.setVerticalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelChartLayout.createSequentialGroup()
                            .addComponent(buttonPlotColname)
                            .addGap(3, 3, 3)
                            .addComponent(buttonACF)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonPACF))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                        .addComponent(jSeparator2)
                        .addGroup(panelChartLayout.createSequentialGroup()
                            .addComponent(buttonPlotAddITS)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonPlotRemoveITS)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonPlotAllITS)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChartLayout.createSequentialGroup()
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonPlotRestoreIntTSRangeX)
                            .addComponent(textFieldPlotRangeIntTSXto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel131)
                            .addComponent(textFieldPlotRangeIntTSXfrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel129, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonPlotRestoreIntTSRangeY)
                            .addComponent(textFieldPlotRangeIntTSYto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel132)
                            .addComponent(textFieldPlotRangeIntTSYfrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel130)))
                    .addGroup(panelChartLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(buttonPlotZoomIntTS))
                    .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChartLayout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addComponent(buttonPlotZoomCTS)
                            .addGap(15, 15, 15))
                        .addGroup(panelChartLayout.createSequentialGroup()
                            .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonPlotRestoreCTSRangeX)
                                .addComponent(textFieldPlotRangeCTSXto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(buttonPlotRestoreCTSRangeY)))
                    .addGroup(panelChartLayout.createSequentialGroup()
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldPlotRangeCTSXfrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel126)
                            .addComponent(buttonPlotExportPlot))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel127)
                            .addComponent(textFieldPlotRangeCTSYfrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel128)
                            .addComponent(textFieldPlotRangeCTSYto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(9, 9, 9)
                .addComponent(panelPlot, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Plot", panelChart);

        jTableData.setModel(dataTableModel);
        scrollPaneData.setViewportView(jTableData);

        javax.swing.GroupLayout panelDataLayout = new javax.swing.GroupLayout(panelData);
        panelData.setLayout(panelDataLayout);
        panelDataLayout.setHorizontalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 1434, Short.MAX_VALUE)
        );
        panelDataLayout.setVerticalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneData, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );

        panelEverything.addTab("Data", panelData);

        paneSettingsMethods.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jLabelRPkg.setText("R package:");

        comboBoxRPackage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nnetar", "neuralnet", "nnet" }));
        comboBoxRPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRPackageActionPerformed(evt);
            }
        });

        panelSettingsMLPPackage.setLayout(new java.awt.CardLayout());
        panelSettingsMLPPackage.add(panelSettingsMLPPackage_nnetar, "panelSettingsMLPPackage_nnetar");

        jLabel6.setText("(TODO)");

        javax.swing.GroupLayout panelSettingsMLPPackage_neuralnetLayout = new javax.swing.GroupLayout(panelSettingsMLPPackage_neuralnet);
        panelSettingsMLPPackage_neuralnet.setLayout(panelSettingsMLPPackage_neuralnetLayout);
        panelSettingsMLPPackage_neuralnetLayout.setHorizontalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_neuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(1313, Short.MAX_VALUE))
        );
        panelSettingsMLPPackage_neuralnetLayout.setVerticalGroup(
            panelSettingsMLPPackage_neuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPPackage_neuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(493, Short.MAX_VALUE))
        );

        panelSettingsMLPPackage.add(panelSettingsMLPPackage_neuralnet, "panelSettingsMLPPackage_neuralnet");
        panelSettingsMLPPackage.add(panelSettingsMLPPackage_nnet, "panelSettingsMLPPackage_nnet");

        javax.swing.GroupLayout paneSettingsMethodsMLPLayout = new javax.swing.GroupLayout(paneSettingsMethodsMLP);
        paneSettingsMethodsMLP.setLayout(paneSettingsMethodsMLPLayout);
        paneSettingsMethodsMLPLayout.setHorizontalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRPkg))
                        .addGap(18, 18, 18)
                        .addComponent(panelMLPPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsMLPLayout.setVerticalGroup(
            paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneSettingsMethodsMLPLayout.createSequentialGroup()
                        .addComponent(jLabelRPkg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxRPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelMLPPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(panelSettingsMLPPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("MLP", paneSettingsMethodsMLP);

        jLabel47.setText("Imitates iMLP by constructing an interval out of two separate forecasts for Center and Radius.");

        jLabel48.setText("Distance to use for computing the error measures:");

        panelSettingsMLPintPackage.setLayout(new java.awt.CardLayout());

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel87.setText("Center:");

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel88.setText("Radius:");

        javax.swing.GroupLayout panelSettingsMLPintPackage_nnetarLayout = new javax.swing.GroupLayout(panelSettingsMLPintPackage_nnetar);
        panelSettingsMLPintPackage_nnetar.setLayout(panelSettingsMLPintPackage_nnetarLayout);
        panelSettingsMLPintPackage_nnetarLayout.setHorizontalGroup(
            panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel87)
                    .addComponent(panelSettingsMLPintPackage_nnetar_center, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                        .addComponent(jLabel88)
                        .addGap(0, 732, Short.MAX_VALUE))
                    .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                        .addComponent(panelSettingsMLPintPackage_nnetar_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelSettingsMLPintPackage_nnetarLayout.setVerticalGroup(
            panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel87)
                    .addComponent(jLabel88))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPintPackage_nnetarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsMLPintPackage_nnetar_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSettingsMLPintPackage_nnetar_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelSettingsMLPintPackage.add(panelSettingsMLPintPackage_nnetar, "panelSettingsMLPintPackage_nnetar");

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel100.setText("Center:");

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel101.setText("Radius:");

        javax.swing.GroupLayout panelSettingsMLPintPackage_nnetLayout = new javax.swing.GroupLayout(panelSettingsMLPintPackage_nnet);
        panelSettingsMLPintPackage_nnet.setLayout(panelSettingsMLPintPackage_nnetLayout);
        panelSettingsMLPintPackage_nnetLayout.setHorizontalGroup(
            panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel100)
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addComponent(panelSettingsMLPintPackage_nnet_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addComponent(jLabel101)
                        .addGap(0, 1252, Short.MAX_VALUE))
                    .addComponent(panelSettingsMLPintPackage_nnet_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSettingsMLPintPackage_nnetLayout.setVerticalGroup(
            panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(panelSettingsMLPintPackage_nnetLayout.createSequentialGroup()
                        .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel101)
                            .addComponent(jLabel100))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSettingsMLPintPackage_nnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsMLPintPackage_nnet_center, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelSettingsMLPintPackage_nnet_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        panelSettingsMLPintPackage.add(panelSettingsMLPintPackage_nnet, "panelSettingsMLPintPackage_nnet");

        jLabelRPkg1.setText("R package:");

        comboBoxRPackageMLPint.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nnetar", "nnet" }));
        comboBoxRPackageMLPint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxRPackageMLPintActionPerformed(evt);
            }
        });

        jLabel63.setText("Num of networks to train (show best based on efficiency+coverage):");

        textFieldNumNetworksToTrainMLPint.setText("1");

        javax.swing.GroupLayout paneSettingsMethodsMLPintLayout = new javax.swing.GroupLayout(paneSettingsMethodsMLPint);
        paneSettingsMethodsMLPint.setLayout(paneSettingsMethodsMLPintLayout);
        paneSettingsMethodsMLPintLayout.setHorizontalGroup(
            paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsMLPintPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel48)
                                    .addComponent(jLabel47))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(comboBoxRPackageMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabelRPkg1))
                                .addGap(18, 18, 18)
                                .addComponent(panelMLPintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addComponent(panelMLPintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel63)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldNumNetworksToTrainMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151))))
            .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 1380, Short.MAX_VALUE))
        );
        paneSettingsMethodsMLPintLayout.setVerticalGroup(
            paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel47)
                .addGap(18, 18, 18)
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneSettingsMethodsMLPintLayout.createSequentialGroup()
                        .addComponent(jLabelRPkg1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxRPackageMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelMLPintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addComponent(panelSettingsMLPintPackage, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel63)
                        .addComponent(textFieldNumNetworksToTrainMLPint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelMLPintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(paneSettingsMethodsMLPintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 598, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("MLP(i)", paneSettingsMethodsMLPint);

        panelSettingsIntervalMLPMode.setLayout(new java.awt.CardLayout());
        panelSettingsIntervalMLPMode.add(panelSettingsIntervalMLPModeCcode, "panelSettingsIntervalMLPModeCcode");

        jLabel32.setText("neuralnet - to be finished");

        javax.swing.GroupLayout panelSettingsIntervalMLPModeNeuralnetLayout = new javax.swing.GroupLayout(panelSettingsIntervalMLPModeNeuralnet);
        panelSettingsIntervalMLPModeNeuralnet.setLayout(panelSettingsIntervalMLPModeNeuralnetLayout);
        panelSettingsIntervalMLPModeNeuralnetLayout.setHorizontalGroup(
            panelSettingsIntervalMLPModeNeuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsIntervalMLPModeNeuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSettingsIntervalMLPModeNeuralnetLayout.setVerticalGroup(
            panelSettingsIntervalMLPModeNeuralnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsIntervalMLPModeNeuralnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSettingsIntervalMLPMode.add(panelSettingsIntervalMLPModeNeuralnet, "panelSettingsIntervalMLPModeNeuralnet");

        jLabel31.setText("(Mode)");

        comboBoxIntervalMLPMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Call C code", "Use neuralnet" }));
        comboBoxIntervalMLPMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxIntervalMLPModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsIntervalMLPLayout = new javax.swing.GroupLayout(paneSettingsMethodsIntervalMLP);
        paneSettingsMethodsIntervalMLP.setLayout(paneSettingsMethodsIntervalMLPLayout);
        paneSettingsMethodsIntervalMLPLayout.setHorizontalGroup(
            paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(panelIntMLPPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelSettingsIntervalMLPMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneSettingsMethodsIntervalMLPLayout.setVerticalGroup(
            paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsIntervalMLPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelIntMLPPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneSettingsMethodsIntervalMLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel31)
                        .addComponent(comboBoxIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(panelSettingsIntervalMLPMode, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("iMLP", paneSettingsMethodsIntervalMLP);

        javax.swing.GroupLayout paneSettingsMethodsRBFLayout = new javax.swing.GroupLayout(paneSettingsMethodsRBF);
        paneSettingsMethodsRBF.setLayout(paneSettingsMethodsRBFLayout);
        paneSettingsMethodsRBFLayout.setHorizontalGroup(
            paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                        .addComponent(panelSettingsRBFMain, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 844, Short.MAX_VALUE))
                    .addComponent(panelRBFPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneSettingsMethodsRBFLayout.setVerticalGroup(
            paneSettingsMethodsRBFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelRBFPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSettingsRBFMain, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("RBF", paneSettingsMethodsRBF);

        jLabel143.setText("Imitates iRBF by constructing an interval out of two separate forecasts for Center and Radius.");

        jLabel150.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel150.setText("Center:");

        jLabel151.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel151.setText("Radius:");

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel156.setForeground(new java.awt.Color(255, 0, 0));
        jLabel156.setText("(Only center and radius.)");

        jLabel157.setText("Distance to use for computing the error measures:");

        jLabel138.setText("Num of networks to train (show best based on efficiency+coverage):");

        textFieldNumNetworksToTrainRBFint.setText("1");

        javax.swing.GroupLayout paneSettingsMethodsRBFintLayout = new javax.swing.GroupLayout(paneSettingsMethodsRBFint);
        paneSettingsMethodsRBFint.setLayout(paneSettingsMethodsRBFintLayout);
        paneSettingsMethodsRBFintLayout.setHorizontalGroup(
            paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addComponent(jLabel143)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel156)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelRBFintPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsRBFint_center, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel157)
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(jLabel138)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldNumNetworksToTrainRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelRBFintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel150))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                                .addComponent(jLabel151)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(panelSettingsRBFint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE))
                        .addGap(130, 130, 130))))
        );
        paneSettingsMethodsRBFintLayout.setVerticalGroup(
            paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel143)
                    .addComponent(jLabel156))
                .addGap(3, 3, 3)
                .addComponent(panelRBFintPercentTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel150)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsRBFint_center, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(paneSettingsMethodsRBFintLayout.createSequentialGroup()
                        .addComponent(jLabel151)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSettingsRBFint_radius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel157)
                .addGap(4, 4, 4)
                .addComponent(panelRBFintSettingsDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsRBFintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel138)
                    .addComponent(textFieldNumNetworksToTrainRBFint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82))
        );

        paneSettingsMethods.addTab("RBF(i)", paneSettingsMethodsRBFint);

        javax.swing.GroupLayout paneSettingsMethodsARIMALayout = new javax.swing.GroupLayout(paneSettingsMethodsARIMA);
        paneSettingsMethodsARIMA.setLayout(paneSettingsMethodsARIMALayout);
        paneSettingsMethodsARIMALayout.setHorizontalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsARIMAMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1360, Short.MAX_VALUE)
                    .addComponent(panelARIMAPercTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneSettingsMethodsARIMALayout.setVerticalGroup(
            paneSettingsMethodsARIMALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsARIMALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelARIMAPercTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSettingsARIMAMain, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("ARIMA", paneSettingsMethodsARIMA);

        jLabel64.setText("Select method:");

        panelSettingsKNNoptions.setLayout(new java.awt.CardLayout());
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_FNN, "panelSettingsKNNoptions_FNN");
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_custom, "panelSettingsKNNoptions_custom");
        panelSettingsKNNoptions.add(panelSettingsKNNoptions_kknn, "panelSettingsKNNoptions_kknn");

        comboBoxKNNoptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "package FNN", "package kknn", "Custom R implementation" }));
        comboBoxKNNoptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxKNNoptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneSettingsMethodsKNNLayout = new javax.swing.GroupLayout(paneSettingsMethodsKNN);
        paneSettingsMethodsKNN.setLayout(paneSettingsMethodsKNNLayout);
        paneSettingsMethodsKNNLayout.setHorizontalGroup(
            paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelSettingsKNNoptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                                .addComponent(jLabel64)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxKNNoptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 750, Short.MAX_VALUE)))
                        .addGap(510, 510, 510))
                    .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                        .addComponent(panelKNNPercTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        paneSettingsMethodsKNNLayout.setVerticalGroup(
            paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsKNNLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelKNNPercTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsKNNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(comboBoxKNNoptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(panelSettingsKNNoptions, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE))
        );

        paneSettingsMethods.addTab("kNN", paneSettingsMethodsKNN);

        panelSettingsVARMain.setLayout(new java.awt.BorderLayout());
        panelSettingsVARMain.add(panelSettingsVARMainInsideBecauseX, java.awt.BorderLayout.CENTER);

        jLabel1.setText(" ");

        javax.swing.GroupLayout paneSettingsMethodsVARLayout = new javax.swing.GroupLayout(paneSettingsMethodsVAR);
        paneSettingsMethodsVAR.setLayout(paneSettingsMethodsVARLayout);
        paneSettingsMethodsVARLayout.setHorizontalGroup(
            paneSettingsMethodsVARLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsVARLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsVARLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsVARMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1360, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsVARLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paneSettingsMethodsVARLayout.setVerticalGroup(
            paneSettingsMethodsVARLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneSettingsMethodsVARLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSettingsVARMain, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                .addContainerGap())
        );

        paneSettingsMethods.addTab("VAR", paneSettingsMethodsVAR);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Center:");

        comboBoxSettingsHybridMethod_center.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MLP (nnetar)", "MLP (nnet)", "RBF", "ARIMA", "kNN (FNN)", "kNN (kknn)" }));
        comboBoxSettingsHybridMethod_center.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSettingsHybridMethod_centerActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Radius:");

        comboBoxSettingsHybridMethod_radius.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MLP (nnetar)", "MLP (nnet)", "RBF", "ARIMA", "kNN (FNN)", "kNN (kknn)" }));
        comboBoxSettingsHybridMethod_radius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSettingsHybridMethod_radiusActionPerformed(evt);
            }
        });

        panelSettingsHybrid_centerMain.setLayout(new java.awt.CardLayout());
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_MLPnnetar, "panelSettingsHybrid_centerMain_MLPnnetar");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_MLPnnet, "panelSettingsHybrid_centerMain_MLPnnet");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_RBF, "panelSettingsHybrid_centerMain_RBF");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_ARIMA, "panelSettingsHybrid_centerMain_ARIMA");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_KNNFNN, "panelSettingsHybrid_centerMain_KNNFNN");
        panelSettingsHybrid_centerMain.add(panelSettingsHybrid_centerMain_KNNkknn, "panelSettingsHybrid_centerMain_KNNkknn");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        panelSettingsHybrid_radiusMain.setLayout(new java.awt.CardLayout());
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_MLPnnetar, "panelSettingsHybrid_radiusMain_MLPnnetar");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_MLPnnet, "panelSettingsHybrid_radiusMain_MLPnnet");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_RBF, "panelSettingsHybrid_radiusMain_RBF");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_ARIMA, "panelSettingsHybrid_radiusMain_ARIMA");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_KNNFNN, "panelSettingsHybrid_radiusMain_KNNFNN");
        panelSettingsHybrid_radiusMain.add(panelSettingsHybrid_radiusMain_KNNkknn, "panelSettingsHybrid_radiusMain_KNNkknn");

        javax.swing.GroupLayout paneSettingsMethodsHybridLayout = new javax.swing.GroupLayout(paneSettingsMethodsHybrid);
        paneSettingsMethodsHybrid.setLayout(paneSettingsMethodsHybridLayout);
        paneSettingsMethodsHybridLayout.setHorizontalGroup(
            paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxSettingsHybridMethod_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                        .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelSettingsHybrid_centerMain, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                            .addComponent(panelSettingsHybridPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettingsHybrid_radiusMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboBoxSettingsHybridMethod_radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 668, Short.MAX_VALUE))
                    .addComponent(panelSettingsHybridDistance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneSettingsMethodsHybridLayout.setVerticalGroup(
            paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneSettingsMethodsHybridLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelSettingsHybridDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSettingsHybridPercentTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxSettingsHybridMethod_center, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxSettingsHybridMethod_radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(paneSettingsMethodsHybridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelSettingsHybrid_radiusMain, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addComponent(panelSettingsHybrid_centerMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        paneSettingsMethods.addTab("Hybrid", paneSettingsMethodsHybrid);

        javax.swing.GroupLayout panelAnalysisSettingsLayout = new javax.swing.GroupLayout(panelAnalysisSettings);
        panelAnalysisSettings.setLayout(panelAnalysisSettingsLayout);
        panelAnalysisSettingsLayout.setHorizontalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods)
        );
        panelAnalysisSettingsLayout.setVerticalGroup(
            panelAnalysisSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneSettingsMethods)
        );

        panelEverything.addTab("Analysis settings", panelAnalysisSettings);

        comboBoxColnamesRun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        javax.swing.GroupLayout panelSummaryLayout = new javax.swing.GroupLayout(panelSummary);
        panelSummary.setLayout(panelSummaryLayout);
        panelSummaryLayout.setHorizontalGroup(
            panelSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1424, Short.MAX_VALUE)
        );
        panelSummaryLayout.setVerticalGroup(
            panelSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );

        checkBoxRunMLPnnetar.setSelected(true);
        checkBoxRunMLPnnetar.setText("MLP (nnetar)");

        checkBoxRunARIMA.setText("ARIMA");

        checkBoxRunMLPnnet.setText("MLP (nnet)");

        checkBoxRunMLPneuralnet.setText("MLP (neuralnet)");
        checkBoxRunMLPneuralnet.setEnabled(false);

        checkBoxRunIntervalMLPCcode.setText("iMLP (C code)");

        checkBoxRunIntervalMLPneuralnet.setText("iMLP (neuralnet)");
        checkBoxRunIntervalMLPneuralnet.setEnabled(false);

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel41.setText("CTS:");

        jLabel42.setText("Data:");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel43.setText("ITS:");

        jSeparator1.setForeground(new java.awt.Color(200, 200, 200));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonTrainAndTest.setText("Run");
        buttonTrainAndTest.setEnabled(false);
        buttonTrainAndTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrainAndTestActionPerformed(evt);
            }
        });

        checkBoxRunKNNfnn.setText("kNN (FNN)");

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel49.setText("(i)TS:");

        labelRunFakeIntLower.setText("Lower bound");
        labelRunFakeIntLower.setEnabled(false);

        comboBoxRunFakeIntCenter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        comboBoxRunFakeIntRadius.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));

        labelRunFakeIntUpper.setText("Upper bound");
        labelRunFakeIntUpper.setEnabled(false);

        checkBoxRunMLPintNnetar.setText("MLP(i) (nnetar)");

        checkBoxRunKNNinterval.setText("kNN");
        checkBoxRunKNNinterval.setEnabled(false);

        checkBoxRunKNNcustom.setText("kNN (custom)");
        checkBoxRunKNNcustom.setEnabled(false);

        jLabel71.setText("Number of forecasts to produce:");

        textFieldRunNumForecasts.setText("0");

        jLabel72.setForeground(new java.awt.Color(255, 102, 51));
        jLabel72.setText("TODO check errors for FNN");

        checkBoxRunKNNkknn.setText("kNN (kknn)");

        jLabel8.setForeground(new java.awt.Color(255, 102, 0));
        jLabel8.setText("Please note: not all models support forecasting at the moment.");

        jLabel9.setText("with data at positions");

        textFieldRunDataRangeFrom.setText("1");

        jLabel44.setText("to");

        buttonRunExportErrorMeasures.setText("Export these error measures");
        buttonRunExportErrorMeasures.setEnabled(false);
        buttonRunExportErrorMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunExportErrorMeasuresActionPerformed(evt);
            }
        });

        labelRunFakeIntCenter.setText("Center");

        labelRunFakeIntRadius.setText("Radius");

        comboBoxRunFakeIntLower.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        comboBoxRunFakeIntLower.setEnabled(false);

        comboBoxRunFakeIntUpper.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        comboBoxRunFakeIntUpper.setEnabled(false);

        radioButtonRunFakeIntLowerUpper.setEnabled(false);
        radioButtonRunFakeIntLowerUpper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRunFakeIntLowerUpperActionPerformed(evt);
            }
        });

        radioButtonRunFakeIntCenterRadius.setSelected(true);
        radioButtonRunFakeIntCenterRadius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRunFakeIntCenterRadiusActionPerformed(evt);
            }
        });

        checkBoxRunMLPintNnet.setText("MLP(i) (nnet)");

        buttonRunRestoreRangeAll.setText("<-restore all data");
        buttonRunRestoreRangeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunRestoreRangeAllActionPerformed(evt);
            }
        });

        checkBoxRunPlotAverageCTSperMethod.setText("plot avg CTS per method");
        checkBoxRunPlotAverageCTSperMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunPlotAverageCTSperMethodActionPerformed(evt);
            }
        });

        checkBoxRunPlotAverageIntTSperMethod.setText("plot avg ITS per method");
        checkBoxRunPlotAverageIntTSperMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunPlotAverageIntTSperMethodActionPerformed(evt);
            }
        });

        checkBoxRunPlotAvgONLY.setText("do not show all plots, just the average");
        checkBoxRunPlotAvgONLY.setEnabled(false);

        checkBoxRunPlotAverageCTS.setText("plot avg CTS");
        checkBoxRunPlotAverageCTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunPlotAverageCTSActionPerformed(evt);
            }
        });

        checkBoxRunPlotAverageIntTS.setText("plot avg ITS");
        checkBoxRunPlotAverageIntTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRunPlotAverageIntTSActionPerformed(evt);
            }
        });

        checkBoxRunIntervalRandomWalk.setText("random walk for ITS");

        jLabel133.setForeground(new java.awt.Color(255, 0, 0));
        jLabel133.setText("(takes values from (i)TS lower upper! and distance from MLP(i)nnet)");

        checkBoxRunVAR.setText("VAR");

        checkBoxRunRBF.setText("RBF");

        checkBoxRunRBFint.setText("RBF(i)");

        checkBoxRunHybrid.setText("Hybrid(i)");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("TODO allow to specify Lower and Upper bound (but still compute with Center and Radius)");

        javax.swing.GroupLayout panelRunOutsideLayout = new javax.swing.GroupLayout(panelRunOutside);
        panelRunOutside.setLayout(panelRunOutsideLayout);
        panelRunOutsideLayout.setHorizontalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addComponent(jLabel41)
                                                .addGap(42, 42, 42))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                                .addComponent(jLabel42)
                                                .addGap(26, 26, 26)))
                                        .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel49)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(radioButtonRunFakeIntLowerUpper))
                                            .addComponent(radioButtonRunFakeIntCenterRadius, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(labelRunFakeIntLower)
                                                    .addComponent(labelRunFakeIntUpper))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(comboBoxRunFakeIntLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comboBoxRunFakeIntUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                        .addComponent(labelRunFakeIntRadius)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBoxRunFakeIntRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                        .addComponent(labelRunFakeIntCenter)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBoxRunFakeIntCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addComponent(jLabel43))
                                .addGap(189, 189, 189)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(jLabelTrainingInfo)
                                        .addGap(16, 16, 16))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(jLabel71)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldRunNumForecasts, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(checkBoxRunIntervalMLPCcode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunIntervalMLPneuralnet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunKNNinterval)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRunIntervalRandomWalk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel133)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(buttonTrainAndTest)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldRunDataRangeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel44)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textFieldRunDataRangeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonRunRestoreRangeAll)
                                        .addGap(81, 81, 81)
                                        .addComponent(buttonRunExportErrorMeasures))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(checkBoxRunPlotAverageCTSperMethod)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxRunPlotAverageCTS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxRunPlotAverageIntTSperMethod)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxRunPlotAverageIntTS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBoxRunPlotAvgONLY))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(checkBoxRunMLPnnetar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunMLPneuralnet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunMLPnnet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunRBF)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addComponent(checkBoxRunARIMA)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(checkBoxRunKNNfnn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(checkBoxRunKNNcustom)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(checkBoxRunKNNkknn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(checkBoxRunVAR))
                                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                                .addGap(129, 129, 129)
                                                .addComponent(jLabel72))))
                                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                        .addComponent(checkBoxRunMLPintNnetar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunMLPintNnet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunRBFint)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBoxRunHybrid)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        panelRunOutsideLayout.setVerticalGroup(
            panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxRunMLPnnetar)
                            .addComponent(checkBoxRunMLPneuralnet)
                            .addComponent(checkBoxRunMLPnnet)
                            .addComponent(checkBoxRunARIMA)
                            .addComponent(checkBoxRunKNNfnn)
                            .addComponent(checkBoxRunKNNcustom)
                            .addComponent(checkBoxRunKNNkknn)
                            .addComponent(checkBoxRunVAR)
                            .addComponent(checkBoxRunRBF))
                        .addGap(1, 1, 1)
                        .addComponent(jLabel72)
                        .addGap(80, 80, 80)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxRunMLPintNnetar)
                            .addComponent(checkBoxRunMLPintNnet)
                            .addComponent(checkBoxRunRBFint)
                            .addComponent(checkBoxRunHybrid)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxRunKNNinterval)
                            .addComponent(checkBoxRunIntervalMLPneuralnet)
                            .addComponent(checkBoxRunIntervalMLPCcode)
                            .addComponent(checkBoxRunIntervalRandomWalk)
                            .addComponent(jLabel133)))
                    .addComponent(jLabelTrainingInfo)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel42)
                            .addComponent(comboBoxColnamesRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel49)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelRunFakeIntLower)
                                    .addComponent(comboBoxRunFakeIntLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelRunFakeIntUpper)
                                    .addComponent(comboBoxRunFakeIntUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(radioButtonRunFakeIntLowerUpper)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRunOutsideLayout.createSequentialGroup()
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelRunFakeIntCenter)
                                    .addComponent(comboBoxRunFakeIntCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelRunFakeIntRadius)
                                    .addComponent(comboBoxRunFakeIntRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRunOutsideLayout.createSequentialGroup()
                                .addComponent(radioButtonRunFakeIntCenterRadius)
                                .addGap(20, 20, 20)))
                        .addComponent(jLabel43))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel71)
                    .addComponent(textFieldRunNumForecasts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonTrainAndTest)
                    .addComponent(jLabel9)
                    .addComponent(textFieldRunDataRangeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(textFieldRunDataRangeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRunExportErrorMeasures)
                    .addComponent(buttonRunRestoreRangeAll))
                .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel8))
                    .addGroup(panelRunOutsideLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelRunOutsideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxRunPlotAverageCTSperMethod)
                            .addComponent(checkBoxRunPlotAverageIntTSperMethod)
                            .addComponent(checkBoxRunPlotAvgONLY)
                            .addComponent(checkBoxRunPlotAverageCTS)
                            .addComponent(checkBoxRunPlotAverageIntTS))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelEverything.addTab("Run", panelRunOutside);

        buttonExportForecastValues.setText("Export these values");
        buttonExportForecastValues.setEnabled(false);
        buttonExportForecastValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportForecastValuesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelForecastValsLayout = new javax.swing.GroupLayout(panelForecastVals);
        panelForecastVals.setLayout(panelForecastValsLayout);
        panelForecastValsLayout.setHorizontalGroup(
            panelForecastValsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneForecastVals)
        );
        panelForecastValsLayout.setVerticalGroup(
            panelForecastValsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneForecastVals, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelForecastValsAllLayout = new javax.swing.GroupLayout(panelForecastValsAll);
        panelForecastValsAll.setLayout(panelForecastValsAllLayout);
        panelForecastValsAllLayout.setHorizontalGroup(
            panelForecastValsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelForecastValsAllLayout.createSequentialGroup()
                .addComponent(buttonExportForecastValues)
                .addGap(0, 1305, Short.MAX_VALUE))
            .addComponent(panelForecastVals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelForecastValsAllLayout.setVerticalGroup(
            panelForecastValsAllLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelForecastValsAllLayout.createSequentialGroup()
                .addComponent(buttonExportForecastValues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForecastVals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelEverything.addTab("Forecast values", panelForecastValsAll);

        panelDiagramsNNs.setLayout(new java.awt.BorderLayout());
        panelDiagramsNNs.add(scrollPaneDiagramsNNs, java.awt.BorderLayout.CENTER);

        panelEverything.addTab("Diagrams of NNs", panelDiagramsNNs);

        menuFile.setText("File");

        menuFileLoad.setText("Load");
        menuFileLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileLoadActionPerformed(evt);
            }
        });
        menuFile.add(menuFileLoad);

        menuFileExit.setText("Exit");
        menuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menuBarMain.add(menuFile);

        menuEdit.setText("Edit");
        menuBarMain.add(menuEdit);

        setJMenuBar(menuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEverything)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEverything)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileLoadActionPerformed

        //TODO odkomentovat------------------------------------------------------
//        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
//        fileChooser.setMultiSelectionEnabled(false);
//        fileChooser.setAcceptAllFileFilterUsed(false); //do not allow "All files"
//        fileChooser.setFileFilter(new FileFilterXlsXlsx());
//        if (evt.getSource() == menuFileLoad) {
//            switch (fileChooser.showOpenDialog(this)) {
//                case JFileChooser.APPROVE_OPTION:
//                    this.loadedFile = fileChooser.getSelectedFile();
                                               this.loadedFile = new File("C:\\Users\\Andrejka\\Documents\\fi_muni\\phd\\3d_semester-madrid\\w02\\javier redondo\\brent_prices_its_2000_2014.xlsx");
                    dataTableModel.openFile(loadedFile);
                    dataTableModel.fireTableStructureChanged();
                    textFieldRunDataRangeTo.setText("" + dataTableModel.getRowCount());
                    for (String colname : dataTableModel.getColnames()) {
                        //TODO na toto si dat potom pozor! - obavam sa, ze ked naloadujem novy subor, ostanu tam aj stare prvky v comboBoxoch, len pribudnu nove.
                        ((DefaultListModel)(listColnames.getModel())).addElement(colname);
                        comboBoxColnamesRun.addItem(colname);
                        comboBoxRunFakeIntCenter.addItem(colname);
                        comboBoxRunFakeIntRadius.addItem(colname);
                        comboBoxRunFakeIntLower.addItem(colname);
                        comboBoxRunFakeIntUpper.addItem(colname);
                    }
                    DialogAddIntervalExplanatoryVar.setColNames(dataTableModel.getColnames());
                    DialogAddIntervalOutputVar.setColNames(dataTableModel.getColnames());
                    DialogAddCrispExplanatoryVar.setColNames(dataTableModel.getColnames());
                    VARSettingsPanel.setColNames(dataTableModel.getColnames());
                    panelSettingsVARMainInsideBecauseX = new VARSettingsPanel(); //musim ho znovu vytvorit, inak je uz vytvoreny a nema
                                                                   //tam tie colnames.
                    paneSettingsMethodsVAR.removeAll();
                    panelSettingsVARMain.removeAll();
                    panelSettingsVARMain.add(panelSettingsVARMainInsideBecauseX);
                    paneSettingsMethodsVAR.add(panelSettingsVARMain);
                    paneSettingsMethodsVAR.repaint();
                    
                    if (! dataTableModel.getColnames().isEmpty()) {
                        buttonPlotColname.setEnabled(true);
                        buttonTrainAndTest.setEnabled(true);
                        buttonACF.setEnabled(true);
                        buttonPACF.setEnabled(true);
                        buttonPlotAllITS.setEnabled(true);
                        buttonPlotAddITS.setEnabled(true);
                        buttonPlotRemoveITS.setEnabled(true);
                        ((IntMLPCcodeSettingsPanel)panelSettingsIntervalMLPModeCcode).enableAllButtons();
                        ((RBFSettingsPanel)panelSettingsRBFMain).enableAllButtons();
                        ((RBFSettingsPanel)panelSettingsRBFint_center).enableAllButtons();
                        ((RBFSettingsPanel)panelSettingsRBFint_radius).enableAllButtons();
                    }
//                    break;filechooser
//                case JFileChooser.CANCEL_OPTION:
//                default:
//                    this.loadedFile = null;
//            }
//        }
        
    }//GEN-LAST:event_menuFileLoadActionPerformed

    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileExitActionPerformed
        MyRengine.stopRengine();
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void buttonPlotColnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotColnameActionPerformed
        drawPlotGeneral(true, "plot.ts", "");
        setPlotRanges(1, 0);
    }//GEN-LAST:event_buttonPlotColnameActionPerformed

    private void comboBoxRPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRPackageActionPerformed
        CardLayout card = (CardLayout)panelSettingsMLPPackage.getLayout();
        card.show(panelSettingsMLPPackage, "panelSettingsMLPPackage_" + comboBoxRPackage.getSelectedItem().toString());
        panelSettingsMLPPackage.repaint();
    }//GEN-LAST:event_comboBoxRPackageActionPerformed

    private void buttonACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonACFActionPerformed
        drawPlotGeneral(true, "acf", "");
        textAreaPlotBasicStats.setText("");
        setPlotRanges(0, 0);
    }//GEN-LAST:event_buttonACFActionPerformed

    private void buttonPACFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPACFActionPerformed
        drawPlotGeneral(true, "pacf", "");
        textAreaPlotBasicStats.setText("");
        setPlotRanges(0, 0);
    }//GEN-LAST:event_buttonPACFActionPerformed

    private void buttonPlotAllITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotAllITSActionPerformed
        //tu uz len vezmi nasyslene v tych listoch
        PlotDrawer.drawPlotsITS(true, new CallParamsDrawPlotsITS(gdBufferedPanelPlot, panelPlot.getWidth(), panelPlot.getHeight(), dataTableModel,
                listITSPlotCentreRadius, listITSPlotLowerUpper));
        textAreaPlotBasicStats.setText("");
        buttonPlotExportPlot.setEnabled(true);
        setPlotRanges(0, 1);
    }//GEN-LAST:event_buttonPlotAllITSActionPerformed

    private void comboBoxIntervalMLPModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxIntervalMLPModeActionPerformed
        CardLayout card = (CardLayout)panelSettingsIntervalMLPMode.getLayout();
        switch (comboBoxIntervalMLPMode.getSelectedItem().toString()) {
            case "Call C code":
                card.show(panelSettingsIntervalMLPMode, "panelSettingsIntervalMLPModeCcode");
                break;
            case "Use neuralnet":
                card.show(panelSettingsIntervalMLPMode, "panelSettingsIntervalMLPModeNeuralnet");
                break;
        }
        
        panelSettingsMLPPackage.repaint();
    }//GEN-LAST:event_comboBoxIntervalMLPModeActionPerformed

    private void comboBoxKNNoptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxKNNoptionsActionPerformed
        CardLayout card = (CardLayout)panelSettingsKNNoptions.getLayout();
        switch (comboBoxKNNoptions.getSelectedItem().toString()) {
            case "package FNN":
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_FNN");
                break;
            case "Custom R implementation":
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_custom");
                break;
            case "package kknn":
                card.show(panelSettingsKNNoptions, "panelSettingsKNNoptions_kknn");
                break;
        }
        
        panelSettingsKNNoptions.repaint();
    }//GEN-LAST:event_comboBoxKNNoptionsActionPerformed

    private void buttonPlotAddITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotAddITSActionPerformed
        dialogLBUBCenterRadius = DialogLbUbCenterRadius.getInstance(this, true);
        dialogLBUBCenterRadius.setColnames(dataTableModel.getColnames());
        dialogLBUBCenterRadius.setVisible(true);
    }//GEN-LAST:event_buttonPlotAddITSActionPerformed

    private void buttonPlotRemoveITSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRemoveITSActionPerformed
        List<Object> values = listPlotITSspecs.getSelectedValuesList();
        for (Object val : values) {
            if (val instanceof IntervalNamesCentreRadius) {
                listITSPlotCentreRadius.remove((IntervalNamesCentreRadius) val);
            } else if (val instanceof IntervalNamesLowerUpper) {
                listITSPlotLowerUpper.remove((IntervalNamesLowerUpper) val);
            }
            ((DefaultListModel)(listPlotITSspecs.getModel())).removeElement(val);
        }
    }//GEN-LAST:event_buttonPlotRemoveITSActionPerformed

    private void radioButtonRunFakeIntCenterRadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRunFakeIntCenterRadiusActionPerformed
        if (radioButtonRunFakeIntCenterRadius.isSelected()) {
            labelRunFakeIntCenter.setEnabled(true);
            labelRunFakeIntRadius.setEnabled(true);
            comboBoxRunFakeIntCenter.setEnabled(true);
            comboBoxRunFakeIntRadius.setEnabled(true);
            labelRunFakeIntLower.setEnabled(false);
            labelRunFakeIntUpper.setEnabled(false);
            comboBoxRunFakeIntLower.setEnabled(false);
            comboBoxRunFakeIntUpper.setEnabled(false);
        }
    }//GEN-LAST:event_radioButtonRunFakeIntCenterRadiusActionPerformed

    private void radioButtonRunFakeIntLowerUpperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRunFakeIntLowerUpperActionPerformed
        if (radioButtonRunFakeIntLowerUpper.isSelected()) {
            labelRunFakeIntLower.setEnabled(true);
            labelRunFakeIntUpper.setEnabled(true);
            comboBoxRunFakeIntLower.setEnabled(true);
            comboBoxRunFakeIntUpper.setEnabled(true);
            labelRunFakeIntCenter.setEnabled(false);
            labelRunFakeIntRadius.setEnabled(false);
            comboBoxRunFakeIntCenter.setEnabled(false);
            comboBoxRunFakeIntRadius.setEnabled(false);
        }
    }//GEN-LAST:event_radioButtonRunFakeIntLowerUpperActionPerformed

    private void buttonRunExportErrorMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunExportErrorMeasuresActionPerformed
        //TODO export with formatting - the highest, lowest vals highlighted etc.
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setSelectedFile(new File("error_measures.xls"));
        if (evt.getSource() == buttonRunExportErrorMeasures) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    File errorMeasuresFile = fileChooser.getSelectedFile();
                    //TODO mozno sa tu spytat, ci chce prepisat existujuci subor
                    ExcelWriter.errorJTablesToExcel((ErrorMeasuresTableModel_CTS)(errorMeasuresLatest_CTS.getModel()),
                        (ErrorMeasuresTableModel_ITS)(errorMeasuresLatest_IntTS.getModel()), errorMeasuresFile);
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                //nothing
            }
        }

        //a na zaver to disablovat, aby sa na to netukalo furt
        buttonRunExportErrorMeasures.setEnabled(false);
    }//GEN-LAST:event_buttonRunExportErrorMeasuresActionPerformed

    private void buttonTrainAndTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrainAndTestActionPerformed
        buttonRunExportErrorMeasures.setEnabled(true); //enable error measures exporting after the first run
        buttonExportForecastValues.setEnabled(true);

        //ktorekolvek su zafajknute, pridaju do zoznamu trainingreports svoje errormeasures a plotcode
        List<TrainAndTestReportCrisp> reportsCTS = new ArrayList<>();
        List<TrainAndTestReportInterval> reportsIntTS = new ArrayList<>();

        if (checkBoxRunMLPnnetar.isSelected()) {
            List<NnetarParams> params = getParamsNnetar(panelMLPPercentTrain, comboBoxColnamesRun, panelSettingsMLPPackage_nnetar);
            
            showDialogTooManyModelsInCase(params.size(), "nnetar");
            if (continueWithTooManyModels) {
                Forecastable nnetar = new Nnetar();
                for (NnetarParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (nnetar.forecast(dataTableModel, p));
                    reportsCTS.add(report);
                }
            }
        }

        if (checkBoxRunMLPneuralnet.isSelected()) {
            List<NeuralnetParams> params = getParamsNeuralnet();
            
            showDialogTooManyModelsInCase(params.size(), "neuralnet");
            if (continueWithTooManyModels) {
                Forecastable neuralnet = new Neuralnet();
                for (NeuralnetParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (neuralnet.forecast(dataTableModel, p));
                    reportsCTS.add(report);
                }
            }
        }

        if (checkBoxRunMLPnnet.isSelected()) {
            List<NnetParams> params = getParamsNnet(panelMLPPercentTrain, comboBoxColnamesRun, panelSettingsMLPPackage_nnet);
            
            showDialogTooManyModelsInCase(params.size(), "nnet");
            if (continueWithTooManyModels) {
                Forecastable nnet = new Nnet();
                for (NnetParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (nnet.forecast(dataTableModel, p));
                    reportsCTS.add(report);
                }
            }
        }

        if (checkBoxRunIntervalMLPCcode.isSelected()) {
            try {
                List<IntervalMLPCcodeParams> params = getParamsIntervalMLPCcode(panelIntMLPPercentTrain, panelSettingsIntervalMLPModeCcode);

                showDialogTooManyModelsInCase(params.size(), "iMLP");
                if (continueWithTooManyModels) {
                    Forecastable cCode = new IntervalMLPCcode();
                    for (IntervalMLPCcodeParams p : params) {
                        TrainAndTestReportInterval report = (TrainAndTestReportInterval) (cCode.forecast(dataTableModel, p));
                        reportsIntTS.add(report);
                    }
                }
            } catch (IllegalArgumentException e) {
                //TODO log alebo nieco
            }
        }

        if (checkBoxRunMLPintNnetar.isSelected()) {
            List<MLPintNnetarParams> params = getParamsMLPintNnetar(panelMLPintPercentTrain, comboBoxRunFakeIntCenter, 
                    panelSettingsMLPintPackage_nnetar_center, panelMLPintPercentTrain, comboBoxRunFakeIntRadius, 
                    panelSettingsMLPintPackage_nnetar_radius, panelMLPintSettingsDistance);
            
            showDialogTooManyModelsInCase(params.size(), "MLP(i) (nnetar)");
            if (continueWithTooManyModels) {
                //run two separate forecasts, one for Center and the other for Radius
                Forecastable mlpInt = new MLPintNnetar();

                for (MLPintNnetarParams p : params) {
                    TrainAndTestReportInterval report = (TrainAndTestReportInterval) (mlpInt.forecast(dataTableModel, p));
                    reportsIntTS.add(report);
                }
            }
        }
        
        if (checkBoxRunMLPintNnet.isSelected()) {
            List<MLPintNnetParams> params = getParamsMLPintNnet(panelMLPintPercentTrain, comboBoxRunFakeIntCenter, 
                    panelSettingsMLPintPackage_nnet_center, panelMLPintPercentTrain, comboBoxRunFakeIntRadius, 
                    panelSettingsMLPintPackage_nnet_radius, panelMLPintSettingsDistance, textFieldNumNetworksToTrainMLPint);
            
            showDialogTooManyModelsInCase(params.size(), "MLP(i) (nnet)");
            if (continueWithTooManyModels) {
                //run two separate forecasts, one for Center and the other for Radius
                Forecastable mlpInt = new MLPintNnet();

                for (MLPintNnetParams p : params) {
                    TrainAndTestReportInterval report = (TrainAndTestReportInterval) (mlpInt.forecast(dataTableModel, p));
                    reportsIntTS.add(report);
                }
            }
        }

        if (checkBoxRunARIMA.isSelected()) {
            List<ArimaParams> params = getParamsArima(panelARIMAPercTrain, comboBoxColnamesRun, panelSettingsARIMAMain);
            
            showDialogTooManyModelsInCase(params.size(), "ARIMA");
            if (continueWithTooManyModels) {
                Forecastable arima = new Arima();
                for (ArimaParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (arima.forecast(dataTableModel, p));
                    if (report != null) {
                        reportsCTS.add(report);
                    }
                }
            }
        }

        if (checkBoxRunKNNfnn.isSelected()) {
            List<KNNfnnParams> params = getParamsKNNfnn(panelKNNPercTrain, comboBoxColnamesRun, panelSettingsKNNoptions_FNN);
            
            showDialogTooManyModelsInCase(params.size(), "kNN (fnn)");
            if (continueWithTooManyModels) {
                Forecastable kNN = new KNNfnn();
                for (KNNfnnParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (kNN.forecast(dataTableModel, p));
                    reportsCTS.add(report);
                }
            }
        }

//        if (checkBoxRunKNNcustom.isSelected()) {
//            List<KNNcustomParams> params = getParamsKNNcustom();
//            
//            showDialogTooManyModelsInCase(params.size(), "kNN (custom)");
//            if (continueWithTooManyModels) {
//                Forecastable kNNcustom = new KNNcustom();
//                for (KNNcustomParams p : params) {
//                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (kNNcustom.forecast(dataTableModel, p));
//                    reportsCTS.add(report);
//                }
//            }
//        }

        if (checkBoxRunKNNkknn.isSelected()) {
            List<KNNkknnParams> params = getParamsKNNkknn(panelKNNPercTrain, comboBoxColnamesRun, panelSettingsKNNoptions_kknn);
            
            showDialogTooManyModelsInCase(params.size(), "kNN (kknn)");
            if (continueWithTooManyModels) {
                Forecastable kNNkknn = new KNNkknn();
                for (KNNkknnParams p : params) {
                    TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (kNNkknn.forecast(dataTableModel, p));
                    reportsCTS.add(report);
                }
            }
        }
        
        if (checkBoxRunVAR.isSelected()) {
            try {
                List<VARParams> params = getParamsVAR(comboBoxColnamesRun, panelSettingsVARMainInsideBecauseX);

                showDialogTooManyModelsInCase(params.size(), "VAR");
                if (continueWithTooManyModels) {
                    VAR var = new VAR();
                    for (VARParams p : params) {
                        List<TrainAndTestReportCrisp> reports = var.forecast(p);
                        reportsCTS.addAll(reports);
                    }
                }
            } catch (IllegalArgumentException e) {
                //TODO log alebo nieco
            }
        }
        
        if (checkBoxRunRBF.isSelected()) {
            try {
                List<RBFParams> params = getParamsRBF(panelRBFPercentTrain, comboBoxColnamesRun, panelSettingsRBFMain);

                showDialogTooManyModelsInCase(params.size(), "RBF");
                if (continueWithTooManyModels) {
                    Forecastable rbf = new RBF();
                    for (RBFParams p : params) {
                        TrainAndTestReportCrisp report = (TrainAndTestReportCrisp) (rbf.forecast(dataTableModel, p));
                        reportsCTS.add(report);
                    }
                }
            } catch (IllegalArgumentException e) {
                //TODO log alebo nieco
            }
            
        }
        
        if (checkBoxRunRBFint.isSelected()) {
            try {
                List<RBFintParams> params = getParamsRBFint(panelRBFintPercentTrain, comboBoxRunFakeIntCenter, 
                    panelSettingsRBFint_center, panelRBFintPercentTrain, comboBoxRunFakeIntRadius, 
                    panelSettingsRBFint_radius, panelRBFintSettingsDistance, textFieldNumNetworksToTrainRBFint);

                showDialogTooManyModelsInCase(params.size(), "RBF(i)");
                if (continueWithTooManyModels) {
                    //run two separate forecasts, one for Center and the other for Radius
                    Forecastable rbfInt = new RBFint();

                    for (RBFintParams p : params) {
                        TrainAndTestReportInterval report = (TrainAndTestReportInterval) (rbfInt.forecast(dataTableModel, p));
                        reportsIntTS.add(report);
                    }
                }
            } catch (IllegalArgumentException e) {
                //TODO log alebo nieco
            }
        }
        
//        if (checkBoxRunCrispRandomWalk.isSelected()) {
//            //TODO
//        }
        
        if (checkBoxRunIntervalRandomWalk.isSelected()) {
            String colnameCenter = comboBoxRunFakeIntCenter.getSelectedItem().toString();
            String colnameRadius = comboBoxRunFakeIntRadius.getSelectedItem().toString();
            List<Interval> dataRandomWalk = Utils.zipCentersRadiiToIntervals(dataTableModel.getDataForColname(colnameCenter),
                    dataTableModel.getDataForColname(colnameRadius));

            Distance distance = ((DistanceSettingsPanel)panelMLPintSettingsDistance).getSelectedDistance();
            RandomWalkIntervalParams params = new RandomWalkIntervalParams(); //TODO add support for rangeRun
            params.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)panelMLPintPercentTrain).getPercentTrain())); //TODO prerobit? zatial berie tento
            params.setDistance(distance);
            params.setDataRangeFrom(Integer.parseInt(textFieldRunDataRangeFrom.getText()));
            params.setDataRangeTo(Integer.parseInt(textFieldRunDataRangeTo.getText()));
            params.setNumForecasts(Integer.parseInt(textFieldRunNumForecasts.getText()));
            
            RandomWalkInterval randomWalkInterval = new RandomWalkInterval();
            TrainAndTestReportInterval report = (TrainAndTestReportInterval) (randomWalkInterval.forecast(dataRandomWalk, params));
            reportsIntTS.add(report);
        }
        
        if (checkBoxRunHybrid.isSelected()) {
            //TODO checks etc. - potom, ked sa presunut getParams metody do SettingsPanelov
            
            List<HybridParams> params = getParamsHybrid();

            showDialogTooManyModelsInCase(params.size(), "Hybrid(i)");
            if (continueWithTooManyModels) {
                //run two separate forecasts, one for Center and the other for Radius
                Forecastable hybrid = new Hybrid();

                for (HybridParams p : params) {
                    TrainAndTestReportInterval report = (TrainAndTestReportInterval) (hybrid.forecast(dataTableModel, p));
                    reportsIntTS.add(report);
                }
            }
        }
        
        //add more methods/models here

        //first draw diagrams of NNs, if applicable. the plots need to be drawn second because of the problems
        //  with determining the canvas to export. this way the last canvas can be exported, for it is the plot
        List<TrainAndTestReport> allReports = new ArrayList<>();
        allReports.addAll(reportsCTS);
        allReports.addAll(reportsIntTS);
        gdBufferedPanelDiagramsNNs = new JGDBufferedPanel(panelDiagramsNNs.getWidth(), panelDiagramsNNs.getHeight());
        PlotDrawer.drawDiagrams(gdBufferedPanelDiagramsNNs, panelDiagramsNNs.getWidth(), panelDiagramsNNs.getHeight(), allReports);
        scrollPaneDiagramsNNs.setViewportView(drawNowToThisGDBufferedPanel);
        panelDiagramsNNs.removeAll();
        panelDiagramsNNs.add(scrollPaneDiagramsNNs);
        panelDiagramsNNs.repaint();
        
        //show Forecast plot
        int numForecasts = Utils.getIntegersOrDefault(textFieldRunNumForecasts).get(0);
        int from = Integer.parseInt(textFieldRunDataRangeFrom.getText()) - 1;
        int to = Integer.parseInt(textFieldRunDataRangeTo.getText());
        String colname_CTS = comboBoxColnamesRun.getSelectedItem().toString();
        PlotDrawer.drawPlots(true, new CallParamsDrawPlots(gdBufferedPanelPlot, panelPlot.getWidth(), panelPlot.getHeight(),
                dataTableModel.getDataForColname(colname_CTS), dataTableModel.getRowCount(), numForecasts, reportsCTS,
                reportsIntTS, from, to, colname_CTS, checkBoxRunPlotAverageCTSperMethod.isSelected(), 
                checkBoxRunPlotAverageCTS.isSelected(), checkBoxRunPlotAverageIntTSperMethod.isSelected(),
                checkBoxRunPlotAverageIntTS.isSelected(), checkBoxRunPlotAvgONLY.isSelected()));
        setPlotRanges(reportsCTS.size(), reportsIntTS.size());
        textAreaPlotBasicStats.setText("");
        buttonPlotExportPlot.setEnabled(true);
        
        //show errors
        drawOneOrTwoTablesErrorMeasures(reportsCTS, reportsIntTS);

        //and show forecast values in the other pane
        allReports = new ArrayList<>(); //we need to refresh allReports, 'cause sth might've been hack-added in drawPlots
        allReports.addAll(reportsCTS);
        allReports.addAll(reportsIntTS);
        forecastValuesLatest = new JTable(new ForecastValsTableModel(numForecasts, allReports));
        forecastValuesLatest.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn firstColumn = forecastValuesLatest.getColumnModel().getColumn(0);
        firstColumn.setMinWidth(10);
        firstColumn.setMaxWidth(50);
        forecastValuesLatest.setVisible(true);
        panelForecastVals.removeAll();
        scrollPaneForecastVals.setViewportView(forecastValuesLatest);
        panelForecastVals.add(scrollPaneForecastVals);
        panelForecastVals.repaint();
    }//GEN-LAST:event_buttonTrainAndTestActionPerformed

    private void comboBoxRPackageMLPintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxRPackageMLPintActionPerformed
        CardLayout card = (CardLayout) panelSettingsMLPintPackage.getLayout();
        card.show(panelSettingsMLPintPackage, "panelSettingsMLPintPackage_" + comboBoxRPackageMLPint.getSelectedItem().toString());
        panelSettingsMLPintPackage.repaint();
    }//GEN-LAST:event_comboBoxRPackageMLPintActionPerformed

    private void buttonPlotExportPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotExportPlotActionPerformed
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setSelectedFile(new File("plotExport.eps"));
        
        fileChooser.setAcceptAllFileFilterUsed(false); //do not allow "All files"
        fileChooser.addChoosableFileFilter(new FileFilterEps());
        fileChooser.addChoosableFileFilter(new FileFilterPs());
        fileChooser.addChoosableFileFilter(new FileFilterPng());
        fileChooser.addChoosableFileFilter(new FileFilterPdf());
        
        if (evt.getSource() == buttonPlotExportPlot) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    File plotFile = fileChooser.getSelectedFile();
                    //TODO mozno sa tu spytat, ci chce prepisat existujuci subor
                    Rengine rengine = MyRengine.getRengine();
                    
                    String device = "";
                    String ext = "";
                    if (fileChooser.getFileFilter() instanceof FileFilterEps) {
                        device = "postscript";
                        ext = "eps";
                    }
                    
                    if (fileChooser.getFileFilter() instanceof FileFilterPs) {
                        device = "postscript";
                        ext = "ps";
                    }
                    
                    if (fileChooser.getFileFilter() instanceof FileFilterPng) {
                        device = "png";
                        ext = "png";
                    }
                    
                    if (fileChooser.getFileFilter() instanceof FileFilterPdf) {
                        device = "pdf, paper=\"USr\""; //pdf needs to have the size specified. here = A4 (landscape)
                        ext = "pdf";
                    }
                    
                    rengine.eval("dev.print(" + device + ", file=\"" + plotFile.getPath().replace("\\", "\\\\") + "." + ext + "\", width=" + panelPlot.getWidth() + ", height=" + panelPlot.getHeight() + ")");
                    rengine.eval("dev.off()");
                    //a na zaver to disablovat, aby sa na to netukalo furt
                    buttonPlotExportPlot.setEnabled(false);
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                //nothing
            }
        }
    }//GEN-LAST:event_buttonPlotExportPlotActionPerformed

    private void buttonRunRestoreRangeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunRestoreRangeAllActionPerformed
        textFieldRunDataRangeFrom.setText("1");
        textFieldRunDataRangeTo.setText("" + dataTableModel.getRowCount());
    }//GEN-LAST:event_buttonRunRestoreRangeAllActionPerformed

    private void buttonPlotRestoreCTSRangeXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRestoreCTSRangeXActionPerformed
        textFieldPlotRangeCTSXfrom.setText("0");
        textFieldPlotRangeCTSXto.setText("" + PlotStateKeeper.getCrispXmax()); //TODO opravit podla Run: rangeFrom, To
    }//GEN-LAST:event_buttonPlotRestoreCTSRangeXActionPerformed

    private void buttonPlotRestoreCTSRangeYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRestoreCTSRangeYActionPerformed
        textFieldPlotRangeCTSYfrom.setText("0");
        textFieldPlotRangeCTSYto.setText("" + PlotStateKeeper.getCrispYmax());
    }//GEN-LAST:event_buttonPlotRestoreCTSRangeYActionPerformed

    private void buttonPlotRestoreIntTSRangeXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRestoreIntTSRangeXActionPerformed
        textFieldPlotRangeIntTSXfrom.setText("0");
        textFieldPlotRangeIntTSXto.setText("" + PlotStateKeeper.getIntXmax()); //TODO opravit podla Run: rangeFrom, To
    }//GEN-LAST:event_buttonPlotRestoreIntTSRangeXActionPerformed

    private void buttonPlotRestoreIntTSRangeYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotRestoreIntTSRangeYActionPerformed
        textFieldPlotRangeIntTSYfrom.setText("0");
        textFieldPlotRangeIntTSYto.setText("" + PlotStateKeeper.getIntYmax());
    }//GEN-LAST:event_buttonPlotRestoreIntTSRangeYActionPerformed

    private void buttonPlotZoomCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotZoomCTSActionPerformed
        if (PlotStateKeeper.getLastCallParams() instanceof CallParamsDrawPlots) {
            String rangeXCrisp = "range(c(" + textFieldPlotRangeCTSXfrom.getText() + "," + textFieldPlotRangeCTSXto.getText() + "))";
            String rangeYCrisp = "range(c(" + textFieldPlotRangeCTSYfrom.getText() + "," + textFieldPlotRangeCTSYto.getText() + "))";
            String rangeXInt = "range(c(" + PlotStateKeeper.getLastDrawnIntXmin() + "," + PlotStateKeeper.getLastDrawnIntXmax() + "))";
            String rangeYInt = "range(c(" + PlotStateKeeper.getLastDrawnIntYmin() + "," + PlotStateKeeper.getLastDrawnIntYmax() + "))";
                    
            PlotDrawer.drawPlots(false, (CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams()), rangeXCrisp , rangeYCrisp, rangeXInt, rangeYInt);
            setPlotRanges(((CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams())).getReportsCTS().size(),
                          ((CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams())).getReportsITS().size());
        } else if (PlotStateKeeper.getLastCallParams() instanceof CallParamsDrawPlotGeneral) {
            String rangeXCrisp = "range(c(" + textFieldPlotRangeCTSXfrom.getText() + "," + textFieldPlotRangeCTSXto.getText() + "))";
            String rangeYCrisp = "range(c(" + textFieldPlotRangeCTSYfrom.getText() + "," + textFieldPlotRangeCTSYto.getText() + "))";
            
            dataTableModel.drawPlotGeneral(false, (CallParamsDrawPlotGeneral)(PlotStateKeeper.getLastCallParams()), rangeXCrisp, rangeYCrisp);
            setPlotRanges(1, 0); //hack - cokolvek ine ako nula na prvom mieste
        }
    }//GEN-LAST:event_buttonPlotZoomCTSActionPerformed

    private void buttonPlotZoomIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlotZoomIntTSActionPerformed
        if (PlotStateKeeper.getLastCallParams() instanceof CallParamsDrawPlots) {
            String rangeXCrisp = "range(c(" + PlotStateKeeper.getLastDrawnCrispXmin() + "," + PlotStateKeeper.getLastDrawnCrispXmax() + "))";
            String rangeYCrisp = "range(c(" + PlotStateKeeper.getLastDrawnCrispYmin() + "," + PlotStateKeeper.getLastDrawnCrispYmax() + "))";
            String rangeXInt = "range(c(" + textFieldPlotRangeIntTSXfrom.getText() + "," + textFieldPlotRangeIntTSXto.getText() + "))";
            String rangeYInt = "range(c(" + textFieldPlotRangeIntTSYfrom.getText() + "," + textFieldPlotRangeIntTSYto.getText() + "))";
                    
            PlotDrawer.drawPlots(false, (CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams()), rangeXCrisp , rangeYCrisp, rangeXInt, rangeYInt);
            setPlotRanges(((CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams())).getReportsCTS().size(),
                          ((CallParamsDrawPlots)(PlotStateKeeper.getLastCallParams())).getReportsITS().size());
        } else if (PlotStateKeeper.getLastCallParams() instanceof CallParamsDrawPlotsITS) {
            String rangeXInt = "range(c(" + textFieldPlotRangeIntTSXfrom.getText() + "," + textFieldPlotRangeIntTSXto.getText() + "))";
            String rangeYInt = "range(c(" + textFieldPlotRangeIntTSYfrom.getText() + "," + textFieldPlotRangeIntTSYto.getText() + "))";
            
            PlotDrawer.drawPlotsITS(false, (CallParamsDrawPlotsITS)(PlotStateKeeper.getLastCallParams()), rangeXInt, rangeYInt);
            setPlotRanges(0, 1); //hack, cokolvek ine ako 0 znamena enable
        }
    }//GEN-LAST:event_buttonPlotZoomIntTSActionPerformed

    private void buttonExportForecastValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportForecastValuesActionPerformed
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setSelectedFile(new File("forecast_values.xls"));
        if (evt.getSource() == buttonExportForecastValues) {
            switch (fileChooser.showSaveDialog(this)) {
                case JFileChooser.APPROVE_OPTION:
                    File forecastValuesFile = fileChooser.getSelectedFile();
                    //TODO mozno sa tu spytat, ci chce prepisat existujuci subor
                    ExcelWriter.forecastJTableToExcel((ForecastValsTableModel)(forecastValuesLatest.getModel()), forecastValuesFile);
                    break;
                case JFileChooser.CANCEL_OPTION:
                default:
                //nothing
            }
        }

        //a na zaver to disablovat, aby sa na to netukalo furt
        buttonExportForecastValues.setEnabled(false);
    }//GEN-LAST:event_buttonExportForecastValuesActionPerformed

    private void checkBoxRunPlotAverageCTSperMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunPlotAverageCTSperMethodActionPerformed
        if (checkBoxRunPlotAverageCTSperMethod.isSelected()) { //ak sa to prave zafajklo
            checkBoxRunPlotAvgONLY.setEnabled(true); //povol ONLY AVG
        } else { //prave sa to odfajklo
            maybeTurnOffPlotAvgONLY();
        }
    }//GEN-LAST:event_checkBoxRunPlotAverageCTSperMethodActionPerformed

    private void checkBoxRunPlotAverageCTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunPlotAverageCTSActionPerformed
        if (checkBoxRunPlotAverageCTS.isSelected()) { //ak sa to prave zafajklo
            checkBoxRunPlotAvgONLY.setEnabled(true); //povol ONLY AVG
        } else { //prave sa to odfajklo
            maybeTurnOffPlotAvgONLY();
        }
    }//GEN-LAST:event_checkBoxRunPlotAverageCTSActionPerformed

    private void checkBoxRunPlotAverageIntTSperMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunPlotAverageIntTSperMethodActionPerformed
        if (checkBoxRunPlotAverageIntTSperMethod.isSelected()) { //ak sa to prave zafajklo
            checkBoxRunPlotAvgONLY.setEnabled(true); //povol ONLY AVG
        } else { //prave sa to odfajklo
            maybeTurnOffPlotAvgONLY();
        }
    }//GEN-LAST:event_checkBoxRunPlotAverageIntTSperMethodActionPerformed

    private void checkBoxRunPlotAverageIntTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRunPlotAverageIntTSActionPerformed
        if (checkBoxRunPlotAverageIntTS.isSelected()) { //ak sa to prave zafajklo
            checkBoxRunPlotAvgONLY.setEnabled(true); //povol ONLY AVG
        } else { //prave sa to odfajklo
            maybeTurnOffPlotAvgONLY();
        }
    }//GEN-LAST:event_checkBoxRunPlotAverageIntTSActionPerformed

    private void comboBoxSettingsHybridMethod_centerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSettingsHybridMethod_centerActionPerformed
        CardLayout card = (CardLayout)panelSettingsHybrid_centerMain.getLayout();
        switch (comboBoxSettingsHybridMethod_center.getSelectedItem().toString()) {
            case "MLP (nnetar)":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_MLPnnetar");
                break;
            case "MLP (nnet)":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_MLPnnet");
                break;
            case "RBF":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_RBF");
                break;
            case "ARIMA":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_ARIMA");
                break;
            case "kNN (FNN)":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_KNNFNN");
                break;
            case "kNN (kknn)":
                card.show(panelSettingsHybrid_centerMain, "panelSettingsHybrid_centerMain_KNNkknn");
                break;
        }
        panelSettingsHybrid_centerMain.repaint();
    }//GEN-LAST:event_comboBoxSettingsHybridMethod_centerActionPerformed

    private void comboBoxSettingsHybridMethod_radiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSettingsHybridMethod_radiusActionPerformed
        CardLayout card = (CardLayout)panelSettingsHybrid_radiusMain.getLayout();
        switch (comboBoxSettingsHybridMethod_radius.getSelectedItem().toString()) {
            case "MLP (nnetar)":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_MLPnnetar");
                break;
            case "MLP (nnet)":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_MLPnnet");
                break;
            case "RBF":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_RBF");
                break;
            case "ARIMA":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_ARIMA");
                break;
            case "kNN (FNN)":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_KNNFNN");
                break;
            case "kNN (kknn)":
                card.show(panelSettingsHybrid_radiusMain, "panelSettingsHybrid_radiusMain_KNNkknn");
                break;
        }
        panelSettingsHybrid_radiusMain.repaint();
    }//GEN-LAST:event_comboBoxSettingsHybridMethod_radiusActionPerformed
    
    private void maybeTurnOffPlotAvgONLY() {
        if ((! checkBoxRunPlotAverageCTS.isSelected()) &&
            (! checkBoxRunPlotAverageCTSperMethod.isSelected()) &&
            (! checkBoxRunPlotAverageIntTS.isSelected()) &&
            (! checkBoxRunPlotAverageIntTSperMethod.isSelected())) {
            checkBoxRunPlotAvgONLY.setSelected(false);
            checkBoxRunPlotAvgONLY.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.setExtendedState(JFrame.MAXIMIZED_BOTH); //maximize the window
                mainFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonACF;
    private javax.swing.JButton buttonExportForecastValues;
    private javax.swing.ButtonGroup buttonGroup_runFakeIntCRLBUB;
    private javax.swing.JButton buttonPACF;
    private javax.swing.JButton buttonPlotAddITS;
    private javax.swing.JButton buttonPlotAllITS;
    private javax.swing.JButton buttonPlotColname;
    private javax.swing.JButton buttonPlotExportPlot;
    private javax.swing.JButton buttonPlotRemoveITS;
    private javax.swing.JButton buttonPlotRestoreCTSRangeX;
    private javax.swing.JButton buttonPlotRestoreCTSRangeY;
    private javax.swing.JButton buttonPlotRestoreIntTSRangeX;
    private javax.swing.JButton buttonPlotRestoreIntTSRangeY;
    private javax.swing.JButton buttonPlotZoomCTS;
    private javax.swing.JButton buttonPlotZoomIntTS;
    private javax.swing.JButton buttonRunExportErrorMeasures;
    private javax.swing.JButton buttonRunRestoreRangeAll;
    private javax.swing.JButton buttonTrainAndTest;
    private javax.swing.JCheckBox checkBoxRunARIMA;
    private javax.swing.JCheckBox checkBoxRunHybrid;
    private javax.swing.JCheckBox checkBoxRunIntervalMLPCcode;
    private javax.swing.JCheckBox checkBoxRunIntervalMLPneuralnet;
    private javax.swing.JCheckBox checkBoxRunIntervalRandomWalk;
    private javax.swing.JCheckBox checkBoxRunKNNcustom;
    private javax.swing.JCheckBox checkBoxRunKNNfnn;
    private javax.swing.JCheckBox checkBoxRunKNNinterval;
    private javax.swing.JCheckBox checkBoxRunKNNkknn;
    private javax.swing.JCheckBox checkBoxRunMLPintNnet;
    private javax.swing.JCheckBox checkBoxRunMLPintNnetar;
    private javax.swing.JCheckBox checkBoxRunMLPneuralnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnet;
    private javax.swing.JCheckBox checkBoxRunMLPnnetar;
    private javax.swing.JCheckBox checkBoxRunPlotAverageCTS;
    private javax.swing.JCheckBox checkBoxRunPlotAverageCTSperMethod;
    private javax.swing.JCheckBox checkBoxRunPlotAverageIntTS;
    private javax.swing.JCheckBox checkBoxRunPlotAverageIntTSperMethod;
    private javax.swing.JCheckBox checkBoxRunPlotAvgONLY;
    private javax.swing.JCheckBox checkBoxRunRBF;
    private javax.swing.JCheckBox checkBoxRunRBFint;
    private javax.swing.JCheckBox checkBoxRunVAR;
    private javax.swing.JComboBox comboBoxColnamesRun;
    private javax.swing.JComboBox comboBoxIntervalMLPMode;
    private javax.swing.JComboBox comboBoxKNNoptions;
    private javax.swing.JComboBox comboBoxRPackage;
    private javax.swing.JComboBox comboBoxRPackageMLPint;
    private javax.swing.JComboBox comboBoxRunFakeIntCenter;
    private javax.swing.JComboBox comboBoxRunFakeIntLower;
    private javax.swing.JComboBox comboBoxRunFakeIntRadius;
    private javax.swing.JComboBox comboBoxRunFakeIntUpper;
    private javax.swing.JComboBox comboBoxSettingsHybridMethod_center;
    private javax.swing.JComboBox comboBoxSettingsHybridMethod_radius;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel126;
    private javax.swing.JLabel jLabel127;
    private javax.swing.JLabel jLabel128;
    private javax.swing.JLabel jLabel129;
    private javax.swing.JLabel jLabel130;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel132;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel138;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel150;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel156;
    private javax.swing.JLabel jLabel157;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelRPkg;
    private javax.swing.JLabel jLabelRPkg1;
    private javax.swing.JLabel jLabelTrainingInfo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTableData;
    private javax.swing.JLabel labelRunFakeIntCenter;
    private javax.swing.JLabel labelRunFakeIntLower;
    private javax.swing.JLabel labelRunFakeIntRadius;
    private javax.swing.JLabel labelRunFakeIntUpper;
    private javax.swing.JList listColnames;
    private javax.swing.JList listPlotITSspecs;
    private javax.swing.JMenuBar menuBarMain;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileExit;
    private javax.swing.JMenuItem menuFileLoad;
    private javax.swing.JTabbedPane paneSettingsMethods;
    private javax.swing.JPanel paneSettingsMethodsARIMA;
    private javax.swing.JPanel paneSettingsMethodsHybrid;
    private javax.swing.JPanel paneSettingsMethodsIntervalMLP;
    private javax.swing.JPanel paneSettingsMethodsKNN;
    private javax.swing.JPanel paneSettingsMethodsMLP;
    private javax.swing.JPanel paneSettingsMethodsMLPint;
    private javax.swing.JPanel paneSettingsMethodsRBF;
    private javax.swing.JPanel paneSettingsMethodsRBFint;
    private javax.swing.JPanel paneSettingsMethodsVAR;
    private javax.swing.JPanel panelARIMAPercTrain;
    private javax.swing.JPanel panelAnalysisSettings;
    private javax.swing.JPanel panelChart;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelDiagramsNNs;
    private javax.swing.JTabbedPane panelEverything;
    private javax.swing.JPanel panelForecastVals;
    private javax.swing.JPanel panelForecastValsAll;
    private javax.swing.JPanel panelIntMLPPercentTrain;
    private javax.swing.JPanel panelKNNPercTrain;
    private javax.swing.JPanel panelMLPPercentTrain;
    private javax.swing.JPanel panelMLPintPercentTrain;
    private javax.swing.JPanel panelMLPintSettingsDistance;
    private javax.swing.JPanel panelPlot;
    private javax.swing.JPanel panelRBFPercentTrain;
    private javax.swing.JPanel panelRBFintPercentTrain;
    private javax.swing.JPanel panelRBFintSettingsDistance;
    private javax.swing.JPanel panelRunOutside;
    private javax.swing.JPanel panelSettingsARIMAMain;
    private javax.swing.JPanel panelSettingsHybridDistance;
    private javax.swing.JPanel panelSettingsHybridPercentTrain;
    private javax.swing.JPanel panelSettingsHybrid_centerMain;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_ARIMA;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_KNNFNN;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_KNNkknn;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_MLPnnet;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_MLPnnetar;
    private javax.swing.JPanel panelSettingsHybrid_centerMain_RBF;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_ARIMA;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_KNNFNN;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_KNNkknn;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_MLPnnet;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_MLPnnetar;
    private javax.swing.JPanel panelSettingsHybrid_radiusMain_RBF;
    private javax.swing.JPanel panelSettingsIntervalMLPMode;
    private javax.swing.JPanel panelSettingsIntervalMLPModeCcode;
    private javax.swing.JPanel panelSettingsIntervalMLPModeNeuralnet;
    private javax.swing.JPanel panelSettingsKNNoptions;
    private javax.swing.JPanel panelSettingsKNNoptions_FNN;
    private javax.swing.JPanel panelSettingsKNNoptions_custom;
    private javax.swing.JPanel panelSettingsKNNoptions_kknn;
    private javax.swing.JPanel panelSettingsMLPPackage;
    private javax.swing.JPanel panelSettingsMLPPackage_neuralnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnet;
    private javax.swing.JPanel panelSettingsMLPPackage_nnetar;
    private javax.swing.JPanel panelSettingsMLPintPackage;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet_center;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnet_radius;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar_center;
    private javax.swing.JPanel panelSettingsMLPintPackage_nnetar_radius;
    private javax.swing.JPanel panelSettingsRBFMain;
    private javax.swing.JPanel panelSettingsRBFint_center;
    private javax.swing.JPanel panelSettingsRBFint_radius;
    private javax.swing.JPanel panelSettingsVARMain;
    private javax.swing.JPanel panelSettingsVARMainInsideBecauseX;
    private javax.swing.JPanel panelSummary;
    private javax.swing.JRadioButton radioButtonRunFakeIntCenterRadius;
    private javax.swing.JRadioButton radioButtonRunFakeIntLowerUpper;
    private javax.swing.JScrollPane scrollPaneData;
    private javax.swing.JScrollPane scrollPaneDiagramsNNs;
    private javax.swing.JScrollPane scrollPaneForecastVals;
    private javax.swing.JTextArea textAreaPlotBasicStats;
    private javax.swing.JTextField textFieldNumNetworksToTrainMLPint;
    private javax.swing.JTextField textFieldNumNetworksToTrainRBFint;
    private javax.swing.JTextField textFieldPlotRangeCTSXfrom;
    private javax.swing.JTextField textFieldPlotRangeCTSXto;
    private javax.swing.JTextField textFieldPlotRangeCTSYfrom;
    private javax.swing.JTextField textFieldPlotRangeCTSYto;
    private javax.swing.JTextField textFieldPlotRangeIntTSXfrom;
    private javax.swing.JTextField textFieldPlotRangeIntTSXto;
    private javax.swing.JTextField textFieldPlotRangeIntTSYfrom;
    private javax.swing.JTextField textFieldPlotRangeIntTSYto;
    private javax.swing.JTextField textFieldRunDataRangeFrom;
    private javax.swing.JTextField textFieldRunDataRangeTo;
    private javax.swing.JTextField textFieldRunNumForecasts;
    // End of variables declaration//GEN-END:variables

    private File loadedFile;
    private static final DataTableModel dataTableModel = new DataTableModel();
    public static JGDBufferedPanel drawNowToThisGDBufferedPanel;
    private static JGDBufferedPanel gdBufferedPanelPlot;
    private static JGDBufferedPanel gdBufferedPanelDiagramsNNs;
    private DialogLbUbCenterRadius dialogLBUBCenterRadius;
    private JTable errorMeasuresLatest_CTS = new JTable(new ErrorMeasuresTableModel_CTS(new ArrayList<TrainAndTestReportCrisp>()));
    private JTable errorMeasuresLatest_IntTS = new JTable(new ErrorMeasuresTableModel_ITS((new ArrayList<TrainAndTestReportInterval>())));
    private JTable forecastValuesLatest;
    private List<IntervalNamesCentreRadius> listITSPlotCentreRadius = new ArrayList<>();
    private List<IntervalNamesLowerUpper> listITSPlotLowerUpper = new ArrayList<>();
    private boolean continueWithTooManyModels = true;
    
    public void setContinueWithTooManyModels(boolean continueWithTooManyModels) {
        this.continueWithTooManyModels = continueWithTooManyModels;
    }

    private void drawPlotGeneral(boolean drawNew, String plotFunction, String additionalArgs) {
        //TODO mozno refaktor a vyhodit do PlotDrawera - aby tam bolo vsetko kreslenie grafov
        //String colname = comboBoxColnames.getSelectedItem().toString();
        List<String> colnames = listColnames.getSelectedValuesList();
        
        List<BasicStats> basicStats = dataTableModel.drawPlotGeneral(drawNew, new CallParamsDrawPlotGeneral(gdBufferedPanelPlot, panelPlot.getWidth(), panelPlot.getHeight(), colnames, plotFunction, additionalArgs));
        buttonPlotExportPlot.setEnabled(true);
        
        //mean, standard deviation, median
        StringBuilder basicStatsString = new StringBuilder();
        for (BasicStats stat : basicStats) {
            basicStatsString.append(stat.toString());
            basicStatsString.append(System.lineSeparator());
        }
        textAreaPlotBasicStats.setText(basicStatsString.toString());
    }
    
    //TODO Java 8 a posielat metodu ako param, aby to nebolo tak ohavne?
    private List<NnetarParams> getParamsNnetar(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsNnetar) {
        NnetarParams par = new NnetarParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        par.setColName(comboBoxColName.getSelectedItem().toString()); //data
        
        List<NnetarParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(NnetarParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(NnetarParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(NnetarParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((MLPNnetarSettingsPanel)panelSettingsNnetar).setSpecificParams(NnetarParams.class, resultList);
        
        return resultList;
    }
    
    private List<NeuralnetParams> getParamsNeuralnet() {
        NeuralnetParams params = new NeuralnetParams();
        //zohnat vsetky parametre pre dany model:
        //TODO: vymysliet nejak vseobecne! zatial je to natvrdo pre nnetar
//        params.put("percentTrain", sliderPercentTrain.getValue());
//        params.setNumForecasts(Utils.getIntegersOrDefault(textFieldRunNumForecasts));
//        //TODO chytat vynimky, resp. validator na cisla
//        params.put("numNodesHidden", Utils.getIntegersOrDefault(textFieldNumNodesInHiddenSingleLayer));
//        params.put("numSeasonalLags", Utils.getIntegersOrDefault(textFieldNumSeasonalLags));
//        params.put("numNonSeasonalLags", Utils.getIntegersOrDefault(textFieldNumNonSeasonalLags));
//        params.put("numReps", Utils.getIntegersOrDefault(textFieldNumReps));
//        params.put("lambda", Utils.getIntegersOrDefault(textFieldLambda));
//        params.put("numForecasts", Utils.getIntegersOrDefault(textFieldNumForecasts)); //tieto sa pripocitaju k testovacim forecasts!
        
        List<NeuralnetParams> resultList = new ArrayList<>();
        resultList.add(params);
        return resultList;
    }
    
    private List<NnetParams> getParamsNnet(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsNnet) {
        NnetParams par = new NnetParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        par.setColName(comboBoxColName.getSelectedItem().toString()); //data
        
        List<NnetParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(NnetParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(NnetParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(NnetParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((MLPNnetSettingsPanel)panelSettingsNnet).setSpecificParams(NnetParams.class, resultList);
        
        return resultList;
    }
    
    private List<IntervalMLPCcodeParams> getParamsIntervalMLPCcode(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JPanel panelSettingsIMLPCcode) throws IllegalArgumentException {
        IntervalMLPCcodeParams par = new IntervalMLPCcodeParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        
        List<IntervalMLPCcodeParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(IntervalMLPCcodeParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(IntervalMLPCcodeParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(IntervalMLPCcodeParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((IntMLPCcodeSettingsPanel)panelSettingsIMLPCcode).setSpecificParams(IntervalMLPCcodeParams.class, resultList);
        
        //TODO add the criterion here
        
        return resultList;
    }
    
    private List<MLPintNnetarParams> getParamsMLPintNnetar(javax.swing.JPanel percentTrainSettingsPanel_center,
            javax.swing.JComboBox comboBoxColName_center, javax.swing.JPanel panelSettingsNnetar_center,
            javax.swing.JPanel percentTrainSettingsPanel_radius, javax.swing.JComboBox comboBoxColName_radius, 
            javax.swing.JPanel panelSettingsNnetar_radius, javax.swing.JPanel panelSettingsDistance) {
        List<NnetarParams> resultListCenter = getParamsNnetar(percentTrainSettingsPanel_center, comboBoxColName_center, 
                panelSettingsNnetar_center);
        List<NnetarParams> resultListRadius = getParamsNnetar(percentTrainSettingsPanel_radius, comboBoxColName_radius, 
                panelSettingsNnetar_radius);
        
        MLPintNnetarParams par = new MLPintNnetarParams();
        
        List<MLPintNnetarParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        ((DistanceSettingsPanel)panelSettingsDistance).setSpecificParams(MLPintNnetarParams.class, resultList);
        SettingsPanel.setSomethingList(MLPintNnetarParams.class, resultList, "setParamsCenter",
                NnetarParams.class, resultListCenter);
        SettingsPanel.setSomethingList(MLPintNnetarParams.class, resultList, "setParamsRadius",
                NnetarParams.class, resultListRadius);
        
        return resultList;
    }
    
    private List<MLPintNnetParams> getParamsMLPintNnet(javax.swing.JPanel percentTrainSettingsPanel_center,
            javax.swing.JComboBox comboBoxColName_center, javax.swing.JPanel panelSettingsNnet_center,
            javax.swing.JPanel percentTrainSettingsPanel_radius, javax.swing.JComboBox comboBoxColName_radius, 
            javax.swing.JPanel panelSettingsNnet_radius, javax.swing.JPanel panelSettingsDistance,
            javax.swing.JTextField numNetsToTrainField) {
        List<NnetParams> resultListCenter = getParamsNnet(percentTrainSettingsPanel_center, comboBoxColName_center,
                panelSettingsNnet_center);
        List<NnetParams> resultListRadius = getParamsNnet(percentTrainSettingsPanel_radius, comboBoxColName_radius,
                panelSettingsNnet_radius);
        
        
        MLPintNnetParams par = new MLPintNnetParams();
        
        List<MLPintNnetParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        ((DistanceSettingsPanel)panelSettingsDistance).setSpecificParams(MLPintNnetParams.class, resultList);
        SettingsPanel.setSomethingList(MLPintNnetParams.class, resultList, "setParamsCenter",
                NnetParams.class, resultListCenter);
        SettingsPanel.setSomethingList(MLPintNnetParams.class, resultList, "setParamsRadius",
                NnetParams.class, resultListRadius);
        SettingsPanel.setSomethingList(MLPintNnetParams.class, resultList, "setNumNetsToTrain",
                Integer.class, Utils.getIntegersOrDefault(numNetsToTrainField).subList(0, 1));
        
        return resultList;
    }
    
    private List<ArimaParams> getParamsArima(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsArima) {
        ArimaParams par = new ArimaParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        par.setColName(comboBoxColName.getSelectedItem().toString()); //data
        
        List<ArimaParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(ArimaParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(ArimaParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(ArimaParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((ARIMASettingsPanel)panelSettingsArima).setSpecificParams(ArimaParams.class, resultList);
        
        return resultList;
    }
    
//    private List<KNNcustomParams> getParamsKNNcustom() { //TODO multiple vals
//        KNNcustomParams params = new KNNcustomParams();
//        //zohnat vsetky parametre pre dany model:
//        params.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)panelKNNPercTrain).getPercentTrain()));
//        params.setColName(comboBoxColnamesRun.getSelectedItem().toString()); //data
//        params.setNumForecasts(Utils.getIntegersOrDefault(textFieldRunNumForecasts).get(0));
//        params.setDataRangeFrom(Integer.parseInt(textFieldRunDataRangeFrom.getText()));
//        params.setDataRangeTo(Integer.parseInt(textFieldRunDataRangeTo.getText()));
//        //TODO setSpecific params
//        params.setNumNeighbours(Integer.parseInt(((KNNCustomSettingsPanel)panelSettingsKNNoptions_custom).getNumNeighbours()));
//        params.setLengthHistory(Integer.parseInt(((KNNCustomSettingsPanel)panelSettingsKNNoptions_custom).getLengthHistory()));
//        params.setLag(Integer.parseInt(((KNNCustomSettingsPanel)panelSettingsKNNoptions_custom).getLag()));
//        params.setDistanceMethodName(((KNNCustomSettingsPanel)panelSettingsKNNoptions_custom).getDistance());
//        params.setCombinationMethodName(((KNNCustomSettingsPanel)panelSettingsKNNoptions_custom).getCombination());
//        
//        List<KNNcustomParams> resultList = new ArrayList<>();
//        resultList.add(params);
//        return resultList;
//    }
    
    private List<KNNfnnParams> getParamsKNNfnn(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsKNNfnn) {
        KNNfnnParams par = new KNNfnnParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        par.setColName(comboBoxColName.getSelectedItem().toString()); //data
        
        List<KNNfnnParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(KNNfnnParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(KNNfnnParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(KNNfnnParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((KNNFNNSettingsPanel)panelSettingsKNNfnn).setSpecificParams(KNNfnnParams.class, resultList);
        
        return resultList;
    }
    
    private List<KNNkknnParams> getParamsKNNkknn(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsKNNkknn) {
        KNNkknnParams par = new KNNkknnParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        par.setColName(comboBoxColName.getSelectedItem().toString()); //data
        
        List<KNNkknnParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(KNNkknnParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(KNNkknnParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(KNNkknnParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((KNNkknnSettingsPanel)panelSettingsKNNkknn).setSpecificParams(KNNkknnParams.class, resultList);
        
        return resultList;
    }
    
    private List<VARParams> getParamsVAR(javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsVAR) throws IllegalArgumentException {
        VARParams par = new VARParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(100); //uses all data for training
        
        List<VARParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(VARParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(VARParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(VARParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((VARSettingsPanel)panelSettingsVAR).setSpecificParams(VARParams.class, resultList);
        //TODO prehodit dnu?
        SettingsPanel.setSomethingOneValue(VARParams.class, resultList, "setOutputVarName",
                String.class, comboBoxColName.getSelectedItem().toString());
        SettingsPanel.setSomethingOneValue(VARParams.class, resultList, "setOutputVarVals",
                List.class, dataTableModel.getDataForColname(comboBoxColName.getSelectedItem().toString()));
        
        Map<String, List<Double>> data = new HashMap<>();
        for (Object var : ((VARSettingsPanel)panelSettingsVAR).getEndogenousVars()) {
            data.put(var.toString(), dataTableModel.getDataForColname(var.toString()));
        }
        SettingsPanel.setSomethingOneValue(VARParams.class, resultList, "setData", Map.class, data);
        
        return resultList;
    }
    
    private List<RBFParams> getParamsRBF(javax.swing.JPanel percentTrainSettingsPanel,
            javax.swing.JComboBox comboBoxColName, javax.swing.JPanel panelSettingsRBF) throws IllegalArgumentException {
        RBFParams par = new RBFParams();
        //zohnat vsetky parametre pre dany model:
        par.setPercentTrain(Integer.parseInt(((PercentTrainSettingsPanel)percentTrainSettingsPanel).getPercentTrain()));
        
        List<RBFParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        SettingsPanel.setSomethingList(RBFParams.class, resultList, "setNumForecasts", 
                Integer.class, Utils.getIntegersOrDefault(textFieldRunNumForecasts).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(RBFParams.class, resultList, "setDataRangeFrom",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeFrom).subList(0, 1)); //multiple vals not supported; will work with the first
        SettingsPanel.setSomethingList(RBFParams.class, resultList, "setDataRangeTo",
                Integer.class, Utils.getIntegersOrDefault(textFieldRunDataRangeTo).subList(0, 1)); //multiple vals not supported; will work with the first
        ((RBFSettingsPanel)panelSettingsRBF).setSpecificParams(RBFParams.class, resultList);
        //POZOR, OutVars sa nastavuju az tu vonku! TODO prerobit
        CrispOutputVariable outVar = new CrispOutputVariable(); //berie hodnoty z CTS Run
        outVar.setName(comboBoxColName.getSelectedItem().toString() + comboBoxColName.getSelectedIndex());
        outVar.setFieldName(comboBoxColName.getSelectedItem().toString());
        List<CrispOutputVariable> outVarList = new ArrayList<>();
        outVarList.add(outVar);
        SettingsPanel.setSomethingOneValue(RBFParams.class, resultList, "setOutVars", List.class, outVarList);
        
        return resultList;
    }
    
    private List<RBFintParams> getParamsRBFint(javax.swing.JPanel percentTrainSettingsPanel_center,
            javax.swing.JComboBox comboBoxColName_center, javax.swing.JPanel panelSettingsRBF_center,
            javax.swing.JPanel percentTrainSettingsPanel_radius, javax.swing.JComboBox comboBoxColName_radius, 
            javax.swing.JPanel panelSettingsRBF_radius, javax.swing.JPanel panelSettingsDistance,
            javax.swing.JTextField numNetsToTrainField) throws IllegalArgumentException {
        List<RBFParams> resultListCenter = getParamsRBF(percentTrainSettingsPanel_center, comboBoxColName_center,
                panelSettingsRBF_center);
        List<RBFParams> resultListRadius = getParamsRBF(percentTrainSettingsPanel_radius, comboBoxColName_radius,
                panelSettingsRBF_radius);
        
        RBFintParams par = new RBFintParams();
        
        List<RBFintParams> resultList = new ArrayList<>();
        resultList.add(par);
        SettingsPanel.setSomethingList(RBFintParams.class, resultList, "setParamsCenter",
                RBFParams.class, resultListCenter);
        SettingsPanel.setSomethingList(RBFintParams.class, resultList, "setParamsRadius",
                RBFParams.class, resultListRadius);
        ((DistanceSettingsPanel)panelSettingsDistance).setSpecificParams(RBFintParams.class, resultList);
        SettingsPanel.setSomethingList(RBFintParams.class, resultList, "setNumNetsToTrain",
                Integer.class, Utils.getIntegersOrDefault(numNetsToTrainField));
        
        return resultList;
    }
    
    private List<HybridParams> getParamsHybrid() {
        HybridParams par = new HybridParams();
        List<HybridParams> resultList = new ArrayList<>();
        resultList.add(par);
        
        switch (comboBoxSettingsHybridMethod_center.getSelectedItem().toString()) {
            case "MLP (nnetar)":
                List<NnetarParams> resultListCenterNnetar = getParamsNnetar(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_MLPnnetar);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        NnetarParams.class, resultListCenterNnetar);
                break;
            case "MLP (nnet)":
                List<NnetParams> resultListCenterNnet = getParamsNnet(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_MLPnnet);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        NnetParams.class, resultListCenterNnet);
                break;
            case "RBF":
                List<RBFParams> resultListCenterRBF = getParamsRBF(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_RBF);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        RBFParams.class, resultListCenterRBF);
                break;
            case "ARIMA":
                List<ArimaParams> resultListCenterARIMA = getParamsArima(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_ARIMA);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        ArimaParams.class, resultListCenterARIMA);
                break;
            case "kNN (FNN)":
                List<KNNfnnParams> resultListCenterKNNFNN = getParamsKNNfnn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_KNNFNN);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        KNNfnnParams.class, resultListCenterKNNFNN);
                break;
            case "kNN (kknn)":
                List<KNNkknnParams> resultListCenterKNNkknn = getParamsKNNkknn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntCenter, panelSettingsHybrid_centerMain_KNNkknn);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsCenter",
                        KNNkknnParams.class, resultListCenterKNNkknn);
                break;
            default:
                //do not do anything, this should never happen. maybe throw an exception? 
                break;
        }
        
        
        
        switch (comboBoxSettingsHybridMethod_radius.getSelectedItem().toString()) {
            case "MLP (nnetar)":
                List<NnetarParams> resultListRadiusNnetar = getParamsNnetar(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_MLPnnetar);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        NnetarParams.class, resultListRadiusNnetar);
                break;
            case "MLP (nnet)":
                List<NnetParams> resultListRadiusNnet = getParamsNnet(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_MLPnnet);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        NnetParams.class, resultListRadiusNnet);
                break;
            case "RBF":
                List<RBFParams> resultListRadiusRBF = getParamsRBF(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_RBF);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        RBFParams.class, resultListRadiusRBF);
                break;
            case "ARIMA":
                List<ArimaParams> resultListRadiusARIMA = getParamsArima(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_ARIMA);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        ArimaParams.class, resultListRadiusARIMA);
                break;
            case "kNN (FNN)":
                List<KNNfnnParams> resultListRadiusKNNFNN = getParamsKNNfnn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_KNNFNN);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        KNNfnnParams.class, resultListRadiusKNNFNN);
                break;
            case "kNN (kknn)":
                List<KNNkknnParams> resultListRadiusKNNkknn = getParamsKNNkknn(panelSettingsHybridPercentTrain,
                        comboBoxRunFakeIntRadius, panelSettingsHybrid_radiusMain_KNNkknn);
                                
                SettingsPanel.setSomethingListForHybrid(HybridParams.class, resultList, "setParamsRadius",
                        KNNkknnParams.class, resultListRadiusKNNkknn);
                break;
            default:
                //do not do anything, this should never happen. maybe throw an exception? 
                break;
        }
        
        ((DistanceSettingsPanel)panelSettingsHybridDistance).setSpecificParams(HybridParams.class, resultList);
        SettingsPanel.setSomethingList(HybridParams.class, resultList, "setNumNetsToTrain",
                Integer.class, Utils.getIntegersOrDefault(textFieldNumNetworksToTrainRBFint));
        
        return resultList;
    }
    
    public void addPlotITS_CentreRadius(IntervalNamesCentreRadius interval) {
        listITSPlotCentreRadius.add(interval);
        ((DefaultListModel)(listPlotITSspecs.getModel())).addElement(interval);
    }
    
    public void addPlotITS_LowerUpper(IntervalNamesLowerUpper interval) {
        listITSPlotLowerUpper.add(interval);
        ((DefaultListModel)(listPlotITSspecs.getModel())).addElement(interval);
    }
    
    private void drawOneOrTwoTablesErrorMeasures(List<TrainAndTestReportCrisp> reportsCTS,
                                                 List<TrainAndTestReportInterval> reportsIntTS) {
        panelSummary.removeAll();
        JTabbedPane tabbedPaneTablesErrors = new JTabbedPane(JTabbedPane.TOP);
        tabbedPaneTablesErrors.setSize(panelSummary.getWidth(), panelSummary.getHeight());
        if ((! reportsCTS.isEmpty()) && (! reportsIntTS.isEmpty())) { //kresli obe
            JTable errorMeasuresTable_CTS = new JTable();
            errorMeasuresTable_CTS.setModel(new ErrorMeasuresTableModel_CTS(reportsCTS));
            errorMeasuresTable_CTS.setDefaultRenderer(Object.class, new TableBothHeadersCellColorRenderer());
            errorMeasuresTable_CTS.setTableHeader(null);
            errorMeasuresTable_CTS.setVisible(true);

            JScrollPane scrollPaneErrorMeasuresCTS = new JScrollPane(errorMeasuresTable_CTS);
            tabbedPaneTablesErrors.addTab("CTS", scrollPaneErrorMeasuresCTS);
            errorMeasuresLatest_CTS = errorMeasuresTable_CTS; //and save it for possible future export


            JTable errorMeasuresTable_ITS = new JTable();
            errorMeasuresTable_ITS.setModel(new ErrorMeasuresTableModel_ITS(reportsIntTS));
            errorMeasuresTable_ITS.setDefaultRenderer(Object.class, new TableBothHeadersCellColorRenderer());
            errorMeasuresTable_ITS.setTableHeader(null);
            errorMeasuresTable_ITS.setVisible(true);

            JScrollPane scrollPaneErrorMeasuresITS = new JScrollPane(errorMeasuresTable_ITS);
            tabbedPaneTablesErrors.addTab("ITS", scrollPaneErrorMeasuresITS);
            errorMeasuresLatest_IntTS = errorMeasuresTable_ITS; //and save it for possible future export
        } else {
            if (! reportsCTS.isEmpty()) { //takze IntTS je empty, CTS moze zaplnit cele miesto
                JTable errorMeasuresTable_CTS = new JTable();
                errorMeasuresTable_CTS.setModel(new ErrorMeasuresTableModel_CTS(reportsCTS));
                errorMeasuresTable_CTS.setDefaultRenderer(Object.class, new TableBothHeadersCellColorRenderer());
                errorMeasuresTable_CTS.setTableHeader(null);
                errorMeasuresTable_CTS.setVisible(true);

                JScrollPane scrollPaneErrorMeasuresCTS = new JScrollPane(errorMeasuresTable_CTS);
                tabbedPaneTablesErrors.addTab("CTS", scrollPaneErrorMeasuresCTS);
                errorMeasuresLatest_CTS = errorMeasuresTable_CTS; //and save it for possible future export
            } else {
                if (! reportsIntTS.isEmpty()) { //CTS je empty, ITS moze zaplnit cele miesto
                    JTable errorMeasuresTable_ITS = new JTable();
                    errorMeasuresTable_ITS.setModel(new ErrorMeasuresTableModel_ITS(reportsIntTS));
                    errorMeasuresTable_ITS.setDefaultRenderer(Object.class, new TableBothHeadersCellColorRenderer());
                    errorMeasuresTable_ITS.setTableHeader(null);
                    errorMeasuresTable_ITS.setVisible(true);

                    JScrollPane scrollPaneErrorMeasuresITS = new JScrollPane(errorMeasuresTable_ITS);
                    tabbedPaneTablesErrors.addTab("ITS", scrollPaneErrorMeasuresITS);
                    errorMeasuresLatest_IntTS = errorMeasuresTable_ITS; //and save it for possible future export
                } //else do not draw anything
            }
        }
        
        tabbedPaneTablesErrors.setVisible(true);
        panelSummary.add(tabbedPaneTablesErrors);
        
        panelSummary.repaint();
    }

    private void showDialogTooManyModelsInCase(int paramsSize, String modelName) {
        if (paramsSize > Utils.REASONABLY_MANY_MODELS) {
            DialogTooManyModels dialogTooManyModels = new DialogTooManyModels(this, true, paramsSize, modelName);
            dialogTooManyModels.setVisible(true);
        }
    }

    private void setPlotRanges(int sizeCTS, int sizeIntTS) {
        if (sizeCTS == 0) {
            enableZoomPlotCTS(false);
        } else {
            enableZoomPlotCTS(true);
            textFieldPlotRangeCTSXfrom.setText("" + PlotStateKeeper.getLastDrawnCrispXmin());
            textFieldPlotRangeCTSXto.setText("" + PlotStateKeeper.getLastDrawnCrispXmax());
            textFieldPlotRangeCTSYfrom.setText("" + PlotStateKeeper.getLastDrawnCrispYmin());
            textFieldPlotRangeCTSYto.setText("" + PlotStateKeeper.getLastDrawnCrispYmax());
        }
        
        if (sizeIntTS == 0) {
            enableZoomPlotIntTS(false);
        } else {
            enableZoomPlotIntTS(true);
            textFieldPlotRangeIntTSXfrom.setText("" + PlotStateKeeper.getLastDrawnIntXmin());
            textFieldPlotRangeIntTSXto.setText("" + PlotStateKeeper.getLastDrawnIntXmax());
            textFieldPlotRangeIntTSYfrom.setText("" + PlotStateKeeper.getLastDrawnIntYmin());
            textFieldPlotRangeIntTSYto.setText("" + PlotStateKeeper.getLastDrawnIntYmax());
        }
    }
    
    private void enableZoomPlotCTS(boolean trueFalse) {
        textFieldPlotRangeCTSXfrom.setEnabled(trueFalse);
        textFieldPlotRangeCTSXto.setEnabled(trueFalse);
        textFieldPlotRangeCTSYfrom.setEnabled(trueFalse);
        textFieldPlotRangeCTSYto.setEnabled(trueFalse);
        buttonPlotRestoreCTSRangeX.setEnabled(trueFalse);
        buttonPlotRestoreCTSRangeY.setEnabled(trueFalse);
        buttonPlotZoomCTS.setEnabled(trueFalse);
    }
    
    private void enableZoomPlotIntTS(boolean trueFalse) {
        textFieldPlotRangeIntTSXfrom.setEnabled(trueFalse);
        textFieldPlotRangeIntTSXto.setEnabled(trueFalse);
        textFieldPlotRangeIntTSYfrom.setEnabled(trueFalse);
        textFieldPlotRangeIntTSYto.setEnabled(trueFalse);
        buttonPlotRestoreIntTSRangeX.setEnabled(trueFalse);
        buttonPlotRestoreIntTSRangeY.setEnabled(trueFalse);
        buttonPlotZoomIntTS.setEnabled(trueFalse);
    }

    private Distance getSelectedDistance(JComboBox comboBoxDistance, JTextField euclid_beta, JTextField ichino_gamma, JTextField decarvalho_gamma, JTextField bertoluzza_beta) {
        switch (comboBoxDistance.getSelectedItem().toString()) {
            case "Euclidean distance":
                double beta = Double.parseDouble(euclid_beta.getText());
                return new WeightedEuclideanDistance(beta);
            case "Hausdorff distance":
                return new HausdorffDistance();
            case "Ichino-Yaguchi distance":
                double gamma = Double.parseDouble(ichino_gamma.getText());
                return new IchinoYaguchiDistance(gamma);
            case "De Carvalho distance":
                gamma = Double.parseDouble(decarvalho_gamma.getText());
                return new DeCarvalhoDistance(gamma);
            case "Bertoluzza distance":
                gamma = Double.parseDouble(bertoluzza_beta.getText());
                return new BertoluzzaDistance(gamma);
            default:
                return null;
        }
    }
}
